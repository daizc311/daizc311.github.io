{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/nexmoe/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/nexmoe/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/nexmoe/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/nexmoe/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1}],"Cache":[{"_id":"source/about.md","hash":"665be22c4c49ee879f7fc21dc1d56ef8a0c934af","modified":1584383489913},{"_id":"source/py.md","hash":"1e2836650c2f643b8e773f5b9052ec6ba00d9652","modified":1584383490047},{"_id":"themes/nexmoe/CODE_OF_CONDUCT.md","hash":"d1bb942aafc0077e32e7c9433d2fd9a4ed85c17a","modified":1581084128000},{"_id":"themes/nexmoe/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1581084128000},{"_id":"themes/nexmoe/README.md","hash":"be5685715d8d4c1059e1624e61e569edc8691297","modified":1581084128000},{"_id":"themes/nexmoe/_config.yml","hash":"a4c7e6562d5f3d4ee1b0fd95622574d8704b0163","modified":1589825676388},{"_id":"themes/nexmoe/font.php","hash":"9e498b59d93b1c63c4fe3c634161d6f79ec204cc","modified":1581084128000},{"_id":"themes/nexmoe/_config.example.yml","hash":"1fe56f450cd278e005daddff5d3c2b62a6eb8315","modified":1581084128000},{"_id":"source/_posts/[MXCHIP-1]开发板到手.md","hash":"91aff76e1202379234172424301a2289e55786a3","modified":1589824086725},{"_id":"source/_posts/Hexo部署GitMent评论.md","hash":"97316cb4595e875f0b67452c937ffa4bfcdc907a","modified":1589816532968},{"_id":"source/_posts/[Zookeeper学习-第一章]zk环境搭建[单机+控制台].md","hash":"067fa1e2e27506d5248c8f46b0d5bbc33be0ffda","modified":1589816533096},{"_id":"source/_posts/[Zookeeper学习-第二章]用作SpringCloud的注册中心.md","hash":"3c95d20f7fe3885aad4cd60a13f68eacda857c2d","modified":1589816532829},{"_id":"source/_posts/[Centos]yum仓库配置及常用操作.md","hash":"51d81eeaa76972fb69af731c83f7337e01fcc8bf","modified":1589816533012},{"_id":"source/_posts/SpringBoot中的redis密码问题.md","hash":"f363ec4ad4c427a8c2aeeecca8ecb762173e32b1","modified":1589816532879},{"_id":"source/_posts/好用常用人人都要会的最基本的Maven插件收集.md","hash":"ec595deffcccf8f6e76a6a4b6ce70809112d6c4a","modified":1589816532739},{"_id":"source/_posts/泛型上下界.md","hash":"da7a1fb9fd8d576131daa66db5edb35fe5b3daa6","modified":1589816533531},{"_id":"source/_posts/计划任务的Spring实现与手动实现.md","hash":"41e4dc17cf0065a756ecca77583003cadcf72096","modified":1589816533138},{"_id":"source/_posts/java8函数设计[1]-在filter中根据Key去重的函数.md","hash":"b621590b23406ebb76a11e425ff7a5bdf57e5bc3","modified":1589816532921},{"_id":"themes/nexmoe/WIKI/README.md","hash":"ef998ff4417d23ec4fd0baede1a0e5add6c87b74","modified":1581084128000},{"_id":"themes/nexmoe/WIKI/deploy.sh","hash":"ebb1fb1669abb9ebc07ed0769086097afdb1879c","modified":1581084128000},{"_id":"themes/nexmoe/README/english.md","hash":"215949a82c6fb02f385e6be6a8025cc268937917","modified":1581084128000},{"_id":"themes/nexmoe/WIKI/package.json","hash":"1a51fa8fccd41579b332eb98d7daa6e06231aa63","modified":1581084128000},{"_id":"themes/nexmoe/font/appstore-fill.svg","hash":"6ecc527b424afb79bca7d26191c53ebc08091454","modified":1581084128000},{"_id":"themes/nexmoe/font/QQ.svg","hash":"195665f0d13e71bbbea8ecbe2e46c0e4e67341fe","modified":1581084128000},{"_id":"themes/nexmoe/font/areachart.svg","hash":"71e8bef524be4ba17ac9918d8598a606b2bb26c9","modified":1581084128000},{"_id":"themes/nexmoe/font/battlenet.svg","hash":"961c2592ed5ea31319bd476e481549d69e8d075d","modified":1581084128000},{"_id":"themes/nexmoe/font/calendar-fill.svg","hash":"05e5b979cf8d150731c0eab66a4394df9498f1d6","modified":1581084128000},{"_id":"themes/nexmoe/font/bilibili.svg","hash":"0f9d92835db855bf581b9858a8fc1e3380be8808","modified":1581084128000},{"_id":"themes/nexmoe/font/ellipsis.svg","hash":"c4074867e95f14d55c3e44145ef6388f60684c5e","modified":1581084128000},{"_id":"themes/nexmoe/font/eye-fill.svg","hash":"158b8b01f5c43219b599799273a0f8d553e91723","modified":1581084128000},{"_id":"themes/nexmoe/font/dribbble.svg","hash":"0785c0b322c849b0b4736b88fc5d4fed7fbaf07d","modified":1581084128000},{"_id":"themes/nexmoe/font/container.svg","hash":"851225195cff6589a5247cb383194057190dd842","modified":1581084128000},{"_id":"themes/nexmoe/font/home.svg","hash":"97ab890dc43804b584ce3bb407bdbbb32030391b","modified":1581084128000},{"_id":"themes/nexmoe/font/info-circle.svg","hash":"016e0515fccbd158cd1094376910725f7325acd8","modified":1581084128000},{"_id":"themes/nexmoe/font/mail-fill.svg","hash":"88ef0ea02f5449d7d24ce3f957847219e5205fa0","modified":1581084128000},{"_id":"themes/nexmoe/font/left.svg","hash":"3fa57b536daade473b90cd496a39962c90de12ab","modified":1581084128000},{"_id":"themes/nexmoe/font/menu.svg","hash":"93c34d0e2156caa8dca37007da3647a6af0fa352","modified":1581084128000},{"_id":"themes/nexmoe/font/right.svg","hash":"640b5fad35d5b1b1052c2f44bb58b1db5446a296","modified":1581084128000},{"_id":"themes/nexmoe/font/tag-fill.svg","hash":"f4a7d7cb92e40295a6b4c37b8d06385cf024eb9d","modified":1581084128000},{"_id":"themes/nexmoe/font/tags-fill.svg","hash":"87f59d1b14a5160e726ec3edc6e06fbe953f40f4","modified":1581084128000},{"_id":"themes/nexmoe/font/telegram.svg","hash":"51d8f5b3fffb40696f5830608ce2abfcebf36e2c","modified":1581084128000},{"_id":"themes/nexmoe/font/time-circle-fill.svg","hash":"ecdacea2e496c505a7d07770e54c503420ef9290","modified":1581084128000},{"_id":"themes/nexmoe/font/twitter.svg","hash":"bfad6767a6cc6058f0e4798225dc8f5898a228ca","modified":1581084128000},{"_id":"themes/nexmoe/font/unorderedlist.svg","hash":"46722843f0674341bffd8ad7f2da1deabde2ba82","modified":1581084128000},{"_id":"themes/nexmoe/font/github.svg","hash":"b10f18d0644d120624c25b8ad5a2bc1ef5cff3a0","modified":1581084128000},{"_id":"themes/nexmoe/font/steam.svg","hash":"cf35facf841e5be58ac7c35945ae4a576d460b7c","modified":1581084128000},{"_id":"themes/nexmoe/font/wechat-fill.svg","hash":"fdb6fa45343307af0d6ebb70a75688afbc4444b3","modified":1581084128000},{"_id":"themes/nexmoe/languages/default.yml","hash":"6ea68c1f57cfb0311a35625e929d47e9f8af850a","modified":1581084128000},{"_id":"themes/nexmoe/font/weibo.svg","hash":"277d4076a9d17b8762e66fe81cbf0ec9f99a59cd","modified":1581084128000},{"_id":"themes/nexmoe/languages/en.yml","hash":"be92aee2d6976028f2ea3230a53422a460d18f3b","modified":1581084128000},{"_id":"themes/nexmoe/languages/zh-CN.yml","hash":"6f800ff6fc534f8650bf78a09e424499fd92d6c0","modified":1581084128000},{"_id":"themes/nexmoe/languages/zh-TW.yml","hash":"02269dc74c26cedb8991be24d5937dd37dc9a366","modified":1581084128000},{"_id":"themes/nexmoe/languages/zh-HK.yml","hash":"02269dc74c26cedb8991be24d5937dd37dc9a366","modified":1581084128000},{"_id":"themes/nexmoe/layout/archive.ejs","hash":"0aaa4ef8c51c7733ef5cc8712f4f4ee065bbc115","modified":1584384480939},{"_id":"themes/nexmoe/layout/layout.ejs","hash":"3bd7c210c32c13cea7b51441d4d734db72e59fd4","modified":1584384480957},{"_id":"themes/nexmoe/layout/index.ejs","hash":"1cb9ae0d0638f65973a4cbd31ab51fe890b0e461","modified":1584384480955},{"_id":"themes/nexmoe/layout/post.ejs","hash":"abb52fb6083c61eeadf69cfea36194507d751567","modified":1584384480960},{"_id":"themes/nexmoe/layout/py.ejs","hash":"67831bb607fd8e3f187ed2b4a9b44c982ca2e4be","modified":1581084128000},{"_id":"themes/nexmoe/font/youtube.svg","hash":"fe59b1fb78e5661feae8775bdafe855f28092f0c","modified":1581084128000},{"_id":"themes/nexmoe/WIKI/.vuepress/enhanceApp.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1581084128000},{"_id":"themes/nexmoe/font/zhihu.svg","hash":"78e11c8e8f9ba84ebb2043a8fdbc484b56db3a95","modified":1581084128000},{"_id":"source/_posts/[MXCHIP-1]开发板到手/3.jpg","hash":"7fd783087561c45e1386c9b372c5fc6e4189bdf5","modified":1583322186871},{"_id":"source/_posts/java8函数设计[1]-在filter中根据Key去重的函数/title.jpg","hash":"0e0625cebf1e3efbc5f9249245de6e1c51e34319","modified":1584389397292},{"_id":"source/_posts/好用常用人人都要会的最基本的Maven插件收集/title.jpg","hash":"c68ea1970e094297ce0bdcee9577f3f2c423198f","modified":1584388627446},{"_id":"themes/nexmoe/WIKI/.vuepress/config.js","hash":"c1d864c72bef973e2b8ccf844107182d94886a7a","modified":1581084128000},{"_id":"themes/nexmoe/WIKI/contribution/README.md","hash":"acc51a21f5e5f036f4f7a0d4109c2800be361fb8","modified":1581084128000},{"_id":"themes/nexmoe/WIKI/en/README.md","hash":"b96f8f0115e6af9afcda8afedb7210da3c0feb95","modified":1581084128000},{"_id":"source/_posts/计划任务的Spring实现与手动实现/title.jpg","hash":"9a168cbe8d76732832d0601903d3f78a15036a23","modified":1584388890579},{"_id":"themes/nexmoe/WIKI/hexo/README.md","hash":"eb3cc689a787da800c77905159f4039d1b87f9e5","modified":1581084128000},{"_id":"themes/nexmoe/WIKI/contribution/catalog.md","hash":"b59b2f664c98393fe53361343a268301ace539c1","modified":1581084128000},{"_id":"themes/nexmoe/WIKI/hexo/comment.md","hash":"148d6c37ff6902a0bc8929120ba821509eea3e43","modified":1581084128000},{"_id":"themes/nexmoe/WIKI/hexo/math.md","hash":"13797c1dc101e0c07742391e5dfbde747fa1980c","modified":1581084128000},{"_id":"themes/nexmoe/WIKI/hexo/notice.md","hash":"efc11be37c49389c4464eea54b0916c5b31143e3","modified":1581084128000},{"_id":"themes/nexmoe/WIKI/hexo/statistics.md","hash":"f55a1a804ecafa9852c1f16eb9deb2bee49a5c8c","modified":1581084128000},{"_id":"themes/nexmoe/WIKI/hexo/use.md","hash":"54082ba5ad1d50a20a94daa9be0408b269a2912c","modified":1581084128000},{"_id":"themes/nexmoe/layout/_partial/after-footer.ejs","hash":"f27788a7a423854f59cc4bb78ceda416a9bd0345","modified":1581084128000},{"_id":"themes/nexmoe/layout/_partial/analytics.ejs","hash":"a9066ea1f75b616e48ba1d5348b10f5721d7c700","modified":1581084128000},{"_id":"themes/nexmoe/layout/_partial/comment.ejs","hash":"f1e739a0eb8077168074884590033a43d4e8533f","modified":1581084128000},{"_id":"themes/nexmoe/layout/_partial/copyright.ejs","hash":"ad4e69376f3b3ec9bad6deb71bff0745cdb886eb","modified":1581084128000},{"_id":"themes/nexmoe/layout/_partial/header.ejs","hash":"7d9fd0587d667400295e506ba564609ee178bc38","modified":1584384480924},{"_id":"themes/nexmoe/layout/_partial/paginator.ejs","hash":"1e2b53fdd4eccde3c5586f2c9a0ae817384b7404","modified":1581084128000},{"_id":"themes/nexmoe/layout/_partial/sidebar.ejs","hash":"ff2ba380abe9f938bea3e37986e3d6d4b6a6c202","modified":1581084128000},{"_id":"themes/nexmoe/layout/_partial/site-verification.ejs","hash":"0e3f39f0b42c0d20c3424a6a06b2f08486b2141c","modified":1581084128000},{"_id":"themes/nexmoe/layout/_widget/recent_posts.ejs","hash":"7d9eaf8228eda803aa4956e55432f78e056d6a01","modified":1584384480926},{"_id":"themes/nexmoe/layout/_widget/archive.ejs","hash":"be3f71b3f32ec965409185eadeca9414c5e77fbe","modified":1581084128000},{"_id":"themes/nexmoe/layout/_widget/category.ejs","hash":"a46946f96a512c6e035491b767b1a60828ce85b8","modified":1581084128000},{"_id":"themes/nexmoe/layout/_widget/search.ejs","hash":"45a9a73db42cf3790c1964ad5bb3e8e358c3b65a","modified":1581084128000},{"_id":"themes/nexmoe/layout/_widget/social.ejs","hash":"6a874f100337a4d4fc5f4fade86469d365c6dd10","modified":1581084128000},{"_id":"themes/nexmoe/layout/_widget/tag.ejs","hash":"934c2175bd3d865d3e695755b2653463e0156e34","modified":1581084128000},{"_id":"themes/nexmoe/layout/_widget/tagcloud.ejs","hash":"6ca407e889fc1294a5ca3c4baa26cc51b444eb3e","modified":1581084128000},{"_id":"themes/nexmoe/scripts/helper/css_auto_version.js","hash":"1df4e02d36ae52e64f4f4e709e488d6e413d9d0c","modified":1581084128000},{"_id":"themes/nexmoe/scripts/helper/image_auto_lazyload.js","hash":"7ccb73f9076d3b4e7ee27d10ed13a58ded631461","modified":1589803359327},{"_id":"themes/nexmoe/scripts/helper/js_auto_version.js","hash":"912dfbe49c51614ef886c967349d3cb054de6f2d","modified":1581084128000},{"_id":"themes/nexmoe/source/js/app.js","hash":"ad21a4b329b11cb092d2a9fd82a4925b87b3979d","modified":1581084128000},{"_id":"themes/nexmoe/source/images/avatar.jpg","hash":"23370f0f0182b061c23bd8dd0c481875ecbeaabe","modified":1563299668683},{"_id":"themes/nexmoe/source/css/style.styl","hash":"9c12c4d5111470bffea946b48ac7cdaf071811e4","modified":1589803279104},{"_id":"source/_posts/[MXCHIP-1]开发板到手/6.jpg","hash":"dc4adaffa856c9dda6c724a9a0178433b8d7a807","modified":1583324021710},{"_id":"source/_posts/[WSL2]子系统ubuntu安装jdk8.md","hash":"a43cbfd56c7b33f4dbb8c0d7881ab0e903fb5bf7","modified":1589816532780},{"_id":"themes/nexmoe/WIKI/.vuepress/styles/palette.styl","hash":"de2cee235d25015f2efbd465eb7e5903a75d9dda","modified":1581084128000},{"_id":"themes/nexmoe/WIKI/.vuepress/public/manifest.json","hash":"871e6dc1aee085dca0f06e68928e99de69c6ae85","modified":1581084128000},{"_id":"themes/nexmoe/WIKI/component/basic/color.md","hash":"21433127a7bf2a7d1995fe53afcea6f1b9866879","modified":1581084128000},{"_id":"themes/nexmoe/WIKI/component/basic/icon.md","hash":"dcf7033f5e22a503f909a4d3266e037e4d887851","modified":1581084128000},{"_id":"themes/nexmoe/WIKI/en/Hexo/README.md","hash":"81d48222e68d5ef00bc3958941b36d49895e3f3c","modified":1581084128000},{"_id":"themes/nexmoe/WIKI/en/Hexo/use.md","hash":"5f60cccfabe3737ab7535fb282b19dfe226a3f4e","modified":1581084128000},{"_id":"themes/nexmoe/cover.png","hash":"56de9278ccf3bca1cae7eb7e15bad8aa593f1a55","modified":1581084128000},{"_id":"themes/nexmoe/layout/_partial/_analytics/baidu.ejs","hash":"ef3b445b93529c6591b560f7c4f1ebdca56e4553","modified":1581084128000},{"_id":"themes/nexmoe/layout/_partial/_analytics/cnzz.ejs","hash":"03d9d13ef82bceec59f73e525a1124df5f6f97d3","modified":1581084128000},{"_id":"themes/nexmoe/layout/_partial/_analytics/google.ejs","hash":"ec710def09c853e63dc4598ace5b6346035c1098","modified":1581084128000},{"_id":"themes/nexmoe/layout/_partial/_analytics/gtags.ejs","hash":"7f394a1d7560fd52c9d3ec654c9e374342942b2d","modified":1581084128000},{"_id":"themes/nexmoe/layout/_partial/_analytics/gtm-body.ejs","hash":"9e4d32cf44d3ed373ba0b3e8a714378be0b69a78","modified":1581084128000},{"_id":"themes/nexmoe/layout/_partial/_analytics/gtm-head.ejs","hash":"a0d96fe2a7f108cd6e2b8be5ab0b85d29e4dba57","modified":1581084128000},{"_id":"themes/nexmoe/layout/_partial/_analytics/la.ejs","hash":"92a267edbf6df81ccf4239c1047d1dc7b3f57cf5","modified":1581084128000},{"_id":"themes/nexmoe/layout/_partial/_analytics/tencent.ejs","hash":"e2e27f03fe5e22faf217858c7887849028905773","modified":1581084128000},{"_id":"themes/nexmoe/layout/_partial/_comment/DiscussBot.ejs","hash":"c905c27f2e338dad0236ad3af60070629e3af97f","modified":1581084128000},{"_id":"themes/nexmoe/layout/_partial/_comment/changyan.ejs","hash":"1d703bf1e19ec5f0721dac537f917a077899462b","modified":1581084128000},{"_id":"themes/nexmoe/layout/_partial/_comment/disqus.ejs","hash":"48d8f5e4ac308f8a92a48f8f7dfe99e5465dcb6e","modified":1581084128000},{"_id":"themes/nexmoe/layout/_partial/_comment/disqusjs.ejs","hash":"7518e88f2504b9844f71190e079df07f51847472","modified":1584384480923},{"_id":"themes/nexmoe/layout/_partial/_comment/gitalk.ejs","hash":"0fcfd92a3a70d1c2b0cbd3e484d2f842088a3863","modified":1581084128000},{"_id":"themes/nexmoe/layout/_partial/_comment/gitment.ejs","hash":"c04e14664b69c4a7f12fc88b547994ddd9a74e1d","modified":1581084128000},{"_id":"themes/nexmoe/layout/_partial/_comment/livere.ejs","hash":"af2ef5889f3f8a3326bcee017319586a0179e439","modified":1581084128000},{"_id":"themes/nexmoe/layout/_partial/_comment/valine.ejs","hash":"6a0c66594459db76d6abc99b88f1e23dbcc13cb6","modified":1581084128000},{"_id":"themes/nexmoe/WIKI/package-lock.json","hash":"41397626d1542f175db3643dc5c36f7e4e305080","modified":1581084128000},{"_id":"themes/nexmoe/WIKI/en/component/basic/color.md","hash":"c5ee0fcf7f184afa2ca9363fb8ff26f55768fec0","modified":1581084128000},{"_id":"themes/nexmoe/WIKI/en/component/basic/icon.md","hash":"c860a7902e1dbe042191483f6a3312e88aa2baee","modified":1581084128000},{"_id":"themes/nexmoe/WIKI/en/Hexo/comment.md","hash":"7f52cda67d77e3de25b7e69786e43687402774df","modified":1581084128000},{"_id":"themes/nexmoe/WIKI/en/Hexo/notice.md","hash":"042702cf30e9cad288100d2456044f247519ddc4","modified":1581084128000},{"_id":"themes/nexmoe/WIKI/yarn.lock","hash":"98dce0f4274658dcd312c03dbcf31c19537db046","modified":1581084128000},{"_id":"source/_posts/[MXCHIP-1]开发板到手/4.jpg","hash":"1ad544f24f3edeabcd478fe1810bba0c00a59c99","modified":1583322758019},{"_id":"source/_posts/[MXCHIP-1]开发板到手/5.jpg","hash":"5e693b10c11480483492e631ff577641da9345a2","modified":1583325357405},{"_id":"source/_posts/[MXCHIP-1]开发板到手/title.jpg","hash":"98f295a21942c79f60c03603bcf3b2d249780499","modified":1583319801856},{"_id":"source/_posts/[MXCHIP-1]开发板到手/1.jpg","hash":"7956aa8ecc214e7fd334214ba14e0f17a4af354f","modified":1583319834462},{"_id":"themes/nexmoe/WIKI/cover.png","hash":"933112bf55ba0dfff98fd8f3e670f12fe83d3c9f","modified":1581084128000},{"_id":"source/_posts/[MXCHIP-2]真机调试/真机调试.md","hash":"2ff1905a2874fac6a31bee6295b177d2e3ba618e","modified":1588694663111},{"_id":"source/_posts/[MXCHIP-2]真机调试/DS0021CN_EMW3031_V1.4.pdf","hash":"9a9494f397a72c3f683556281e91be56e74b19d2","modified":1580563100715},{"_id":"source/_posts/[MXCHIP-2]真机调试.md","hash":"c71081842305d447cd8de68c045180331957f226","modified":1589816533492},{"_id":"source/_posts/[MXCHIP-2]真机调试/UART接口定义.jpg","hash":"9d42c6f23baacd79490e0228e77774e26fc2159e","modified":1589809811445},{"_id":"source/_posts/[MXCHIP-2]真机调试/SWD接口定义.jpg","hash":"21911f80d7e93f6ce8fabdea7a9c9150272ae167","modified":1589809867857},{"_id":"source/_posts/[MXCHIP-2]真机调试/SWD接口定义.png","hash":"3a5cfbbd0013a93c7a24e32ea7d2d53fefe8214e","modified":1588486301119},{"_id":"source/_posts/[MXCHIP-2]真机调试/title.jpg","hash":"83ee04eb43bad55758609dc90f1ed3c199aed35f","modified":1589817021305},{"_id":"source/_posts/Death_Standing.md","hash":"937627a669877f8f709832983ec8c92b53ead192","modified":1589822745182},{"_id":"source/_posts/Death_Standing/IMG_20200319_004053.jpg","hash":"fca29bda4a92bbbcc8494724b10200df836fc842","modified":1589820059432},{"_id":"source/_posts/Death_Standing/psc.jpg","hash":"cf6cfde12fcf1bb5d454266b2c1ccd68ebf040b8","modified":1589821064946},{"_id":"source/_posts/Death_Standing/v2-e0a965a2365bdadda41dedcb9fe5ec58_r.jpg","hash":"a57015d7e3909a9eae1a92e87ceb52a19cf051ea","modified":1589818756140},{"_id":"source/CNAME","hash":"c2792d6adbd155f57f761d8bf88b88ed4cca5497","modified":1589824845652},{"_id":"themes/nexmoe/source/images/favicon.ico","hash":"57716efbf81cb86f1b1066cb6143ce64da694a37","modified":1589825232927},{"_id":"source/_posts/[MXCHIP-1]开发板到手/4_s.jpg","hash":"19a2c2ba97b36546ab58b3d7a6548ccadfa98044","modified":1589824030402},{"_id":"source/_posts/[MXCHIP-1]开发板到手/title_s.jpg","hash":"72be643223f38ae968bb8acdb50a2a9bda802447","modified":1589823881676},{"_id":"source/_posts/[MXCHIP-1]开发板到手/1_s.jpg","hash":"602f4eeb817eeee7b831cc77de9afded105547f9","modified":1589824011292},{"_id":"source/_posts/[MXCHIP-1]开发板到手/5_s.jpg","hash":"435b928be9dd4b97153e17864470c2f1ba83ee5c","modified":1589823989968}],"Category":[{"name":"<del>我永远爱学习</del>","_id":"ckacfrpcw0006s04tbia8356f"},{"name":"<del>搞点骚操作</del>","_id":"ckacfrpcy000as04tetsc52s2"},{"name":"我永远爱学习","_id":"ckacnprnv0004vo4t5347aw83"},{"name":"搞点骚操作","_id":"ckacnprp20006vo4t9dwm303f"},{"name":"想到啥写啥","_id":"ckacptyqa0002u44tahdd5ct3"}],"Data":[],"Page":[{"title":"关于","date":"2020-01-21T08:46:25.000Z","type":"about","layout":"about","comments":0,"_content":"\n关于","source":"about.md","raw":"---\ntitle: 关于\ndate: 2020/01/21 16:46:25\ntype: \"about\"\nlayout: about\npermalink: about.html\ncomments: false\n---\n\n关于","updated":"2020-03-16T18:31:29.913Z","path":"about.html","_id":"ckacfrpbk0000s04tg71yejk1","content":"<p>关于</p>\n","site":{"data":{}},"excerpt":"","more":"<p>关于</p>\n"},{"title":"友情链接","date":"2020-01-21T08:46:25.000Z","type":"py","layout":"py","comments":0,"_content":"\n- [![baidu](https://www.baidu.com/img/baidu_resultlogo@2.png)](https://www.baidu.com/ \"有问题找百度\")","source":"py.md","raw":"---\ntitle: 友情链接\ndate: 2020/01/21 16:46:25\ntype: \"py\"\nlayout: py\npermalink: PY.html\ncomments: false\n---\n\n- [![baidu](https://www.baidu.com/img/baidu_resultlogo@2.png)](https://www.baidu.com/ \"有问题找百度\")","updated":"2020-03-16T18:31:30.047Z","path":"PY.html","_id":"ckacfrpbo0001s04t0ftvb3f7","content":"<ul>\n<li><a href=\"https://www.baidu.com/\" target=\"_blank\" rel=\"noopener\" title=\"有问题找百度\"><img src=\"https://www.baidu.com/img/baidu_resultlogo@2.png\" alt=\"baidu\"></a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"https://www.baidu.com/\" target=\"_blank\" rel=\"noopener\" title=\"有问题找百度\"><img src=\"https://www.baidu.com/img/baidu_resultlogo@2.png\" alt=\"baidu\"></a></li>\n</ul>\n"}],"Post":[{"title":"[MXCHIP-1]开发板到手","date":"2019-03-10T02:16:56.000Z","cover":"/2019/03/10/%5BMXCHIP-1%5D开发板到手/title_s.jpg","coverWidth":1210,"coverHeight":905,"_content":"\n这是一个从没玩过单片机开发的菜鸡闲暇时间瞎折腾的故事\n\n起因是18年斐讯出事的时候炒了一波底，买回来一堆斐讯的设备，以tc1插线盒居多，但是随着斐讯线上服务的关闭，这些原本的智能插线盒变得不智能了，正好网上有网友开发了一波TC1的固件，正好自己也挺感兴趣，便开始折腾起了这些玩意儿。\n\n<!--more-->\n\n\n #### 作案工具\n\n{% asset_img 1_s.jpg [作案工具] %}\n\n - 庆科EMW3031开发板\n - 庆科EMW3165开发板\n - 庆科MICOKIT-EXT上层扩展板\n - USB转TTL工具\n - JLINK仿真器\n\n PS：3165和扩展板是在闲鱼直接50包邮收的，感觉赚得飞起。usb-ttl一开始不知道需要这个，反复看文档才发现差这玩意儿，5块的东西发了20的顺丰才送到。\n\n #### 开发生态\n\n 以前从来没玩过如此高大上的玩意儿，这次就算拿到手也是一脸蒙蔽，不知从何下手，入手自闲鱼也没有任何资料，只好先翻一翻庆科的官网看看。\n \n ###### 收集的部分有用的链接\n\n - [庆科官网](https://www.mxchip.com/)\n - [开发者中心](http://developer.mxchip.com/) \n - [官方论坛](http://mico.io/)\n - [开发者支持社区](http://bbs.mxchip.com/)\n\n #### 启动到bootloader\n\n ##### 物理接线\n\n{% asset_img 4_s.jpg [物理接线] %}\n\n```\n第一条接线 [用户串口] 对应驱动是USB-TTL的驱动 USB-SERIAL CH340\n  PC USB接口 =======> USB-TTL =======> 开发板UART接口\n                        |—— GND            |——  GND         \n                        |—— RXD            |——  TXD    \n                        |—— TXD            |——  RXD    \n                        |—— 5V0            |——  5V0    \n\n第二条接线 [调试串口] 对应驱动是开发板的驱动 USB Serial Port\n  PC USB接口 =======> 开发板microUsb接口 \n ```\n\nPS：这里也被卡了不少时间，原因就是不知道RXD和TXD需要反着接。官网文档里没有任何说明，我在USB-TTL的淘宝页面里找到的资料才提到这一点\n\n ##### 驱动管理\n\n首先，我完全是个门外汉，我猜测这两驱动的作用可能是一样的，以前的外围设备都是通过COM口和PC相连接的，现在的电脑都没有COM口，于是需要一个将COM口转为USB口的设备。\nUSB-TTL应该就是其中之一，所以才需要安装一个驱动来将USB口映射为虚拟的COM口供软件连接。至于开发板为何可以用microUsb直连电脑我猜测是开发板中内置了芯片来转换，因为我看了新平台`MXKIT`的说明文档，新平台中只需要一根线就可以同时接上两个接口，所以我做出了这个猜测。\n\n{% asset_img 3.jpg [驱动管理] %}\n\n\n ##### 软件连接\n\n[官网教程](http://developer.mxchip.com/handbooks/109)\n\n\n1. 先将开发版上的`MODULE SELECT`拨动到BootLoader启动模式，即BOOT=ON,STATUS=OFF。\n\n{% asset_img 5_s.jpg [软件连接] %}\n\n2. 在其[官网新文档的角落](https://mxchip.yuque.com/books/share/8ac5e519-671d-4444-a93d-20e0aadfc793/ombbz2)翻到了这个表格，根据表格内容在SecureCRT中建立连接\n\n| 型号  | Bootloader</br>MFG产测信息 | AT指令及透传      | 正常工作log</br>CLI调试命令 |\n| ------- | ---------------------- | ---------------------- | ----------------------- |\n| EMW3031 | Pin 9,Pin10,921600bps   | Pin 9,Pin10,115200bps | Pin21,Pin22,115200bps    |\n| EMW3060 | Pin 9,Pin10,921600bps   | Pin 9,Pin10,115200bps | Pin21,Pin22,115200bps    |\n| EMW3080 | Pin 9,Pin10,921600bps   | Pin 9,Pin10,115200bps | Pin21,Pin22,115200bps    |\n| EMW3162 | Pin22,Pin23,921600bps  | Pin22,Pin23,115200bps  | Pin14,Pin4,115200bps     |\n| EMW3165 | Pin29,Pin30,921600bps  | Pin29,Pin30,115200bps  | Pin8,Pin12,115200bps     |\n| EMW3166 | Pin29,Pin30,921600bps  | Pin29,Pin30,115200bps  | Pin8,Pin12,115200bps     |\n| EMW3239 | Pin29,Pin30,921600bps  | Pin29,Pin30,115200bps  | Pin8,Pin12,115200bps     |\n\n3. 建立好连接后点一下开发板上的restart重启一下就能能看到日志了,如下图左边是用户日志，来自于microUsb(COM4)，右边是调试日志，来自于usb-ttl(COM9)，平时的debug时的日志也都输出到这里。\n\n {% asset_img 6.jpg [Bootloader日志] %}\n \n \n \n 未完待续...........","source":"_posts/[MXCHIP-1]开发板到手.md","raw":"---\ntitle: \"[MXCHIP-1]开发板到手\"\ndate: 2019/3/10 10:16:56\ncategories: \n    - [我永远爱学习]\ntags: \n    - 单片机\n    - IOT\n    - C\ncover: /2019/03/10/%5BMXCHIP-1%5D开发板到手/title_s.jpg\ncoverWidth: 1210\ncoverHeight: 905\n---\n\n这是一个从没玩过单片机开发的菜鸡闲暇时间瞎折腾的故事\n\n起因是18年斐讯出事的时候炒了一波底，买回来一堆斐讯的设备，以tc1插线盒居多，但是随着斐讯线上服务的关闭，这些原本的智能插线盒变得不智能了，正好网上有网友开发了一波TC1的固件，正好自己也挺感兴趣，便开始折腾起了这些玩意儿。\n\n<!--more-->\n\n\n #### 作案工具\n\n{% asset_img 1_s.jpg [作案工具] %}\n\n - 庆科EMW3031开发板\n - 庆科EMW3165开发板\n - 庆科MICOKIT-EXT上层扩展板\n - USB转TTL工具\n - JLINK仿真器\n\n PS：3165和扩展板是在闲鱼直接50包邮收的，感觉赚得飞起。usb-ttl一开始不知道需要这个，反复看文档才发现差这玩意儿，5块的东西发了20的顺丰才送到。\n\n #### 开发生态\n\n 以前从来没玩过如此高大上的玩意儿，这次就算拿到手也是一脸蒙蔽，不知从何下手，入手自闲鱼也没有任何资料，只好先翻一翻庆科的官网看看。\n \n ###### 收集的部分有用的链接\n\n - [庆科官网](https://www.mxchip.com/)\n - [开发者中心](http://developer.mxchip.com/) \n - [官方论坛](http://mico.io/)\n - [开发者支持社区](http://bbs.mxchip.com/)\n\n #### 启动到bootloader\n\n ##### 物理接线\n\n{% asset_img 4_s.jpg [物理接线] %}\n\n```\n第一条接线 [用户串口] 对应驱动是USB-TTL的驱动 USB-SERIAL CH340\n  PC USB接口 =======> USB-TTL =======> 开发板UART接口\n                        |—— GND            |——  GND         \n                        |—— RXD            |——  TXD    \n                        |—— TXD            |——  RXD    \n                        |—— 5V0            |——  5V0    \n\n第二条接线 [调试串口] 对应驱动是开发板的驱动 USB Serial Port\n  PC USB接口 =======> 开发板microUsb接口 \n ```\n\nPS：这里也被卡了不少时间，原因就是不知道RXD和TXD需要反着接。官网文档里没有任何说明，我在USB-TTL的淘宝页面里找到的资料才提到这一点\n\n ##### 驱动管理\n\n首先，我完全是个门外汉，我猜测这两驱动的作用可能是一样的，以前的外围设备都是通过COM口和PC相连接的，现在的电脑都没有COM口，于是需要一个将COM口转为USB口的设备。\nUSB-TTL应该就是其中之一，所以才需要安装一个驱动来将USB口映射为虚拟的COM口供软件连接。至于开发板为何可以用microUsb直连电脑我猜测是开发板中内置了芯片来转换，因为我看了新平台`MXKIT`的说明文档，新平台中只需要一根线就可以同时接上两个接口，所以我做出了这个猜测。\n\n{% asset_img 3.jpg [驱动管理] %}\n\n\n ##### 软件连接\n\n[官网教程](http://developer.mxchip.com/handbooks/109)\n\n\n1. 先将开发版上的`MODULE SELECT`拨动到BootLoader启动模式，即BOOT=ON,STATUS=OFF。\n\n{% asset_img 5_s.jpg [软件连接] %}\n\n2. 在其[官网新文档的角落](https://mxchip.yuque.com/books/share/8ac5e519-671d-4444-a93d-20e0aadfc793/ombbz2)翻到了这个表格，根据表格内容在SecureCRT中建立连接\n\n| 型号  | Bootloader</br>MFG产测信息 | AT指令及透传      | 正常工作log</br>CLI调试命令 |\n| ------- | ---------------------- | ---------------------- | ----------------------- |\n| EMW3031 | Pin 9,Pin10,921600bps   | Pin 9,Pin10,115200bps | Pin21,Pin22,115200bps    |\n| EMW3060 | Pin 9,Pin10,921600bps   | Pin 9,Pin10,115200bps | Pin21,Pin22,115200bps    |\n| EMW3080 | Pin 9,Pin10,921600bps   | Pin 9,Pin10,115200bps | Pin21,Pin22,115200bps    |\n| EMW3162 | Pin22,Pin23,921600bps  | Pin22,Pin23,115200bps  | Pin14,Pin4,115200bps     |\n| EMW3165 | Pin29,Pin30,921600bps  | Pin29,Pin30,115200bps  | Pin8,Pin12,115200bps     |\n| EMW3166 | Pin29,Pin30,921600bps  | Pin29,Pin30,115200bps  | Pin8,Pin12,115200bps     |\n| EMW3239 | Pin29,Pin30,921600bps  | Pin29,Pin30,115200bps  | Pin8,Pin12,115200bps     |\n\n3. 建立好连接后点一下开发板上的restart重启一下就能能看到日志了,如下图左边是用户日志，来自于microUsb(COM4)，右边是调试日志，来自于usb-ttl(COM9)，平时的debug时的日志也都输出到这里。\n\n {% asset_img 6.jpg [Bootloader日志] %}\n \n \n \n 未完待续...........","slug":"[MXCHIP-1]开发板到手","published":1,"updated":"2020-05-18T17:48:06.725Z","_id":"ckacfrpco0002s04t166326j0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>这是一个从没玩过单片机开发的菜鸡闲暇时间瞎折腾的故事</p>\n<p>起因是18年斐讯出事的时候炒了一波底，买回来一堆斐讯的设备，以tc1插线盒居多，但是随着斐讯线上服务的关闭，这些原本的智能插线盒变得不智能了，正好网上有网友开发了一波TC1的固件，正好自己也挺感兴趣，便开始折腾起了这些玩意儿。</p>\n<a id=\"more\"></a>\n\n\n<h4 id=\"作案工具\"><a href=\"#作案工具\" class=\"headerlink\" title=\"作案工具\"></a>作案工具</h4><img src=\"/2019/03/10/%5BMXCHIP-1%5D%E5%BC%80%E5%8F%91%E6%9D%BF%E5%88%B0%E6%89%8B/1_s.jpg\" class=\"\" title=\"[作案工具]\">\n\n<ul>\n<li><p>庆科EMW3031开发板</p>\n</li>\n<li><p>庆科EMW3165开发板</p>\n</li>\n<li><p>庆科MICOKIT-EXT上层扩展板</p>\n</li>\n<li><p>USB转TTL工具</p>\n</li>\n<li><p>JLINK仿真器</p>\n<p>PS：3165和扩展板是在闲鱼直接50包邮收的，感觉赚得飞起。usb-ttl一开始不知道需要这个，反复看文档才发现差这玩意儿，5块的东西发了20的顺丰才送到。</p>\n<h4 id=\"开发生态\"><a href=\"#开发生态\" class=\"headerlink\" title=\"开发生态\"></a>开发生态</h4><p>以前从来没玩过如此高大上的玩意儿，这次就算拿到手也是一脸蒙蔽，不知从何下手，入手自闲鱼也没有任何资料，只好先翻一翻庆科的官网看看。</p>\n<h6 id=\"收集的部分有用的链接\"><a href=\"#收集的部分有用的链接\" class=\"headerlink\" title=\"收集的部分有用的链接\"></a>收集的部分有用的链接</h6></li>\n<li><p><a href=\"https://www.mxchip.com/\" target=\"_blank\" rel=\"noopener\">庆科官网</a></p>\n</li>\n<li><p><a href=\"http://developer.mxchip.com/\" target=\"_blank\" rel=\"noopener\">开发者中心</a> </p>\n</li>\n<li><p><a href=\"http://mico.io/\" target=\"_blank\" rel=\"noopener\">官方论坛</a></p>\n</li>\n<li><p><a href=\"http://bbs.mxchip.com/\" target=\"_blank\" rel=\"noopener\">开发者支持社区</a></p>\n<h4 id=\"启动到bootloader\"><a href=\"#启动到bootloader\" class=\"headerlink\" title=\"启动到bootloader\"></a>启动到bootloader</h4><h5 id=\"物理接线\"><a href=\"#物理接线\" class=\"headerlink\" title=\"物理接线\"></a>物理接线</h5></li>\n</ul>\n<img src=\"/2019/03/10/%5BMXCHIP-1%5D%E5%BC%80%E5%8F%91%E6%9D%BF%E5%88%B0%E6%89%8B/4_s.jpg\" class=\"\" title=\"[物理接线]\">\n\n<pre><code>第一条接线 [用户串口] 对应驱动是USB-TTL的驱动 USB-SERIAL CH340\n  PC USB接口 =======&gt; USB-TTL =======&gt; 开发板UART接口\n                        |—— GND            |——  GND         \n                        |—— RXD            |——  TXD    \n                        |—— TXD            |——  RXD    \n                        |—— 5V0            |——  5V0    \n\n第二条接线 [调试串口] 对应驱动是开发板的驱动 USB Serial Port\n  PC USB接口 =======&gt; 开发板microUsb接口 </code></pre><p>PS：这里也被卡了不少时间，原因就是不知道RXD和TXD需要反着接。官网文档里没有任何说明，我在USB-TTL的淘宝页面里找到的资料才提到这一点</p>\n<h5 id=\"驱动管理\"><a href=\"#驱动管理\" class=\"headerlink\" title=\"驱动管理\"></a>驱动管理</h5><p>首先，我完全是个门外汉，我猜测这两驱动的作用可能是一样的，以前的外围设备都是通过COM口和PC相连接的，现在的电脑都没有COM口，于是需要一个将COM口转为USB口的设备。<br>USB-TTL应该就是其中之一，所以才需要安装一个驱动来将USB口映射为虚拟的COM口供软件连接。至于开发板为何可以用microUsb直连电脑我猜测是开发板中内置了芯片来转换，因为我看了新平台<code>MXKIT</code>的说明文档，新平台中只需要一根线就可以同时接上两个接口，所以我做出了这个猜测。</p>\n<img src=\"/2019/03/10/%5BMXCHIP-1%5D%E5%BC%80%E5%8F%91%E6%9D%BF%E5%88%B0%E6%89%8B/3.jpg\" class=\"\" title=\"[驱动管理]\">\n\n\n<h5 id=\"软件连接\"><a href=\"#软件连接\" class=\"headerlink\" title=\"软件连接\"></a>软件连接</h5><p><a href=\"http://developer.mxchip.com/handbooks/109\" target=\"_blank\" rel=\"noopener\">官网教程</a></p>\n<ol>\n<li>先将开发版上的<code>MODULE SELECT</code>拨动到BootLoader启动模式，即BOOT=ON,STATUS=OFF。</li>\n</ol>\n<img src=\"/2019/03/10/%5BMXCHIP-1%5D%E5%BC%80%E5%8F%91%E6%9D%BF%E5%88%B0%E6%89%8B/5_s.jpg\" class=\"\" title=\"[软件连接]\">\n\n<ol start=\"2\">\n<li>在其<a href=\"https://mxchip.yuque.com/books/share/8ac5e519-671d-4444-a93d-20e0aadfc793/ombbz2\" target=\"_blank\" rel=\"noopener\">官网新文档的角落</a>翻到了这个表格，根据表格内容在SecureCRT中建立连接</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>型号</th>\n<th>Bootloader</br>MFG产测信息</th>\n<th>AT指令及透传</th>\n<th>正常工作log</br>CLI调试命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>EMW3031</td>\n<td>Pin 9,Pin10,921600bps</td>\n<td>Pin 9,Pin10,115200bps</td>\n<td>Pin21,Pin22,115200bps</td>\n</tr>\n<tr>\n<td>EMW3060</td>\n<td>Pin 9,Pin10,921600bps</td>\n<td>Pin 9,Pin10,115200bps</td>\n<td>Pin21,Pin22,115200bps</td>\n</tr>\n<tr>\n<td>EMW3080</td>\n<td>Pin 9,Pin10,921600bps</td>\n<td>Pin 9,Pin10,115200bps</td>\n<td>Pin21,Pin22,115200bps</td>\n</tr>\n<tr>\n<td>EMW3162</td>\n<td>Pin22,Pin23,921600bps</td>\n<td>Pin22,Pin23,115200bps</td>\n<td>Pin14,Pin4,115200bps</td>\n</tr>\n<tr>\n<td>EMW3165</td>\n<td>Pin29,Pin30,921600bps</td>\n<td>Pin29,Pin30,115200bps</td>\n<td>Pin8,Pin12,115200bps</td>\n</tr>\n<tr>\n<td>EMW3166</td>\n<td>Pin29,Pin30,921600bps</td>\n<td>Pin29,Pin30,115200bps</td>\n<td>Pin8,Pin12,115200bps</td>\n</tr>\n<tr>\n<td>EMW3239</td>\n<td>Pin29,Pin30,921600bps</td>\n<td>Pin29,Pin30,115200bps</td>\n<td>Pin8,Pin12,115200bps</td>\n</tr>\n</tbody></table>\n<ol start=\"3\">\n<li><p>建立好连接后点一下开发板上的restart重启一下就能能看到日志了,如下图左边是用户日志，来自于microUsb(COM4)，右边是调试日志，来自于usb-ttl(COM9)，平时的debug时的日志也都输出到这里。</p>\n<img src=\"/2019/03/10/%5BMXCHIP-1%5D%E5%BC%80%E5%8F%91%E6%9D%BF%E5%88%B0%E6%89%8B/6.jpg\" class=\"\" title=\"[Bootloader日志]\">\n\n\n\n</li>\n</ol>\n<p> 未完待续………..</p>\n","site":{"data":{}},"excerpt":"<p>这是一个从没玩过单片机开发的菜鸡闲暇时间瞎折腾的故事</p>\n<p>起因是18年斐讯出事的时候炒了一波底，买回来一堆斐讯的设备，以tc1插线盒居多，但是随着斐讯线上服务的关闭，这些原本的智能插线盒变得不智能了，正好网上有网友开发了一波TC1的固件，正好自己也挺感兴趣，便开始折腾起了这些玩意儿。</p>","more":"<h4 id=\"作案工具\"><a href=\"#作案工具\" class=\"headerlink\" title=\"作案工具\"></a>作案工具</h4><img src=\"/2019/03/10/%5BMXCHIP-1%5D%E5%BC%80%E5%8F%91%E6%9D%BF%E5%88%B0%E6%89%8B/1_s.jpg\" class=\"\" title=\"[作案工具]\">\n\n<ul>\n<li><p>庆科EMW3031开发板</p>\n</li>\n<li><p>庆科EMW3165开发板</p>\n</li>\n<li><p>庆科MICOKIT-EXT上层扩展板</p>\n</li>\n<li><p>USB转TTL工具</p>\n</li>\n<li><p>JLINK仿真器</p>\n<p>PS：3165和扩展板是在闲鱼直接50包邮收的，感觉赚得飞起。usb-ttl一开始不知道需要这个，反复看文档才发现差这玩意儿，5块的东西发了20的顺丰才送到。</p>\n<h4 id=\"开发生态\"><a href=\"#开发生态\" class=\"headerlink\" title=\"开发生态\"></a>开发生态</h4><p>以前从来没玩过如此高大上的玩意儿，这次就算拿到手也是一脸蒙蔽，不知从何下手，入手自闲鱼也没有任何资料，只好先翻一翻庆科的官网看看。</p>\n<h6 id=\"收集的部分有用的链接\"><a href=\"#收集的部分有用的链接\" class=\"headerlink\" title=\"收集的部分有用的链接\"></a>收集的部分有用的链接</h6></li>\n<li><p><a href=\"https://www.mxchip.com/\" target=\"_blank\" rel=\"noopener\">庆科官网</a></p>\n</li>\n<li><p><a href=\"http://developer.mxchip.com/\" target=\"_blank\" rel=\"noopener\">开发者中心</a> </p>\n</li>\n<li><p><a href=\"http://mico.io/\" target=\"_blank\" rel=\"noopener\">官方论坛</a></p>\n</li>\n<li><p><a href=\"http://bbs.mxchip.com/\" target=\"_blank\" rel=\"noopener\">开发者支持社区</a></p>\n<h4 id=\"启动到bootloader\"><a href=\"#启动到bootloader\" class=\"headerlink\" title=\"启动到bootloader\"></a>启动到bootloader</h4><h5 id=\"物理接线\"><a href=\"#物理接线\" class=\"headerlink\" title=\"物理接线\"></a>物理接线</h5></li>\n</ul>\n<img src=\"/2019/03/10/%5BMXCHIP-1%5D%E5%BC%80%E5%8F%91%E6%9D%BF%E5%88%B0%E6%89%8B/4_s.jpg\" class=\"\" title=\"[物理接线]\">\n\n<pre><code>第一条接线 [用户串口] 对应驱动是USB-TTL的驱动 USB-SERIAL CH340\n  PC USB接口 =======&gt; USB-TTL =======&gt; 开发板UART接口\n                        |—— GND            |——  GND         \n                        |—— RXD            |——  TXD    \n                        |—— TXD            |——  RXD    \n                        |—— 5V0            |——  5V0    \n\n第二条接线 [调试串口] 对应驱动是开发板的驱动 USB Serial Port\n  PC USB接口 =======&gt; 开发板microUsb接口 </code></pre><p>PS：这里也被卡了不少时间，原因就是不知道RXD和TXD需要反着接。官网文档里没有任何说明，我在USB-TTL的淘宝页面里找到的资料才提到这一点</p>\n<h5 id=\"驱动管理\"><a href=\"#驱动管理\" class=\"headerlink\" title=\"驱动管理\"></a>驱动管理</h5><p>首先，我完全是个门外汉，我猜测这两驱动的作用可能是一样的，以前的外围设备都是通过COM口和PC相连接的，现在的电脑都没有COM口，于是需要一个将COM口转为USB口的设备。<br>USB-TTL应该就是其中之一，所以才需要安装一个驱动来将USB口映射为虚拟的COM口供软件连接。至于开发板为何可以用microUsb直连电脑我猜测是开发板中内置了芯片来转换，因为我看了新平台<code>MXKIT</code>的说明文档，新平台中只需要一根线就可以同时接上两个接口，所以我做出了这个猜测。</p>\n<img src=\"/2019/03/10/%5BMXCHIP-1%5D%E5%BC%80%E5%8F%91%E6%9D%BF%E5%88%B0%E6%89%8B/3.jpg\" class=\"\" title=\"[驱动管理]\">\n\n\n<h5 id=\"软件连接\"><a href=\"#软件连接\" class=\"headerlink\" title=\"软件连接\"></a>软件连接</h5><p><a href=\"http://developer.mxchip.com/handbooks/109\" target=\"_blank\" rel=\"noopener\">官网教程</a></p>\n<ol>\n<li>先将开发版上的<code>MODULE SELECT</code>拨动到BootLoader启动模式，即BOOT=ON,STATUS=OFF。</li>\n</ol>\n<img src=\"/2019/03/10/%5BMXCHIP-1%5D%E5%BC%80%E5%8F%91%E6%9D%BF%E5%88%B0%E6%89%8B/5_s.jpg\" class=\"\" title=\"[软件连接]\">\n\n<ol start=\"2\">\n<li>在其<a href=\"https://mxchip.yuque.com/books/share/8ac5e519-671d-4444-a93d-20e0aadfc793/ombbz2\" target=\"_blank\" rel=\"noopener\">官网新文档的角落</a>翻到了这个表格，根据表格内容在SecureCRT中建立连接</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>型号</th>\n<th>Bootloader</br>MFG产测信息</th>\n<th>AT指令及透传</th>\n<th>正常工作log</br>CLI调试命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>EMW3031</td>\n<td>Pin 9,Pin10,921600bps</td>\n<td>Pin 9,Pin10,115200bps</td>\n<td>Pin21,Pin22,115200bps</td>\n</tr>\n<tr>\n<td>EMW3060</td>\n<td>Pin 9,Pin10,921600bps</td>\n<td>Pin 9,Pin10,115200bps</td>\n<td>Pin21,Pin22,115200bps</td>\n</tr>\n<tr>\n<td>EMW3080</td>\n<td>Pin 9,Pin10,921600bps</td>\n<td>Pin 9,Pin10,115200bps</td>\n<td>Pin21,Pin22,115200bps</td>\n</tr>\n<tr>\n<td>EMW3162</td>\n<td>Pin22,Pin23,921600bps</td>\n<td>Pin22,Pin23,115200bps</td>\n<td>Pin14,Pin4,115200bps</td>\n</tr>\n<tr>\n<td>EMW3165</td>\n<td>Pin29,Pin30,921600bps</td>\n<td>Pin29,Pin30,115200bps</td>\n<td>Pin8,Pin12,115200bps</td>\n</tr>\n<tr>\n<td>EMW3166</td>\n<td>Pin29,Pin30,921600bps</td>\n<td>Pin29,Pin30,115200bps</td>\n<td>Pin8,Pin12,115200bps</td>\n</tr>\n<tr>\n<td>EMW3239</td>\n<td>Pin29,Pin30,921600bps</td>\n<td>Pin29,Pin30,115200bps</td>\n<td>Pin8,Pin12,115200bps</td>\n</tr>\n</tbody></table>\n<ol start=\"3\">\n<li><p>建立好连接后点一下开发板上的restart重启一下就能能看到日志了,如下图左边是用户日志，来自于microUsb(COM4)，右边是调试日志，来自于usb-ttl(COM9)，平时的debug时的日志也都输出到这里。</p>\n<img src=\"/2019/03/10/%5BMXCHIP-1%5D%E5%BC%80%E5%8F%91%E6%9D%BF%E5%88%B0%E6%89%8B/6.jpg\" class=\"\" title=\"[Bootloader日志]\">\n\n\n\n</li>\n</ol>\n<p> 未完待续………..</p>"},{"title":"好用常用人人都要会的最基本的Maven插件收集","date":"2019-03-10T19:05:56.000Z","updated":"2020-02-20T07:41:36.000Z","comments":1,"cover":"/2019/03/11/好用常用人人都要会的最基本的Maven插件收集/title.jpg","coverWidth":776,"coverHeight":450,"_content":"\n把手上的好几个项目的pom整理了一遍 规范了一下model 整理出了一些插件 方便新手们入门maven\n<!--more-->\n\n# 好用常用人人都要会的最基本的Maven插件收集\n大部分的插件其实都可以从[MAVEN官方的可用插件列表]( https://maven.apache.org/plugins/index.html)中直接找到\n在这里取了比较常用并且实用的几个插件做一点说明\n大多数使用场景无非是：\n- 要自定义打包的名称\n- 要将打包后的jar包自动复制到某处\n- 要将外置lib目录和maven依赖一起打进去\n- 要根据环境复制对应的配置文件\n\n这里选出的插件足以应对大部分情况了 \n\n\n## Maven依赖管理插件[maven-dependency-plugin](https://maven.apache.org/plugins/maven-dependency-plugin)\n\n主要用于管理依赖，比如引入某个特殊的jar包，或者从某个jar包中提取文件\n`tree`命令和`display-ancestors`命令在搭建工程时是比较好用的，可以很方便的找出重复依赖项，保证依赖版本一致\n\n### 常用功能\n- list 列出的依赖关系\n- tree 以树型结构列出的依赖关系\n- copy-dependencies 拷贝某个依赖项\n- unpack-dependencies 解包某个依赖项\n- display-ancestors 显示所有父依赖\n\n\n\n## Maven构建小助手 [build-helper-maven-plugin](https://www.mojohaus.org/build-helper-maven-plugin/)\n\n主要用于为POM生成各种属性,比如打包时间、IP地址之类的，功能比较多就不上代码了。\n\n###  常用功能\n- add-source 将更多`source`目录添加到POM\n- add-test-source 将更多`test source`目录添加到POM\n- add-resource 将更多`resource directories`目录添加到POM\n- add-test-resource 将更多`test resource directories`目录添加到POM\n- attach-artifact Attach additional artifacts to be installed and deployed.  不知道???干啥的\n- maven-version 获取Maven核心版本\n- regex-property 使用正则生成某个属性\n- regex-properties使用正则生成属性\n- released-version Resolve the latest released version of this project.\n- parse-version Parse the version into different properties.\n- remove-project-artifact 用于在构建过程中删除某个作为依赖的项目以节省空间\n- reserve-network-port 保留一个未使用的端口号的随机列表\n- local-ip 获取当前主机IP\n- cpu-count 获取当前主机CPU核心数\n- timestamp-property 生成一个事件放入指定属性中 常用于在包名上附加打包时间\n- uptodate-property 检查某个属性根据检查结果设置其他属性\n- uptodate-properties 检查多个属性根据检查结果设置多个其他属性\n- rootlocation 重定义多模块构建的根目录\n\n## 复制并重命名插件 [Copy Rename Maven Plugin](https://coderplus.github.io/copy-rename-maven-plugin/)\n\n功能字如其名,就是用来复制和重命名的，可以用来复制打包好的jar包，也可以在打包过程中复制文件。\n  \n### 常用功能\n- copy 复制\n- rename 重命名\n- 没了\n\n### 一个小栗子\n```xml\n<plugin>\n    <groupid>com.coderplus.maven.plugins</groupid>\n    <artifactid>copy-rename-maven-plugin</artifactid>\n    <version>1.0</version>\n    <executions>\n        <execution>\n            <id>copy-file</id>\n            <phase>package</phase>\n            <goals>\n                <goal>copy</goal>\n            </goals>\n            <configuration>\n                <sourcefile>target/${project.build.finalName}.jar</sourcefile>\n                <destinationfile>/xingyi/${project.build.finalName}.jar</destinationfile>\n            </configuration>\n        </execution>\n    </executions>\n</plugin>\n```\n\n\n## Maven编译插件 [maven-compiler-plugin](https://maven.apache.org/plugins/maven-compiler-plugin/)\n\n主要用于设定编译环境和编译器的属性,是比较基础的插件\n\n```xml\n <plugin>\n    <groupid>org.apache.maven.plugins</groupid>\n    <artifactid>maven-compiler-plugin</artifactid>\n    <version>3.8.0</version>\n    <configuration>\n        <!-- 一般而言，target与source是保持一致的，但是，有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk，源代码中不能使用低版本jdk中不支持的语法 )，会存在target不同于source的情况 -->\n        <!-- 源代码使用的JDK版本 -->\n        <source>1.8</source>\n        <!-- 需要生成的目标class文件的编译版本 -->\n        <target>1.8</target> \n        <!-- 字符集编码 -->\n        <encoding>UTF-8</encoding>\n        <verbose>true</verbose>\n        <showwarnings>true</showwarnings>\n        <!-- 要使compilerVersion标签生效，还需要将fork设为true，用于明确表示编译版本配置的可用 -->\n        <fork>true</fork>\n        <!-- 指定插件将使用的编译器的版本 -->\n        <compilerversion>1.5</compilerversion>\n        <!-- 编译器使用的初始内存 -->\n        <meminitial>128m</meminitial>\n        <!-- 编译器使用的最大内存 -->\n        <maxmem>512m</maxmem>\n        <!--使用指定的javac命令，例如：<executable>${JAVA_1_4_HOME}/bin/javac</executable> -->\n        <executable><!-- path-to-javac --></executable>\n        <!-- 跳过测试 -->\n        <skiptests>true</skiptests>\n        <!-- 这个选项用来传递编译器自身不包含但是却支持的参数选项-->\n        <compilerargument>-verbose -bootclasspath ${java.home}\\lib\\rt.jar</compilerargument>\n    </configuration>\n</plugin>\n```\n\n###  SpringBootMaven插件[spring-boot-maven-plugin](https://www.mojohaus.org/build-helper-maven-plugin/)\n\n\n####  configuration.layout=ZIP 的用处\n\n###### 资料\n- [How to really package and deploy a Spring Boot application](\"http://weyprecht.de/2018/05/02/how-to-really-package-and-deploy-a-spring-boot-application/\")\n\n###### 作用\n将该工程的布局改为ZIP布局，所有的lib将外置到jar包外，在打包时将com.example:demo下的所有依赖放入外置的lib目录\n\n```xml\n    <build>\n      <plugins>\n        <plugin>\n          <groupid>org.springframework.boot</groupid>\n          <artifactid>spring-boot-maven-plugin</artifactid>\n          <configuration>\n            <layout>ZIP</layout>\n          </configuration>\n          <includes>\n            <include>\n           \t\t<groupid>com.example</groupid>\n            \t<artifactid>demo</artifactid>\n            </include>\n          </includes>\n        </plugin>\n      </plugins>\n    </build>\n```\n","source":"_posts/好用常用人人都要会的最基本的Maven插件收集.md","raw":"---\ntitle: '好用常用人人都要会的最基本的Maven插件收集'\ndate: 2019-03-11 03:05:56\nupdated: 2020/2/20 15:41:36\ncomments: true\ncover: /2019/03/11/好用常用人人都要会的最基本的Maven插件收集/title.jpg\ncoverWidth: 776\ncoverHeight: 450\ncategories: \n    - [我永远爱学习]\ntags: \n    - java\n    - maven\n---\n\n把手上的好几个项目的pom整理了一遍 规范了一下model 整理出了一些插件 方便新手们入门maven\n<!--more-->\n\n# 好用常用人人都要会的最基本的Maven插件收集\n大部分的插件其实都可以从[MAVEN官方的可用插件列表]( https://maven.apache.org/plugins/index.html)中直接找到\n在这里取了比较常用并且实用的几个插件做一点说明\n大多数使用场景无非是：\n- 要自定义打包的名称\n- 要将打包后的jar包自动复制到某处\n- 要将外置lib目录和maven依赖一起打进去\n- 要根据环境复制对应的配置文件\n\n这里选出的插件足以应对大部分情况了 \n\n\n## Maven依赖管理插件[maven-dependency-plugin](https://maven.apache.org/plugins/maven-dependency-plugin)\n\n主要用于管理依赖，比如引入某个特殊的jar包，或者从某个jar包中提取文件\n`tree`命令和`display-ancestors`命令在搭建工程时是比较好用的，可以很方便的找出重复依赖项，保证依赖版本一致\n\n### 常用功能\n- list 列出的依赖关系\n- tree 以树型结构列出的依赖关系\n- copy-dependencies 拷贝某个依赖项\n- unpack-dependencies 解包某个依赖项\n- display-ancestors 显示所有父依赖\n\n\n\n## Maven构建小助手 [build-helper-maven-plugin](https://www.mojohaus.org/build-helper-maven-plugin/)\n\n主要用于为POM生成各种属性,比如打包时间、IP地址之类的，功能比较多就不上代码了。\n\n###  常用功能\n- add-source 将更多`source`目录添加到POM\n- add-test-source 将更多`test source`目录添加到POM\n- add-resource 将更多`resource directories`目录添加到POM\n- add-test-resource 将更多`test resource directories`目录添加到POM\n- attach-artifact Attach additional artifacts to be installed and deployed.  不知道???干啥的\n- maven-version 获取Maven核心版本\n- regex-property 使用正则生成某个属性\n- regex-properties使用正则生成属性\n- released-version Resolve the latest released version of this project.\n- parse-version Parse the version into different properties.\n- remove-project-artifact 用于在构建过程中删除某个作为依赖的项目以节省空间\n- reserve-network-port 保留一个未使用的端口号的随机列表\n- local-ip 获取当前主机IP\n- cpu-count 获取当前主机CPU核心数\n- timestamp-property 生成一个事件放入指定属性中 常用于在包名上附加打包时间\n- uptodate-property 检查某个属性根据检查结果设置其他属性\n- uptodate-properties 检查多个属性根据检查结果设置多个其他属性\n- rootlocation 重定义多模块构建的根目录\n\n## 复制并重命名插件 [Copy Rename Maven Plugin](https://coderplus.github.io/copy-rename-maven-plugin/)\n\n功能字如其名,就是用来复制和重命名的，可以用来复制打包好的jar包，也可以在打包过程中复制文件。\n  \n### 常用功能\n- copy 复制\n- rename 重命名\n- 没了\n\n### 一个小栗子\n```xml\n<plugin>\n    <groupid>com.coderplus.maven.plugins</groupid>\n    <artifactid>copy-rename-maven-plugin</artifactid>\n    <version>1.0</version>\n    <executions>\n        <execution>\n            <id>copy-file</id>\n            <phase>package</phase>\n            <goals>\n                <goal>copy</goal>\n            </goals>\n            <configuration>\n                <sourcefile>target/${project.build.finalName}.jar</sourcefile>\n                <destinationfile>/xingyi/${project.build.finalName}.jar</destinationfile>\n            </configuration>\n        </execution>\n    </executions>\n</plugin>\n```\n\n\n## Maven编译插件 [maven-compiler-plugin](https://maven.apache.org/plugins/maven-compiler-plugin/)\n\n主要用于设定编译环境和编译器的属性,是比较基础的插件\n\n```xml\n <plugin>\n    <groupid>org.apache.maven.plugins</groupid>\n    <artifactid>maven-compiler-plugin</artifactid>\n    <version>3.8.0</version>\n    <configuration>\n        <!-- 一般而言，target与source是保持一致的，但是，有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk，源代码中不能使用低版本jdk中不支持的语法 )，会存在target不同于source的情况 -->\n        <!-- 源代码使用的JDK版本 -->\n        <source>1.8</source>\n        <!-- 需要生成的目标class文件的编译版本 -->\n        <target>1.8</target> \n        <!-- 字符集编码 -->\n        <encoding>UTF-8</encoding>\n        <verbose>true</verbose>\n        <showwarnings>true</showwarnings>\n        <!-- 要使compilerVersion标签生效，还需要将fork设为true，用于明确表示编译版本配置的可用 -->\n        <fork>true</fork>\n        <!-- 指定插件将使用的编译器的版本 -->\n        <compilerversion>1.5</compilerversion>\n        <!-- 编译器使用的初始内存 -->\n        <meminitial>128m</meminitial>\n        <!-- 编译器使用的最大内存 -->\n        <maxmem>512m</maxmem>\n        <!--使用指定的javac命令，例如：<executable>${JAVA_1_4_HOME}/bin/javac</executable> -->\n        <executable><!-- path-to-javac --></executable>\n        <!-- 跳过测试 -->\n        <skiptests>true</skiptests>\n        <!-- 这个选项用来传递编译器自身不包含但是却支持的参数选项-->\n        <compilerargument>-verbose -bootclasspath ${java.home}\\lib\\rt.jar</compilerargument>\n    </configuration>\n</plugin>\n```\n\n###  SpringBootMaven插件[spring-boot-maven-plugin](https://www.mojohaus.org/build-helper-maven-plugin/)\n\n\n####  configuration.layout=ZIP 的用处\n\n###### 资料\n- [How to really package and deploy a Spring Boot application](\"http://weyprecht.de/2018/05/02/how-to-really-package-and-deploy-a-spring-boot-application/\")\n\n###### 作用\n将该工程的布局改为ZIP布局，所有的lib将外置到jar包外，在打包时将com.example:demo下的所有依赖放入外置的lib目录\n\n```xml\n    <build>\n      <plugins>\n        <plugin>\n          <groupid>org.springframework.boot</groupid>\n          <artifactid>spring-boot-maven-plugin</artifactid>\n          <configuration>\n            <layout>ZIP</layout>\n          </configuration>\n          <includes>\n            <include>\n           \t\t<groupid>com.example</groupid>\n            \t<artifactid>demo</artifactid>\n            </include>\n          </includes>\n        </plugin>\n      </plugins>\n    </build>\n```\n","slug":"好用常用人人都要会的最基本的Maven插件收集","published":1,"_id":"ckacfrpcx0008s04tfl7x85hv","layout":"post","photos":[],"link":"","content":"<p>把手上的好几个项目的pom整理了一遍 规范了一下model 整理出了一些插件 方便新手们入门maven</p>\n<a id=\"more\"></a>\n\n<h1 id=\"好用常用人人都要会的最基本的Maven插件收集\"><a href=\"#好用常用人人都要会的最基本的Maven插件收集\" class=\"headerlink\" title=\"好用常用人人都要会的最基本的Maven插件收集\"></a>好用常用人人都要会的最基本的Maven插件收集</h1><p>大部分的插件其实都可以从<a href=\"https://maven.apache.org/plugins/index.html\" target=\"_blank\" rel=\"noopener\">MAVEN官方的可用插件列表</a>中直接找到<br>在这里取了比较常用并且实用的几个插件做一点说明<br>大多数使用场景无非是：</p>\n<ul>\n<li>要自定义打包的名称</li>\n<li>要将打包后的jar包自动复制到某处</li>\n<li>要将外置lib目录和maven依赖一起打进去</li>\n<li>要根据环境复制对应的配置文件</li>\n</ul>\n<p>这里选出的插件足以应对大部分情况了 </p>\n<h2 id=\"Maven依赖管理插件maven-dependency-plugin\"><a href=\"#Maven依赖管理插件maven-dependency-plugin\" class=\"headerlink\" title=\"Maven依赖管理插件maven-dependency-plugin\"></a>Maven依赖管理插件<a href=\"https://maven.apache.org/plugins/maven-dependency-plugin\" target=\"_blank\" rel=\"noopener\">maven-dependency-plugin</a></h2><p>主要用于管理依赖，比如引入某个特殊的jar包，或者从某个jar包中提取文件<br><code>tree</code>命令和<code>display-ancestors</code>命令在搭建工程时是比较好用的，可以很方便的找出重复依赖项，保证依赖版本一致</p>\n<h3 id=\"常用功能\"><a href=\"#常用功能\" class=\"headerlink\" title=\"常用功能\"></a>常用功能</h3><ul>\n<li>list 列出的依赖关系</li>\n<li>tree 以树型结构列出的依赖关系</li>\n<li>copy-dependencies 拷贝某个依赖项</li>\n<li>unpack-dependencies 解包某个依赖项</li>\n<li>display-ancestors 显示所有父依赖</li>\n</ul>\n<h2 id=\"Maven构建小助手-build-helper-maven-plugin\"><a href=\"#Maven构建小助手-build-helper-maven-plugin\" class=\"headerlink\" title=\"Maven构建小助手 build-helper-maven-plugin\"></a>Maven构建小助手 <a href=\"https://www.mojohaus.org/build-helper-maven-plugin/\" target=\"_blank\" rel=\"noopener\">build-helper-maven-plugin</a></h2><p>主要用于为POM生成各种属性,比如打包时间、IP地址之类的，功能比较多就不上代码了。</p>\n<h3 id=\"常用功能-1\"><a href=\"#常用功能-1\" class=\"headerlink\" title=\"常用功能\"></a>常用功能</h3><ul>\n<li>add-source 将更多<code>source</code>目录添加到POM</li>\n<li>add-test-source 将更多<code>test source</code>目录添加到POM</li>\n<li>add-resource 将更多<code>resource directories</code>目录添加到POM</li>\n<li>add-test-resource 将更多<code>test resource directories</code>目录添加到POM</li>\n<li>attach-artifact Attach additional artifacts to be installed and deployed.  不知道???干啥的</li>\n<li>maven-version 获取Maven核心版本</li>\n<li>regex-property 使用正则生成某个属性</li>\n<li>regex-properties使用正则生成属性</li>\n<li>released-version Resolve the latest released version of this project.</li>\n<li>parse-version Parse the version into different properties.</li>\n<li>remove-project-artifact 用于在构建过程中删除某个作为依赖的项目以节省空间</li>\n<li>reserve-network-port 保留一个未使用的端口号的随机列表</li>\n<li>local-ip 获取当前主机IP</li>\n<li>cpu-count 获取当前主机CPU核心数</li>\n<li>timestamp-property 生成一个事件放入指定属性中 常用于在包名上附加打包时间</li>\n<li>uptodate-property 检查某个属性根据检查结果设置其他属性</li>\n<li>uptodate-properties 检查多个属性根据检查结果设置多个其他属性</li>\n<li>rootlocation 重定义多模块构建的根目录</li>\n</ul>\n<h2 id=\"复制并重命名插件-Copy-Rename-Maven-Plugin\"><a href=\"#复制并重命名插件-Copy-Rename-Maven-Plugin\" class=\"headerlink\" title=\"复制并重命名插件 Copy Rename Maven Plugin\"></a>复制并重命名插件 <a href=\"https://coderplus.github.io/copy-rename-maven-plugin/\" target=\"_blank\" rel=\"noopener\">Copy Rename Maven Plugin</a></h2><p>功能字如其名,就是用来复制和重命名的，可以用来复制打包好的jar包，也可以在打包过程中复制文件。</p>\n<h3 id=\"常用功能-2\"><a href=\"#常用功能-2\" class=\"headerlink\" title=\"常用功能\"></a>常用功能</h3><ul>\n<li>copy 复制</li>\n<li>rename 重命名</li>\n<li>没了</li>\n</ul>\n<h3 id=\"一个小栗子\"><a href=\"#一个小栗子\" class=\"headerlink\" title=\"一个小栗子\"></a>一个小栗子</h3><pre><code class=\"xml\">&lt;plugin&gt;\n    &lt;groupid&gt;com.coderplus.maven.plugins&lt;/groupid&gt;\n    &lt;artifactid&gt;copy-rename-maven-plugin&lt;/artifactid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;executions&gt;\n        &lt;execution&gt;\n            &lt;id&gt;copy-file&lt;/id&gt;\n            &lt;phase&gt;package&lt;/phase&gt;\n            &lt;goals&gt;\n                &lt;goal&gt;copy&lt;/goal&gt;\n            &lt;/goals&gt;\n            &lt;configuration&gt;\n                &lt;sourcefile&gt;target/${project.build.finalName}.jar&lt;/sourcefile&gt;\n                &lt;destinationfile&gt;/xingyi/${project.build.finalName}.jar&lt;/destinationfile&gt;\n            &lt;/configuration&gt;\n        &lt;/execution&gt;\n    &lt;/executions&gt;\n&lt;/plugin&gt;</code></pre>\n<h2 id=\"Maven编译插件-maven-compiler-plugin\"><a href=\"#Maven编译插件-maven-compiler-plugin\" class=\"headerlink\" title=\"Maven编译插件 maven-compiler-plugin\"></a>Maven编译插件 <a href=\"https://maven.apache.org/plugins/maven-compiler-plugin/\" target=\"_blank\" rel=\"noopener\">maven-compiler-plugin</a></h2><p>主要用于设定编译环境和编译器的属性,是比较基础的插件</p>\n<pre><code class=\"xml\"> &lt;plugin&gt;\n    &lt;groupid&gt;org.apache.maven.plugins&lt;/groupid&gt;\n    &lt;artifactid&gt;maven-compiler-plugin&lt;/artifactid&gt;\n    &lt;version&gt;3.8.0&lt;/version&gt;\n    &lt;configuration&gt;\n        &lt;!-- 一般而言，target与source是保持一致的，但是，有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk，源代码中不能使用低版本jdk中不支持的语法 )，会存在target不同于source的情况 --&gt;\n        &lt;!-- 源代码使用的JDK版本 --&gt;\n        &lt;source&gt;1.8&lt;/source&gt;\n        &lt;!-- 需要生成的目标class文件的编译版本 --&gt;\n        &lt;target&gt;1.8&lt;/target&gt; \n        &lt;!-- 字符集编码 --&gt;\n        &lt;encoding&gt;UTF-8&lt;/encoding&gt;\n        &lt;verbose&gt;true&lt;/verbose&gt;\n        &lt;showwarnings&gt;true&lt;/showwarnings&gt;\n        &lt;!-- 要使compilerVersion标签生效，还需要将fork设为true，用于明确表示编译版本配置的可用 --&gt;\n        &lt;fork&gt;true&lt;/fork&gt;\n        &lt;!-- 指定插件将使用的编译器的版本 --&gt;\n        &lt;compilerversion&gt;1.5&lt;/compilerversion&gt;\n        &lt;!-- 编译器使用的初始内存 --&gt;\n        &lt;meminitial&gt;128m&lt;/meminitial&gt;\n        &lt;!-- 编译器使用的最大内存 --&gt;\n        &lt;maxmem&gt;512m&lt;/maxmem&gt;\n        &lt;!--使用指定的javac命令，例如：&lt;executable&gt;${JAVA_1_4_HOME}/bin/javac&lt;/executable&gt; --&gt;\n        &lt;executable&gt;&lt;!-- path-to-javac --&gt;&lt;/executable&gt;\n        &lt;!-- 跳过测试 --&gt;\n        &lt;skiptests&gt;true&lt;/skiptests&gt;\n        &lt;!-- 这个选项用来传递编译器自身不包含但是却支持的参数选项--&gt;\n        &lt;compilerargument&gt;-verbose -bootclasspath ${java.home}\\lib\\rt.jar&lt;/compilerargument&gt;\n    &lt;/configuration&gt;\n&lt;/plugin&gt;</code></pre>\n<h3 id=\"SpringBootMaven插件spring-boot-maven-plugin\"><a href=\"#SpringBootMaven插件spring-boot-maven-plugin\" class=\"headerlink\" title=\"SpringBootMaven插件spring-boot-maven-plugin\"></a>SpringBootMaven插件<a href=\"https://www.mojohaus.org/build-helper-maven-plugin/\" target=\"_blank\" rel=\"noopener\">spring-boot-maven-plugin</a></h3><h4 id=\"configuration-layout-ZIP-的用处\"><a href=\"#configuration-layout-ZIP-的用处\" class=\"headerlink\" title=\"configuration.layout=ZIP 的用处\"></a>configuration.layout=ZIP 的用处</h4><h6 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h6><ul>\n<li><a href=\"\"http://weyprecht.de/2018/05/02/how-to-really-package-and-deploy-a-spring-boot-application/\"\">How to really package and deploy a Spring Boot application</a></li>\n</ul>\n<h6 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h6><p>将该工程的布局改为ZIP布局，所有的lib将外置到jar包外，在打包时将com.example:demo下的所有依赖放入外置的lib目录</p>\n<pre><code class=\"xml\">    &lt;build&gt;\n      &lt;plugins&gt;\n        &lt;plugin&gt;\n          &lt;groupid&gt;org.springframework.boot&lt;/groupid&gt;\n          &lt;artifactid&gt;spring-boot-maven-plugin&lt;/artifactid&gt;\n          &lt;configuration&gt;\n            &lt;layout&gt;ZIP&lt;/layout&gt;\n          &lt;/configuration&gt;\n          &lt;includes&gt;\n            &lt;include&gt;\n                   &lt;groupid&gt;com.example&lt;/groupid&gt;\n                &lt;artifactid&gt;demo&lt;/artifactid&gt;\n            &lt;/include&gt;\n          &lt;/includes&gt;\n        &lt;/plugin&gt;\n      &lt;/plugins&gt;\n    &lt;/build&gt;</code></pre>\n","site":{"data":{}},"excerpt":"<p>把手上的好几个项目的pom整理了一遍 规范了一下model 整理出了一些插件 方便新手们入门maven</p>","more":"<h1 id=\"好用常用人人都要会的最基本的Maven插件收集\"><a href=\"#好用常用人人都要会的最基本的Maven插件收集\" class=\"headerlink\" title=\"好用常用人人都要会的最基本的Maven插件收集\"></a>好用常用人人都要会的最基本的Maven插件收集</h1><p>大部分的插件其实都可以从<a href=\"https://maven.apache.org/plugins/index.html\" target=\"_blank\" rel=\"noopener\">MAVEN官方的可用插件列表</a>中直接找到<br>在这里取了比较常用并且实用的几个插件做一点说明<br>大多数使用场景无非是：</p>\n<ul>\n<li>要自定义打包的名称</li>\n<li>要将打包后的jar包自动复制到某处</li>\n<li>要将外置lib目录和maven依赖一起打进去</li>\n<li>要根据环境复制对应的配置文件</li>\n</ul>\n<p>这里选出的插件足以应对大部分情况了 </p>\n<h2 id=\"Maven依赖管理插件maven-dependency-plugin\"><a href=\"#Maven依赖管理插件maven-dependency-plugin\" class=\"headerlink\" title=\"Maven依赖管理插件maven-dependency-plugin\"></a>Maven依赖管理插件<a href=\"https://maven.apache.org/plugins/maven-dependency-plugin\" target=\"_blank\" rel=\"noopener\">maven-dependency-plugin</a></h2><p>主要用于管理依赖，比如引入某个特殊的jar包，或者从某个jar包中提取文件<br><code>tree</code>命令和<code>display-ancestors</code>命令在搭建工程时是比较好用的，可以很方便的找出重复依赖项，保证依赖版本一致</p>\n<h3 id=\"常用功能\"><a href=\"#常用功能\" class=\"headerlink\" title=\"常用功能\"></a>常用功能</h3><ul>\n<li>list 列出的依赖关系</li>\n<li>tree 以树型结构列出的依赖关系</li>\n<li>copy-dependencies 拷贝某个依赖项</li>\n<li>unpack-dependencies 解包某个依赖项</li>\n<li>display-ancestors 显示所有父依赖</li>\n</ul>\n<h2 id=\"Maven构建小助手-build-helper-maven-plugin\"><a href=\"#Maven构建小助手-build-helper-maven-plugin\" class=\"headerlink\" title=\"Maven构建小助手 build-helper-maven-plugin\"></a>Maven构建小助手 <a href=\"https://www.mojohaus.org/build-helper-maven-plugin/\" target=\"_blank\" rel=\"noopener\">build-helper-maven-plugin</a></h2><p>主要用于为POM生成各种属性,比如打包时间、IP地址之类的，功能比较多就不上代码了。</p>\n<h3 id=\"常用功能-1\"><a href=\"#常用功能-1\" class=\"headerlink\" title=\"常用功能\"></a>常用功能</h3><ul>\n<li>add-source 将更多<code>source</code>目录添加到POM</li>\n<li>add-test-source 将更多<code>test source</code>目录添加到POM</li>\n<li>add-resource 将更多<code>resource directories</code>目录添加到POM</li>\n<li>add-test-resource 将更多<code>test resource directories</code>目录添加到POM</li>\n<li>attach-artifact Attach additional artifacts to be installed and deployed.  不知道???干啥的</li>\n<li>maven-version 获取Maven核心版本</li>\n<li>regex-property 使用正则生成某个属性</li>\n<li>regex-properties使用正则生成属性</li>\n<li>released-version Resolve the latest released version of this project.</li>\n<li>parse-version Parse the version into different properties.</li>\n<li>remove-project-artifact 用于在构建过程中删除某个作为依赖的项目以节省空间</li>\n<li>reserve-network-port 保留一个未使用的端口号的随机列表</li>\n<li>local-ip 获取当前主机IP</li>\n<li>cpu-count 获取当前主机CPU核心数</li>\n<li>timestamp-property 生成一个事件放入指定属性中 常用于在包名上附加打包时间</li>\n<li>uptodate-property 检查某个属性根据检查结果设置其他属性</li>\n<li>uptodate-properties 检查多个属性根据检查结果设置多个其他属性</li>\n<li>rootlocation 重定义多模块构建的根目录</li>\n</ul>\n<h2 id=\"复制并重命名插件-Copy-Rename-Maven-Plugin\"><a href=\"#复制并重命名插件-Copy-Rename-Maven-Plugin\" class=\"headerlink\" title=\"复制并重命名插件 Copy Rename Maven Plugin\"></a>复制并重命名插件 <a href=\"https://coderplus.github.io/copy-rename-maven-plugin/\" target=\"_blank\" rel=\"noopener\">Copy Rename Maven Plugin</a></h2><p>功能字如其名,就是用来复制和重命名的，可以用来复制打包好的jar包，也可以在打包过程中复制文件。</p>\n<h3 id=\"常用功能-2\"><a href=\"#常用功能-2\" class=\"headerlink\" title=\"常用功能\"></a>常用功能</h3><ul>\n<li>copy 复制</li>\n<li>rename 重命名</li>\n<li>没了</li>\n</ul>\n<h3 id=\"一个小栗子\"><a href=\"#一个小栗子\" class=\"headerlink\" title=\"一个小栗子\"></a>一个小栗子</h3><pre><code class=\"xml\">&lt;plugin&gt;\n    &lt;groupid&gt;com.coderplus.maven.plugins&lt;/groupid&gt;\n    &lt;artifactid&gt;copy-rename-maven-plugin&lt;/artifactid&gt;\n    &lt;version&gt;1.0&lt;/version&gt;\n    &lt;executions&gt;\n        &lt;execution&gt;\n            &lt;id&gt;copy-file&lt;/id&gt;\n            &lt;phase&gt;package&lt;/phase&gt;\n            &lt;goals&gt;\n                &lt;goal&gt;copy&lt;/goal&gt;\n            &lt;/goals&gt;\n            &lt;configuration&gt;\n                &lt;sourcefile&gt;target/${project.build.finalName}.jar&lt;/sourcefile&gt;\n                &lt;destinationfile&gt;/xingyi/${project.build.finalName}.jar&lt;/destinationfile&gt;\n            &lt;/configuration&gt;\n        &lt;/execution&gt;\n    &lt;/executions&gt;\n&lt;/plugin&gt;</code></pre>\n<h2 id=\"Maven编译插件-maven-compiler-plugin\"><a href=\"#Maven编译插件-maven-compiler-plugin\" class=\"headerlink\" title=\"Maven编译插件 maven-compiler-plugin\"></a>Maven编译插件 <a href=\"https://maven.apache.org/plugins/maven-compiler-plugin/\" target=\"_blank\" rel=\"noopener\">maven-compiler-plugin</a></h2><p>主要用于设定编译环境和编译器的属性,是比较基础的插件</p>\n<pre><code class=\"xml\"> &lt;plugin&gt;\n    &lt;groupid&gt;org.apache.maven.plugins&lt;/groupid&gt;\n    &lt;artifactid&gt;maven-compiler-plugin&lt;/artifactid&gt;\n    &lt;version&gt;3.8.0&lt;/version&gt;\n    &lt;configuration&gt;\n        &lt;!-- 一般而言，target与source是保持一致的，但是，有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk，源代码中不能使用低版本jdk中不支持的语法 )，会存在target不同于source的情况 --&gt;\n        &lt;!-- 源代码使用的JDK版本 --&gt;\n        &lt;source&gt;1.8&lt;/source&gt;\n        &lt;!-- 需要生成的目标class文件的编译版本 --&gt;\n        &lt;target&gt;1.8&lt;/target&gt; \n        &lt;!-- 字符集编码 --&gt;\n        &lt;encoding&gt;UTF-8&lt;/encoding&gt;\n        &lt;verbose&gt;true&lt;/verbose&gt;\n        &lt;showwarnings&gt;true&lt;/showwarnings&gt;\n        &lt;!-- 要使compilerVersion标签生效，还需要将fork设为true，用于明确表示编译版本配置的可用 --&gt;\n        &lt;fork&gt;true&lt;/fork&gt;\n        &lt;!-- 指定插件将使用的编译器的版本 --&gt;\n        &lt;compilerversion&gt;1.5&lt;/compilerversion&gt;\n        &lt;!-- 编译器使用的初始内存 --&gt;\n        &lt;meminitial&gt;128m&lt;/meminitial&gt;\n        &lt;!-- 编译器使用的最大内存 --&gt;\n        &lt;maxmem&gt;512m&lt;/maxmem&gt;\n        &lt;!--使用指定的javac命令，例如：&lt;executable&gt;${JAVA_1_4_HOME}/bin/javac&lt;/executable&gt; --&gt;\n        &lt;executable&gt;&lt;!-- path-to-javac --&gt;&lt;/executable&gt;\n        &lt;!-- 跳过测试 --&gt;\n        &lt;skiptests&gt;true&lt;/skiptests&gt;\n        &lt;!-- 这个选项用来传递编译器自身不包含但是却支持的参数选项--&gt;\n        &lt;compilerargument&gt;-verbose -bootclasspath ${java.home}\\lib\\rt.jar&lt;/compilerargument&gt;\n    &lt;/configuration&gt;\n&lt;/plugin&gt;</code></pre>\n<h3 id=\"SpringBootMaven插件spring-boot-maven-plugin\"><a href=\"#SpringBootMaven插件spring-boot-maven-plugin\" class=\"headerlink\" title=\"SpringBootMaven插件spring-boot-maven-plugin\"></a>SpringBootMaven插件<a href=\"https://www.mojohaus.org/build-helper-maven-plugin/\" target=\"_blank\" rel=\"noopener\">spring-boot-maven-plugin</a></h3><h4 id=\"configuration-layout-ZIP-的用处\"><a href=\"#configuration-layout-ZIP-的用处\" class=\"headerlink\" title=\"configuration.layout=ZIP 的用处\"></a>configuration.layout=ZIP 的用处</h4><h6 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h6><ul>\n<li><a href=\"\"http://weyprecht.de/2018/05/02/how-to-really-package-and-deploy-a-spring-boot-application/\"\">How to really package and deploy a Spring Boot application</a></li>\n</ul>\n<h6 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h6><p>将该工程的布局改为ZIP布局，所有的lib将外置到jar包外，在打包时将com.example:demo下的所有依赖放入外置的lib目录</p>\n<pre><code class=\"xml\">    &lt;build&gt;\n      &lt;plugins&gt;\n        &lt;plugin&gt;\n          &lt;groupid&gt;org.springframework.boot&lt;/groupid&gt;\n          &lt;artifactid&gt;spring-boot-maven-plugin&lt;/artifactid&gt;\n          &lt;configuration&gt;\n            &lt;layout&gt;ZIP&lt;/layout&gt;\n          &lt;/configuration&gt;\n          &lt;includes&gt;\n            &lt;include&gt;\n                   &lt;groupid&gt;com.example&lt;/groupid&gt;\n                &lt;artifactid&gt;demo&lt;/artifactid&gt;\n            &lt;/include&gt;\n          &lt;/includes&gt;\n        &lt;/plugin&gt;\n      &lt;/plugins&gt;\n    &lt;/build&gt;</code></pre>"},{"title":"泛型上下界","date":"2019-04-25T17:08:33.000Z","updated":"2020-02-20T07:41:36.000Z","comments":1,"_content":"\njava是基于类型擦除的伪泛型 没其他语言的泛型好用 \n<!--more-->\n###  super 类型下界通配符  \n\n- List中只能存储一种元素，此处声明的`<!--? super BaseDemoEntity-->`,表明这个List中存放的元素属于 BaseDemoEntity **其中一种** 父类类型\n\n-  BaseDemoEntity的父类可能有复数个，比如 Object，BaseEntity。取出时不知道到底List里到底装的啥，但一定是继承于Object，所以统一强转为Object类型\n\n- 存入时只能放入 BaseDemoEntity 和它的子类，因为声明的`<!--? super BaseDemoEntity-->`，BaseDemoEntity 可以被安全的强转为`<!--? super BaseDemoEntity-->`此处如果传入BaseDemoEntity的父类，那么运行时jvm将传入的类型转为`<!--? super BaseDemoEntity-->`时可能会因为类型不一致报错\n\n\n\n```java\n    @RequestMapping(\"/superBaseDemoEntity\")\n    public void superBaseDemoEntity() {\n\n        List<!--? super BaseDemoEntity--> appList = new ArrayList&lt;&gt;();\n        appList.add(new Music());\n        appList.add(new BaseDemoEntity());\n        Object object1 = appList.get(0);\n\n    }\n```\n\n### extends 类型上界通配符 \n\n- `<!--? extends BaseDemoEntity-->` =&gt; BaseDemoEntity的任意一种子类\n\n-  List中只能存储一种元素，此处声明的`<!--? extends BaseDemoEntity-->`表明这个List中存放的元素可能是继承与 BaseDemoEntity 的 **其中一种** 元素\n\n- 取出时可以被安全的强转为 BaseDemoEntity\n\n- 存入时由于不知道你存入的类型是否跟`<!--? extends BaseDemoEntity-->`类型是一个类型，因此不能存入\n\n```java\n     @RequestMapping(\"/extendsBaseDemoEntity\")\n    public void extendsBaseDemoEntity() {\n\n        List<!--? extends BaseDemoEntity--> appList2 = new ArrayList&lt;&gt;();\n        BaseDemoEntity baseDemoEntity = appList2.get(0);\n    }\n\n```\n","source":"_posts/泛型上下界.md","raw":"---\ntitle: '泛型上下界'\ndate: 2019/04/26 01:08:33\nupdated: 2020/2/20 15:41:36\ncomments: true\ncategories: \n    - [我永远爱学习]\ntags: \n    - java\n---\n\njava是基于类型擦除的伪泛型 没其他语言的泛型好用 \n<!--more-->\n###  super 类型下界通配符  \n\n- List中只能存储一种元素，此处声明的`<!--? super BaseDemoEntity-->`,表明这个List中存放的元素属于 BaseDemoEntity **其中一种** 父类类型\n\n-  BaseDemoEntity的父类可能有复数个，比如 Object，BaseEntity。取出时不知道到底List里到底装的啥，但一定是继承于Object，所以统一强转为Object类型\n\n- 存入时只能放入 BaseDemoEntity 和它的子类，因为声明的`<!--? super BaseDemoEntity-->`，BaseDemoEntity 可以被安全的强转为`<!--? super BaseDemoEntity-->`此处如果传入BaseDemoEntity的父类，那么运行时jvm将传入的类型转为`<!--? super BaseDemoEntity-->`时可能会因为类型不一致报错\n\n\n\n```java\n    @RequestMapping(\"/superBaseDemoEntity\")\n    public void superBaseDemoEntity() {\n\n        List<!--? super BaseDemoEntity--> appList = new ArrayList&lt;&gt;();\n        appList.add(new Music());\n        appList.add(new BaseDemoEntity());\n        Object object1 = appList.get(0);\n\n    }\n```\n\n### extends 类型上界通配符 \n\n- `<!--? extends BaseDemoEntity-->` =&gt; BaseDemoEntity的任意一种子类\n\n-  List中只能存储一种元素，此处声明的`<!--? extends BaseDemoEntity-->`表明这个List中存放的元素可能是继承与 BaseDemoEntity 的 **其中一种** 元素\n\n- 取出时可以被安全的强转为 BaseDemoEntity\n\n- 存入时由于不知道你存入的类型是否跟`<!--? extends BaseDemoEntity-->`类型是一个类型，因此不能存入\n\n```java\n     @RequestMapping(\"/extendsBaseDemoEntity\")\n    public void extendsBaseDemoEntity() {\n\n        List<!--? extends BaseDemoEntity--> appList2 = new ArrayList&lt;&gt;();\n        BaseDemoEntity baseDemoEntity = appList2.get(0);\n    }\n\n```\n","slug":"泛型上下界","published":1,"_id":"ckacfrpcz000bs04tebkk4tkp","layout":"post","photos":[],"link":"","content":"<p>java是基于类型擦除的伪泛型 没其他语言的泛型好用 </p>\n<a id=\"more\"></a>\n<h3 id=\"super-类型下界通配符\"><a href=\"#super-类型下界通配符\" class=\"headerlink\" title=\"super 类型下界通配符\"></a>super 类型下界通配符</h3><ul>\n<li><p>List中只能存储一种元素，此处声明的<code>&lt;!--? super BaseDemoEntity--&gt;</code>,表明这个List中存放的元素属于 BaseDemoEntity <strong>其中一种</strong> 父类类型</p>\n</li>\n<li><p>BaseDemoEntity的父类可能有复数个，比如 Object，BaseEntity。取出时不知道到底List里到底装的啥，但一定是继承于Object，所以统一强转为Object类型</p>\n</li>\n<li><p>存入时只能放入 BaseDemoEntity 和它的子类，因为声明的<code>&lt;!--? super BaseDemoEntity--&gt;</code>，BaseDemoEntity 可以被安全的强转为<code>&lt;!--? super BaseDemoEntity--&gt;</code>此处如果传入BaseDemoEntity的父类，那么运行时jvm将传入的类型转为<code>&lt;!--? super BaseDemoEntity--&gt;</code>时可能会因为类型不一致报错</p>\n</li>\n</ul>\n<pre><code class=\"java\">    @RequestMapping(&quot;/superBaseDemoEntity&quot;)\n    public void superBaseDemoEntity() {\n\n        List&lt;!--? super BaseDemoEntity--&gt; appList = new ArrayList&amp;lt;&amp;gt;();\n        appList.add(new Music());\n        appList.add(new BaseDemoEntity());\n        Object object1 = appList.get(0);\n\n    }</code></pre>\n<h3 id=\"extends-类型上界通配符\"><a href=\"#extends-类型上界通配符\" class=\"headerlink\" title=\"extends 类型上界通配符\"></a>extends 类型上界通配符</h3><ul>\n<li><p><code>&lt;!--? extends BaseDemoEntity--&gt;</code> =&gt; BaseDemoEntity的任意一种子类</p>\n</li>\n<li><p>List中只能存储一种元素，此处声明的<code>&lt;!--? extends BaseDemoEntity--&gt;</code>表明这个List中存放的元素可能是继承与 BaseDemoEntity 的 <strong>其中一种</strong> 元素</p>\n</li>\n<li><p>取出时可以被安全的强转为 BaseDemoEntity</p>\n</li>\n<li><p>存入时由于不知道你存入的类型是否跟<code>&lt;!--? extends BaseDemoEntity--&gt;</code>类型是一个类型，因此不能存入</p>\n</li>\n</ul>\n<pre><code class=\"java\">     @RequestMapping(&quot;/extendsBaseDemoEntity&quot;)\n    public void extendsBaseDemoEntity() {\n\n        List&lt;!--? extends BaseDemoEntity--&gt; appList2 = new ArrayList&amp;lt;&amp;gt;();\n        BaseDemoEntity baseDemoEntity = appList2.get(0);\n    }\n</code></pre>\n","site":{"data":{}},"excerpt":"<p>java是基于类型擦除的伪泛型 没其他语言的泛型好用 </p>","more":"<h3 id=\"super-类型下界通配符\"><a href=\"#super-类型下界通配符\" class=\"headerlink\" title=\"super 类型下界通配符\"></a>super 类型下界通配符</h3><ul>\n<li><p>List中只能存储一种元素，此处声明的<code>&lt;!--? super BaseDemoEntity--&gt;</code>,表明这个List中存放的元素属于 BaseDemoEntity <strong>其中一种</strong> 父类类型</p>\n</li>\n<li><p>BaseDemoEntity的父类可能有复数个，比如 Object，BaseEntity。取出时不知道到底List里到底装的啥，但一定是继承于Object，所以统一强转为Object类型</p>\n</li>\n<li><p>存入时只能放入 BaseDemoEntity 和它的子类，因为声明的<code>&lt;!--? super BaseDemoEntity--&gt;</code>，BaseDemoEntity 可以被安全的强转为<code>&lt;!--? super BaseDemoEntity--&gt;</code>此处如果传入BaseDemoEntity的父类，那么运行时jvm将传入的类型转为<code>&lt;!--? super BaseDemoEntity--&gt;</code>时可能会因为类型不一致报错</p>\n</li>\n</ul>\n<pre><code class=\"java\">    @RequestMapping(&quot;/superBaseDemoEntity&quot;)\n    public void superBaseDemoEntity() {\n\n        List&lt;!--? super BaseDemoEntity--&gt; appList = new ArrayList&amp;lt;&amp;gt;();\n        appList.add(new Music());\n        appList.add(new BaseDemoEntity());\n        Object object1 = appList.get(0);\n\n    }</code></pre>\n<h3 id=\"extends-类型上界通配符\"><a href=\"#extends-类型上界通配符\" class=\"headerlink\" title=\"extends 类型上界通配符\"></a>extends 类型上界通配符</h3><ul>\n<li><p><code>&lt;!--? extends BaseDemoEntity--&gt;</code> =&gt; BaseDemoEntity的任意一种子类</p>\n</li>\n<li><p>List中只能存储一种元素，此处声明的<code>&lt;!--? extends BaseDemoEntity--&gt;</code>表明这个List中存放的元素可能是继承与 BaseDemoEntity 的 <strong>其中一种</strong> 元素</p>\n</li>\n<li><p>取出时可以被安全的强转为 BaseDemoEntity</p>\n</li>\n<li><p>存入时由于不知道你存入的类型是否跟<code>&lt;!--? extends BaseDemoEntity--&gt;</code>类型是一个类型，因此不能存入</p>\n</li>\n</ul>\n<pre><code class=\"java\">     @RequestMapping(&quot;/extendsBaseDemoEntity&quot;)\n    public void extendsBaseDemoEntity() {\n\n        List&lt;!--? extends BaseDemoEntity--&gt; appList2 = new ArrayList&amp;lt;&amp;gt;();\n        BaseDemoEntity baseDemoEntity = appList2.get(0);\n    }\n</code></pre>"},{"title":"计划任务的Spring实现与手动实现","date":"2019-06-04T02:23:06.000Z","updated":"2020-02-20T07:41:36.000Z","cover":"/2019/06/04/计划任务的Spring实现与手动实现/title.jpg","coverWidth":716,"coverHeight":540,"comments":1,"_content":"\n手写计划任务当然比不过简单又好用的SpringScheduled\n<!--more-->\n## 使用Spring Scheduled的计划任务 \n\n### 关键方法\n\n- 计算下一次匹配CRON表达式的时间\n- `new CronSequenceGenerator(\"1 1 0 1 * ?\").next(new Date());`\n- 该方法用于计算下一次运行的到现在时间的时间差\n- `org.springframework.scheduling.concurrent.ReschedulingRunnable#schedule();`\n    \n### 实现代码\n\n```java\n/**\n * <h2>ScheduleConfig</h2>\n * <p>定时任务配置</p>\n *\n * @author Daizc\n * @date 2019/12/10\n */\n@Component\n@EnableScheduling\npublic class ScheduleConfig {\n\n    // 每月第一天的0分0秒执行\n    public static final String CRON_EXPRESSION = \"0 0 0 1 * ?\";\n\n    @Scheduled(cron = CRON_EXPRESSION, zone = \"Asia/Shanghai\")\n    public void generateFormJob() {\n        System.out.println(new Date().toString() + \" &gt;&gt;计划任务执行....\");\n    }\n}\n```\n## 自己写的计划任务\n\n### 思路\n\n- 使用一个阻塞队列\n- 使用一个线程去消费队列\n- 使用一个线程在计算`现在到下次执行时间的时间差`并睡到下次执行时间将Runable放入队列中消费\n\n### 实现代码\n\n```java\n\n    /**\n     * 自己写的计划任务\n     */\n    private LinkedBlockingQueue<runnable> queue = new LinkedBlockingQueue&lt;&gt;();\n\n    private Runnable task = () -&gt; {\n        System.out.println(new Date().toString() + \" &gt;&gt;计划任务执行....\");\n    };\n\n    @SuppressWarnings({\"all\", \"AlibabaAvoidManuallyCreateThread\"})\n    public ScheduleConfig() {\n        Thread take = new Thread(() -&gt; {\n            try {\n                while (true) {\n                    Runnable runnable = runnable = queue.take();\n                    runnable.run();\n                }\n            } catch (InterruptedException ignored) {}\n        });\n        take.setDaemon(true);\n        take.setName(\"schedule-take\");\n\n        Thread put = new Thread(() -&gt; {\n            Runnable runnable = null;\n            try {\n                while (true) {\n                    // 计算下次执行时间\n                    Date next = new CronSequenceGenerator(CRON_EXPRESSION).next(new Date());\n                    Thread.sleep(next.getTime() - System.currentTimeMillis());\n                    queue.put(task);\n                }\n            } catch (InterruptedException ignored) {}\n        });\n        put.setDaemon(true);\n        put.setName(\"schedule-put\");\n\n        take.start();\n        put.start();\n    }\n```\n","source":"_posts/计划任务的Spring实现与手动实现.md","raw":"---\ntitle: '计划任务的Spring实现与手动实现'\ndate: 2019/06/04 10:23:06\nupdated: 2020/2/20 15:41:36\ncover: /2019/06/04/计划任务的Spring实现与手动实现/title.jpg\ncoverWidth: 716\ncoverHeight: 540\ncomments: true\ncategories: \n    - [我永远爱学习]\ntags: \n    - java\n    - spring\n---\n\n手写计划任务当然比不过简单又好用的SpringScheduled\n<!--more-->\n## 使用Spring Scheduled的计划任务 \n\n### 关键方法\n\n- 计算下一次匹配CRON表达式的时间\n- `new CronSequenceGenerator(\"1 1 0 1 * ?\").next(new Date());`\n- 该方法用于计算下一次运行的到现在时间的时间差\n- `org.springframework.scheduling.concurrent.ReschedulingRunnable#schedule();`\n    \n### 实现代码\n\n```java\n/**\n * <h2>ScheduleConfig</h2>\n * <p>定时任务配置</p>\n *\n * @author Daizc\n * @date 2019/12/10\n */\n@Component\n@EnableScheduling\npublic class ScheduleConfig {\n\n    // 每月第一天的0分0秒执行\n    public static final String CRON_EXPRESSION = \"0 0 0 1 * ?\";\n\n    @Scheduled(cron = CRON_EXPRESSION, zone = \"Asia/Shanghai\")\n    public void generateFormJob() {\n        System.out.println(new Date().toString() + \" &gt;&gt;计划任务执行....\");\n    }\n}\n```\n## 自己写的计划任务\n\n### 思路\n\n- 使用一个阻塞队列\n- 使用一个线程去消费队列\n- 使用一个线程在计算`现在到下次执行时间的时间差`并睡到下次执行时间将Runable放入队列中消费\n\n### 实现代码\n\n```java\n\n    /**\n     * 自己写的计划任务\n     */\n    private LinkedBlockingQueue<runnable> queue = new LinkedBlockingQueue&lt;&gt;();\n\n    private Runnable task = () -&gt; {\n        System.out.println(new Date().toString() + \" &gt;&gt;计划任务执行....\");\n    };\n\n    @SuppressWarnings({\"all\", \"AlibabaAvoidManuallyCreateThread\"})\n    public ScheduleConfig() {\n        Thread take = new Thread(() -&gt; {\n            try {\n                while (true) {\n                    Runnable runnable = runnable = queue.take();\n                    runnable.run();\n                }\n            } catch (InterruptedException ignored) {}\n        });\n        take.setDaemon(true);\n        take.setName(\"schedule-take\");\n\n        Thread put = new Thread(() -&gt; {\n            Runnable runnable = null;\n            try {\n                while (true) {\n                    // 计算下次执行时间\n                    Date next = new CronSequenceGenerator(CRON_EXPRESSION).next(new Date());\n                    Thread.sleep(next.getTime() - System.currentTimeMillis());\n                    queue.put(task);\n                }\n            } catch (InterruptedException ignored) {}\n        });\n        put.setDaemon(true);\n        put.setName(\"schedule-put\");\n\n        take.start();\n        put.start();\n    }\n```\n","slug":"计划任务的Spring实现与手动实现","published":1,"_id":"ckacfrpd0000cs04t7wup2o94","layout":"post","photos":[],"link":"","content":"<p>手写计划任务当然比不过简单又好用的SpringScheduled</p>\n<a id=\"more\"></a>\n<h2 id=\"使用Spring-Scheduled的计划任务\"><a href=\"#使用Spring-Scheduled的计划任务\" class=\"headerlink\" title=\"使用Spring Scheduled的计划任务\"></a>使用Spring Scheduled的计划任务</h2><h3 id=\"关键方法\"><a href=\"#关键方法\" class=\"headerlink\" title=\"关键方法\"></a>关键方法</h3><ul>\n<li>计算下一次匹配CRON表达式的时间</li>\n<li><code>new CronSequenceGenerator(&quot;1 1 0 1 * ?&quot;).next(new Date());</code></li>\n<li>该方法用于计算下一次运行的到现在时间的时间差</li>\n<li><code>org.springframework.scheduling.concurrent.ReschedulingRunnable#schedule();</code></li>\n</ul>\n<h3 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h3><pre><code class=\"java\">/**\n * &lt;h2&gt;ScheduleConfig&lt;/h2&gt;\n * &lt;p&gt;定时任务配置&lt;/p&gt;\n *\n * @author Daizc\n * @date 2019/12/10\n */\n@Component\n@EnableScheduling\npublic class ScheduleConfig {\n\n    // 每月第一天的0分0秒执行\n    public static final String CRON_EXPRESSION = &quot;0 0 0 1 * ?&quot;;\n\n    @Scheduled(cron = CRON_EXPRESSION, zone = &quot;Asia/Shanghai&quot;)\n    public void generateFormJob() {\n        System.out.println(new Date().toString() + &quot; &amp;gt;&amp;gt;计划任务执行....&quot;);\n    }\n}</code></pre>\n<h2 id=\"自己写的计划任务\"><a href=\"#自己写的计划任务\" class=\"headerlink\" title=\"自己写的计划任务\"></a>自己写的计划任务</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li>使用一个阻塞队列</li>\n<li>使用一个线程去消费队列</li>\n<li>使用一个线程在计算<code>现在到下次执行时间的时间差</code>并睡到下次执行时间将Runable放入队列中消费</li>\n</ul>\n<h3 id=\"实现代码-1\"><a href=\"#实现代码-1\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h3><pre><code class=\"java\">\n    /**\n     * 自己写的计划任务\n     */\n    private LinkedBlockingQueue&lt;runnable&gt; queue = new LinkedBlockingQueue&amp;lt;&amp;gt;();\n\n    private Runnable task = () -&amp;gt; {\n        System.out.println(new Date().toString() + &quot; &amp;gt;&amp;gt;计划任务执行....&quot;);\n    };\n\n    @SuppressWarnings({&quot;all&quot;, &quot;AlibabaAvoidManuallyCreateThread&quot;})\n    public ScheduleConfig() {\n        Thread take = new Thread(() -&amp;gt; {\n            try {\n                while (true) {\n                    Runnable runnable = runnable = queue.take();\n                    runnable.run();\n                }\n            } catch (InterruptedException ignored) {}\n        });\n        take.setDaemon(true);\n        take.setName(&quot;schedule-take&quot;);\n\n        Thread put = new Thread(() -&amp;gt; {\n            Runnable runnable = null;\n            try {\n                while (true) {\n                    // 计算下次执行时间\n                    Date next = new CronSequenceGenerator(CRON_EXPRESSION).next(new Date());\n                    Thread.sleep(next.getTime() - System.currentTimeMillis());\n                    queue.put(task);\n                }\n            } catch (InterruptedException ignored) {}\n        });\n        put.setDaemon(true);\n        put.setName(&quot;schedule-put&quot;);\n\n        take.start();\n        put.start();\n    }</code></pre>\n","site":{"data":{}},"excerpt":"<p>手写计划任务当然比不过简单又好用的SpringScheduled</p>","more":"<h2 id=\"使用Spring-Scheduled的计划任务\"><a href=\"#使用Spring-Scheduled的计划任务\" class=\"headerlink\" title=\"使用Spring Scheduled的计划任务\"></a>使用Spring Scheduled的计划任务</h2><h3 id=\"关键方法\"><a href=\"#关键方法\" class=\"headerlink\" title=\"关键方法\"></a>关键方法</h3><ul>\n<li>计算下一次匹配CRON表达式的时间</li>\n<li><code>new CronSequenceGenerator(&quot;1 1 0 1 * ?&quot;).next(new Date());</code></li>\n<li>该方法用于计算下一次运行的到现在时间的时间差</li>\n<li><code>org.springframework.scheduling.concurrent.ReschedulingRunnable#schedule();</code></li>\n</ul>\n<h3 id=\"实现代码\"><a href=\"#实现代码\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h3><pre><code class=\"java\">/**\n * &lt;h2&gt;ScheduleConfig&lt;/h2&gt;\n * &lt;p&gt;定时任务配置&lt;/p&gt;\n *\n * @author Daizc\n * @date 2019/12/10\n */\n@Component\n@EnableScheduling\npublic class ScheduleConfig {\n\n    // 每月第一天的0分0秒执行\n    public static final String CRON_EXPRESSION = &quot;0 0 0 1 * ?&quot;;\n\n    @Scheduled(cron = CRON_EXPRESSION, zone = &quot;Asia/Shanghai&quot;)\n    public void generateFormJob() {\n        System.out.println(new Date().toString() + &quot; &amp;gt;&amp;gt;计划任务执行....&quot;);\n    }\n}</code></pre>\n<h2 id=\"自己写的计划任务\"><a href=\"#自己写的计划任务\" class=\"headerlink\" title=\"自己写的计划任务\"></a>自己写的计划任务</h2><h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><ul>\n<li>使用一个阻塞队列</li>\n<li>使用一个线程去消费队列</li>\n<li>使用一个线程在计算<code>现在到下次执行时间的时间差</code>并睡到下次执行时间将Runable放入队列中消费</li>\n</ul>\n<h3 id=\"实现代码-1\"><a href=\"#实现代码-1\" class=\"headerlink\" title=\"实现代码\"></a>实现代码</h3><pre><code class=\"java\">\n    /**\n     * 自己写的计划任务\n     */\n    private LinkedBlockingQueue&lt;runnable&gt; queue = new LinkedBlockingQueue&amp;lt;&amp;gt;();\n\n    private Runnable task = () -&amp;gt; {\n        System.out.println(new Date().toString() + &quot; &amp;gt;&amp;gt;计划任务执行....&quot;);\n    };\n\n    @SuppressWarnings({&quot;all&quot;, &quot;AlibabaAvoidManuallyCreateThread&quot;})\n    public ScheduleConfig() {\n        Thread take = new Thread(() -&amp;gt; {\n            try {\n                while (true) {\n                    Runnable runnable = runnable = queue.take();\n                    runnable.run();\n                }\n            } catch (InterruptedException ignored) {}\n        });\n        take.setDaemon(true);\n        take.setName(&quot;schedule-take&quot;);\n\n        Thread put = new Thread(() -&amp;gt; {\n            Runnable runnable = null;\n            try {\n                while (true) {\n                    // 计算下次执行时间\n                    Date next = new CronSequenceGenerator(CRON_EXPRESSION).next(new Date());\n                    Thread.sleep(next.getTime() - System.currentTimeMillis());\n                    queue.put(task);\n                }\n            } catch (InterruptedException ignored) {}\n        });\n        put.setDaemon(true);\n        put.setName(&quot;schedule-put&quot;);\n\n        take.start();\n        put.start();\n    }</code></pre>"},{"title":"java8函数设计[1]-在filter中根据Key去重的函数","date":"2019-12-19T09:54:52.000Z","updated":"2020-02-20T07:41:36.000Z","cover":"/2019/12/19/java8函数设计[1]-在filter中根据Key去重的函数/title.jpg","coverWidth":599,"coverHeight":271,"comments":1,"_content":"\n函数接口是如何写出来的？\n<!--more-->\n\n# java函数接口设计\n## 在filter中根据Key去重的函数 StreamUtil.distinctByKey()\n\n### 具体使用方法\n\n- 该函数用于在filter中根据传入参数的某一属性进行过滤，以保证在收集为map的情况下不会出现重复主键\n\n\n```java\nList<entry<string, string=\"\">&gt; simpleList = baseProjects.stream()\n                .filter(StreamUtil.distinctByKey(BaseProject::getTypeDic))\n                .map(StreamUtil.entry(BaseProject::getTypeDic, BaseProject::getTypeStr))\n                .collect(Collectors.toList());\n``` \n\n\n### 接口设计\n```java\n    /**\n     * <h3>distinctByKey</h3>\n     * <p>可用于在filter中根据属性过滤</p>\n     *\n     * @param function 接受一个 接受 类型A 返回 类型B 的函数式接口\n     * @return Predicate 返回一个 接受 类型A 返回 Boolean型 的函数式接口\n     */\n    public static <t> Predicate<t> distinctByKey(Function<!--? super T, ?--> function) {\n        Map filterMap = Maps.newConcurrentMap();\n\n        return t -&gt; filterMap.putIfAbsent(function.apply(t), Boolean.TRUE) == null;\n    }\n```\n\n### 设计思路\n\n1. 观察Stream.filter()接口\n2. 对接Stream.filter()接口\n3. 实现去重功能\n4. 参数优化\n\n### 开始编写\n\n####  观察Stream.filter()接口 &amp;&amp; 对接Stream.filter()接口\n\n Stream.filter()接口:`Stream<t> filter(Predicate<!--? super T--> predicate)`\n\n\n 首先可以看到filter接口需要接收一个类型为`Predicate<!--? super T-->`的函数,这个函数接受一个参数返回一个boolean类型。\n\n根据以上信息先写一个函数出来\n```java\npublic static <e> Predicate<e> distinctByKey2() {\n        return new Predicate<e>() {\n            @Override\n            public boolean test(E e) {\n                return false;\n            }\n        };\n    }\n\n```\n\n这个函数虽然可以被filter正常接收，但是由于没有形参，因此无法传递参数\n```java\n public static void main(String[] args) {\n        Lists.newArrayList()\n                .stream()\n                .filter(StreamUtil.distinctByKey2())\n                .collect(Collectors.toList());\n    }\n```\n\n现在与预期的效果比对一下\n| 对比  | 函数 |\n| :-- | - |\n| 目前效果 | `.filter(StreamUtil.distinctByKey2())` |\n| 预期的效果 | `.filter(StreamUtil.distinctByKey2(Xxxxx:getId))` |\n有点不对？！这个函数虽然可以被filter正常接收，但是去无法传入参数。因此要给`distinctByKey2()`方法加上传入的参数。\n通过观察预期效果，是需要传入的参数应该是一个函数的，这个函数接收一个`T类型`参数，返回一个`不知道什么类型`的参数。\n`Function<t, r=\"\">`函数接收一个T类型，返回一个R类型，可以满足这个需求。\n继续观察预期效果，这个`不知道什么类型的参数`实际上就是`distinctByKey2方法中new出来Predicate<e>#test(E e)`中的那个e，说人话就是`Function<t,r>`中的R在此处就是`Predicate<e>`中的E。\n那么补上我们的形参\n```java\npublic static <e,r> Predicate<e> distinctByKey2(Function<e,r> function) {\n        return new Predicate<e>() {\n            @Override\n            public boolean test(E t) {\n\n                return false;\n            }\n        };\n    }\n```\n\n#### 实现去重功能\n现在与预期效果一致了，需要实现去重功能 去重功能可以用Set或者ConcurrentMap实现\n使用ConcurrentMap存储function返回值的状态\n根据`ConcurrentMap.putIfAbsent(xxx)`的特性 如果map中已经有同样的key和value就返回null，根据返回值是否为null来判断是否需要被过滤\n\n```java\n   public static <e,r> Predicate<e> distinctByKey2(Function<e,r> function) {\n\n        Map filterMap = Maps.newConcurrentMap();\n\n        return new Predicate<e>() {\n            @Override\n            public boolean test(E t) {\n                // 调用方传入函数的结果\n                R apply = function.apply(t);\n                // putIfAbsent 在首次关联K,V时返回null 非首次的时候不执行put()方法 直接返回之前的值\n                Boolean isNullIsDuplicate = filterMap.putIfAbsent(apply, Boolean.TRUE);\n                // isNullIsDuplicate==null时 K就没重复 函数返回true\n                return isNullIsDuplicate == null;\n            }\n        };\n    }\n```\n\n\n#### 参数优化\n\n把匿名内部类使用lambda替换掉，在把冗余代码inline，最后调整一下泛型参数\n    \n    在上面的例子中`Function<e,r>`中\n    R是调用者函数的返回值类型，仅仅被当做key使用，本身是什么类型不重要，因此可以直接去掉这个R泛型，由?代替\n    E是调用者函数的形参类型，函数调用方在函数中可能会显式声明参数类型`[注1]`，以达到强转形参类型的目的，因此将E修改为 <!--? super E-->\n    \n```java\n public static <e> Predicate<e> distinctByKey2(Function<!--? super E, ?--> function) {\n        Map filterMap = Maps.newConcurrentMap();\n\n        return e -&gt; filterMap.putIfAbsent(function.apply(e), Boolean.TRUE) == null;\n    }\n    \n //[注1] \n public static void main(String[] args) {\n        List collect = Lists.newArrayList()\n                .stream()\n                // 显式强转形参类型\n                .filter(StreamUtil.distinctByKey2(baseEntity -&gt; baseEntity))\n                .collect(Collectors.toList());\n    }\n```\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/java8函数设计[1]-在filter中根据Key去重的函数.md","raw":"---\ntitle: \"java8函数设计[1]-在filter中根据Key去重的函数\"\ndate: 2019/12/19 17:54:52\nupdated: 2020/2/20 15:41:36\ncover: /2019/12/19/java8函数设计[1]-在filter中根据Key去重的函数/title.jpg\ncoverWidth: 599\ncoverHeight: 271\ncomments: true\ncategories: \n    - [我永远爱学习]\ntags: \n    - lambda\n    - java\n---\n\n函数接口是如何写出来的？\n<!--more-->\n\n# java函数接口设计\n## 在filter中根据Key去重的函数 StreamUtil.distinctByKey()\n\n### 具体使用方法\n\n- 该函数用于在filter中根据传入参数的某一属性进行过滤，以保证在收集为map的情况下不会出现重复主键\n\n\n```java\nList<entry<string, string=\"\">&gt; simpleList = baseProjects.stream()\n                .filter(StreamUtil.distinctByKey(BaseProject::getTypeDic))\n                .map(StreamUtil.entry(BaseProject::getTypeDic, BaseProject::getTypeStr))\n                .collect(Collectors.toList());\n``` \n\n\n### 接口设计\n```java\n    /**\n     * <h3>distinctByKey</h3>\n     * <p>可用于在filter中根据属性过滤</p>\n     *\n     * @param function 接受一个 接受 类型A 返回 类型B 的函数式接口\n     * @return Predicate 返回一个 接受 类型A 返回 Boolean型 的函数式接口\n     */\n    public static <t> Predicate<t> distinctByKey(Function<!--? super T, ?--> function) {\n        Map filterMap = Maps.newConcurrentMap();\n\n        return t -&gt; filterMap.putIfAbsent(function.apply(t), Boolean.TRUE) == null;\n    }\n```\n\n### 设计思路\n\n1. 观察Stream.filter()接口\n2. 对接Stream.filter()接口\n3. 实现去重功能\n4. 参数优化\n\n### 开始编写\n\n####  观察Stream.filter()接口 &amp;&amp; 对接Stream.filter()接口\n\n Stream.filter()接口:`Stream<t> filter(Predicate<!--? super T--> predicate)`\n\n\n 首先可以看到filter接口需要接收一个类型为`Predicate<!--? super T-->`的函数,这个函数接受一个参数返回一个boolean类型。\n\n根据以上信息先写一个函数出来\n```java\npublic static <e> Predicate<e> distinctByKey2() {\n        return new Predicate<e>() {\n            @Override\n            public boolean test(E e) {\n                return false;\n            }\n        };\n    }\n\n```\n\n这个函数虽然可以被filter正常接收，但是由于没有形参，因此无法传递参数\n```java\n public static void main(String[] args) {\n        Lists.newArrayList()\n                .stream()\n                .filter(StreamUtil.distinctByKey2())\n                .collect(Collectors.toList());\n    }\n```\n\n现在与预期的效果比对一下\n| 对比  | 函数 |\n| :-- | - |\n| 目前效果 | `.filter(StreamUtil.distinctByKey2())` |\n| 预期的效果 | `.filter(StreamUtil.distinctByKey2(Xxxxx:getId))` |\n有点不对？！这个函数虽然可以被filter正常接收，但是去无法传入参数。因此要给`distinctByKey2()`方法加上传入的参数。\n通过观察预期效果，是需要传入的参数应该是一个函数的，这个函数接收一个`T类型`参数，返回一个`不知道什么类型`的参数。\n`Function<t, r=\"\">`函数接收一个T类型，返回一个R类型，可以满足这个需求。\n继续观察预期效果，这个`不知道什么类型的参数`实际上就是`distinctByKey2方法中new出来Predicate<e>#test(E e)`中的那个e，说人话就是`Function<t,r>`中的R在此处就是`Predicate<e>`中的E。\n那么补上我们的形参\n```java\npublic static <e,r> Predicate<e> distinctByKey2(Function<e,r> function) {\n        return new Predicate<e>() {\n            @Override\n            public boolean test(E t) {\n\n                return false;\n            }\n        };\n    }\n```\n\n#### 实现去重功能\n现在与预期效果一致了，需要实现去重功能 去重功能可以用Set或者ConcurrentMap实现\n使用ConcurrentMap存储function返回值的状态\n根据`ConcurrentMap.putIfAbsent(xxx)`的特性 如果map中已经有同样的key和value就返回null，根据返回值是否为null来判断是否需要被过滤\n\n```java\n   public static <e,r> Predicate<e> distinctByKey2(Function<e,r> function) {\n\n        Map filterMap = Maps.newConcurrentMap();\n\n        return new Predicate<e>() {\n            @Override\n            public boolean test(E t) {\n                // 调用方传入函数的结果\n                R apply = function.apply(t);\n                // putIfAbsent 在首次关联K,V时返回null 非首次的时候不执行put()方法 直接返回之前的值\n                Boolean isNullIsDuplicate = filterMap.putIfAbsent(apply, Boolean.TRUE);\n                // isNullIsDuplicate==null时 K就没重复 函数返回true\n                return isNullIsDuplicate == null;\n            }\n        };\n    }\n```\n\n\n#### 参数优化\n\n把匿名内部类使用lambda替换掉，在把冗余代码inline，最后调整一下泛型参数\n    \n    在上面的例子中`Function<e,r>`中\n    R是调用者函数的返回值类型，仅仅被当做key使用，本身是什么类型不重要，因此可以直接去掉这个R泛型，由?代替\n    E是调用者函数的形参类型，函数调用方在函数中可能会显式声明参数类型`[注1]`，以达到强转形参类型的目的，因此将E修改为 <!--? super E-->\n    \n```java\n public static <e> Predicate<e> distinctByKey2(Function<!--? super E, ?--> function) {\n        Map filterMap = Maps.newConcurrentMap();\n\n        return e -&gt; filterMap.putIfAbsent(function.apply(e), Boolean.TRUE) == null;\n    }\n    \n //[注1] \n public static void main(String[] args) {\n        List collect = Lists.newArrayList()\n                .stream()\n                // 显式强转形参类型\n                .filter(StreamUtil.distinctByKey2(baseEntity -&gt; baseEntity))\n                .collect(Collectors.toList());\n    }\n```\n\n\n\n\n\n\n\n\n\n\n","slug":"java8函数设计[1]-在filter中根据Key去重的函数","published":1,"_id":"ckacfrpd3000fs04t6q5w9qor","layout":"post","photos":[],"link":"","content":"<p>函数接口是如何写出来的？</p>\n<a id=\"more\"></a>\n\n<h1 id=\"java函数接口设计\"><a href=\"#java函数接口设计\" class=\"headerlink\" title=\"java函数接口设计\"></a>java函数接口设计</h1><h2 id=\"在filter中根据Key去重的函数-StreamUtil-distinctByKey\"><a href=\"#在filter中根据Key去重的函数-StreamUtil-distinctByKey\" class=\"headerlink\" title=\"在filter中根据Key去重的函数 StreamUtil.distinctByKey()\"></a>在filter中根据Key去重的函数 StreamUtil.distinctByKey()</h2><h3 id=\"具体使用方法\"><a href=\"#具体使用方法\" class=\"headerlink\" title=\"具体使用方法\"></a>具体使用方法</h3><ul>\n<li>该函数用于在filter中根据传入参数的某一属性进行过滤，以保证在收集为map的情况下不会出现重复主键</li>\n</ul>\n<pre><code class=\"java\">List&lt;entry&lt;string, string=&quot;&quot;&gt;&amp;gt; simpleList = baseProjects.stream()\n                .filter(StreamUtil.distinctByKey(BaseProject::getTypeDic))\n                .map(StreamUtil.entry(BaseProject::getTypeDic, BaseProject::getTypeStr))\n                .collect(Collectors.toList());</code></pre>\n<h3 id=\"接口设计\"><a href=\"#接口设计\" class=\"headerlink\" title=\"接口设计\"></a>接口设计</h3><pre><code class=\"java\">    /**\n     * &lt;h3&gt;distinctByKey&lt;/h3&gt;\n     * &lt;p&gt;可用于在filter中根据属性过滤&lt;/p&gt;\n     *\n     * @param function 接受一个 接受 类型A 返回 类型B 的函数式接口\n     * @return Predicate 返回一个 接受 类型A 返回 Boolean型 的函数式接口\n     */\n    public static &lt;t&gt; Predicate&lt;t&gt; distinctByKey(Function&lt;!--? super T, ?--&gt; function) {\n        Map filterMap = Maps.newConcurrentMap();\n\n        return t -&amp;gt; filterMap.putIfAbsent(function.apply(t), Boolean.TRUE) == null;\n    }</code></pre>\n<h3 id=\"设计思路\"><a href=\"#设计思路\" class=\"headerlink\" title=\"设计思路\"></a>设计思路</h3><ol>\n<li>观察Stream.filter()接口</li>\n<li>对接Stream.filter()接口</li>\n<li>实现去重功能</li>\n<li>参数优化</li>\n</ol>\n<h3 id=\"开始编写\"><a href=\"#开始编写\" class=\"headerlink\" title=\"开始编写\"></a>开始编写</h3><h4 id=\"观察Stream-filter-接口-amp-amp-对接Stream-filter-接口\"><a href=\"#观察Stream-filter-接口-amp-amp-对接Stream-filter-接口\" class=\"headerlink\" title=\"观察Stream.filter()接口 &amp;&amp; 对接Stream.filter()接口\"></a>观察Stream.filter()接口 &amp;&amp; 对接Stream.filter()接口</h4><p> Stream.filter()接口:<code>Stream&lt;t&gt; filter(Predicate&lt;!--? super T--&gt; predicate)</code></p>\n<p> 首先可以看到filter接口需要接收一个类型为<code>Predicate&lt;!--? super T--&gt;</code>的函数,这个函数接受一个参数返回一个boolean类型。</p>\n<p>根据以上信息先写一个函数出来</p>\n<pre><code class=\"java\">public static &lt;e&gt; Predicate&lt;e&gt; distinctByKey2() {\n        return new Predicate&lt;e&gt;() {\n            @Override\n            public boolean test(E e) {\n                return false;\n            }\n        };\n    }\n</code></pre>\n<p>这个函数虽然可以被filter正常接收，但是由于没有形参，因此无法传递参数</p>\n<pre><code class=\"java\"> public static void main(String[] args) {\n        Lists.newArrayList()\n                .stream()\n                .filter(StreamUtil.distinctByKey2())\n                .collect(Collectors.toList());\n    }</code></pre>\n<p>现在与预期的效果比对一下<br>| 对比  | 函数 |<br>| :– | - |<br>| 目前效果 | <code>.filter(StreamUtil.distinctByKey2())</code> |<br>| 预期的效果 | <code>.filter(StreamUtil.distinctByKey2(Xxxxx:getId))</code> |<br>有点不对？！这个函数虽然可以被filter正常接收，但是去无法传入参数。因此要给<code>distinctByKey2()</code>方法加上传入的参数。<br>通过观察预期效果，是需要传入的参数应该是一个函数的，这个函数接收一个<code>T类型</code>参数，返回一个<code>不知道什么类型</code>的参数。<br><code>Function&lt;t, r=&quot;&quot;&gt;</code>函数接收一个T类型，返回一个R类型，可以满足这个需求。<br>继续观察预期效果，这个<code>不知道什么类型的参数</code>实际上就是<code>distinctByKey2方法中new出来Predicate&lt;e&gt;#test(E e)</code>中的那个e，说人话就是<code>Function&lt;t,r&gt;</code>中的R在此处就是<code>Predicate&lt;e&gt;</code>中的E。<br>那么补上我们的形参</p>\n<pre><code class=\"java\">public static &lt;e,r&gt; Predicate&lt;e&gt; distinctByKey2(Function&lt;e,r&gt; function) {\n        return new Predicate&lt;e&gt;() {\n            @Override\n            public boolean test(E t) {\n\n                return false;\n            }\n        };\n    }</code></pre>\n<h4 id=\"实现去重功能\"><a href=\"#实现去重功能\" class=\"headerlink\" title=\"实现去重功能\"></a>实现去重功能</h4><p>现在与预期效果一致了，需要实现去重功能 去重功能可以用Set或者ConcurrentMap实现<br>使用ConcurrentMap存储function返回值的状态<br>根据<code>ConcurrentMap.putIfAbsent(xxx)</code>的特性 如果map中已经有同样的key和value就返回null，根据返回值是否为null来判断是否需要被过滤</p>\n<pre><code class=\"java\">   public static &lt;e,r&gt; Predicate&lt;e&gt; distinctByKey2(Function&lt;e,r&gt; function) {\n\n        Map filterMap = Maps.newConcurrentMap();\n\n        return new Predicate&lt;e&gt;() {\n            @Override\n            public boolean test(E t) {\n                // 调用方传入函数的结果\n                R apply = function.apply(t);\n                // putIfAbsent 在首次关联K,V时返回null 非首次的时候不执行put()方法 直接返回之前的值\n                Boolean isNullIsDuplicate = filterMap.putIfAbsent(apply, Boolean.TRUE);\n                // isNullIsDuplicate==null时 K就没重复 函数返回true\n                return isNullIsDuplicate == null;\n            }\n        };\n    }</code></pre>\n<h4 id=\"参数优化\"><a href=\"#参数优化\" class=\"headerlink\" title=\"参数优化\"></a>参数优化</h4><p>把匿名内部类使用lambda替换掉，在把冗余代码inline，最后调整一下泛型参数</p>\n<pre><code>在上面的例子中`Function&lt;e,r&gt;`中\nR是调用者函数的返回值类型，仅仅被当做key使用，本身是什么类型不重要，因此可以直接去掉这个R泛型，由?代替\nE是调用者函数的形参类型，函数调用方在函数中可能会显式声明参数类型`[注1]`，以达到强转形参类型的目的，因此将E修改为 &lt;!--? super E--&gt;</code></pre><pre><code class=\"java\"> public static &lt;e&gt; Predicate&lt;e&gt; distinctByKey2(Function&lt;!--? super E, ?--&gt; function) {\n        Map filterMap = Maps.newConcurrentMap();\n\n        return e -&amp;gt; filterMap.putIfAbsent(function.apply(e), Boolean.TRUE) == null;\n    }\n\n //[注1] \n public static void main(String[] args) {\n        List collect = Lists.newArrayList()\n                .stream()\n                // 显式强转形参类型\n                .filter(StreamUtil.distinctByKey2(baseEntity -&amp;gt; baseEntity))\n                .collect(Collectors.toList());\n    }</code></pre>\n","site":{"data":{}},"excerpt":"<p>函数接口是如何写出来的？</p>","more":"<h1 id=\"java函数接口设计\"><a href=\"#java函数接口设计\" class=\"headerlink\" title=\"java函数接口设计\"></a>java函数接口设计</h1><h2 id=\"在filter中根据Key去重的函数-StreamUtil-distinctByKey\"><a href=\"#在filter中根据Key去重的函数-StreamUtil-distinctByKey\" class=\"headerlink\" title=\"在filter中根据Key去重的函数 StreamUtil.distinctByKey()\"></a>在filter中根据Key去重的函数 StreamUtil.distinctByKey()</h2><h3 id=\"具体使用方法\"><a href=\"#具体使用方法\" class=\"headerlink\" title=\"具体使用方法\"></a>具体使用方法</h3><ul>\n<li>该函数用于在filter中根据传入参数的某一属性进行过滤，以保证在收集为map的情况下不会出现重复主键</li>\n</ul>\n<pre><code class=\"java\">List&lt;entry&lt;string, string=&quot;&quot;&gt;&amp;gt; simpleList = baseProjects.stream()\n                .filter(StreamUtil.distinctByKey(BaseProject::getTypeDic))\n                .map(StreamUtil.entry(BaseProject::getTypeDic, BaseProject::getTypeStr))\n                .collect(Collectors.toList());</code></pre>\n<h3 id=\"接口设计\"><a href=\"#接口设计\" class=\"headerlink\" title=\"接口设计\"></a>接口设计</h3><pre><code class=\"java\">    /**\n     * &lt;h3&gt;distinctByKey&lt;/h3&gt;\n     * &lt;p&gt;可用于在filter中根据属性过滤&lt;/p&gt;\n     *\n     * @param function 接受一个 接受 类型A 返回 类型B 的函数式接口\n     * @return Predicate 返回一个 接受 类型A 返回 Boolean型 的函数式接口\n     */\n    public static &lt;t&gt; Predicate&lt;t&gt; distinctByKey(Function&lt;!--? super T, ?--&gt; function) {\n        Map filterMap = Maps.newConcurrentMap();\n\n        return t -&amp;gt; filterMap.putIfAbsent(function.apply(t), Boolean.TRUE) == null;\n    }</code></pre>\n<h3 id=\"设计思路\"><a href=\"#设计思路\" class=\"headerlink\" title=\"设计思路\"></a>设计思路</h3><ol>\n<li>观察Stream.filter()接口</li>\n<li>对接Stream.filter()接口</li>\n<li>实现去重功能</li>\n<li>参数优化</li>\n</ol>\n<h3 id=\"开始编写\"><a href=\"#开始编写\" class=\"headerlink\" title=\"开始编写\"></a>开始编写</h3><h4 id=\"观察Stream-filter-接口-amp-amp-对接Stream-filter-接口\"><a href=\"#观察Stream-filter-接口-amp-amp-对接Stream-filter-接口\" class=\"headerlink\" title=\"观察Stream.filter()接口 &amp;&amp; 对接Stream.filter()接口\"></a>观察Stream.filter()接口 &amp;&amp; 对接Stream.filter()接口</h4><p> Stream.filter()接口:<code>Stream&lt;t&gt; filter(Predicate&lt;!--? super T--&gt; predicate)</code></p>\n<p> 首先可以看到filter接口需要接收一个类型为<code>Predicate&lt;!--? super T--&gt;</code>的函数,这个函数接受一个参数返回一个boolean类型。</p>\n<p>根据以上信息先写一个函数出来</p>\n<pre><code class=\"java\">public static &lt;e&gt; Predicate&lt;e&gt; distinctByKey2() {\n        return new Predicate&lt;e&gt;() {\n            @Override\n            public boolean test(E e) {\n                return false;\n            }\n        };\n    }\n</code></pre>\n<p>这个函数虽然可以被filter正常接收，但是由于没有形参，因此无法传递参数</p>\n<pre><code class=\"java\"> public static void main(String[] args) {\n        Lists.newArrayList()\n                .stream()\n                .filter(StreamUtil.distinctByKey2())\n                .collect(Collectors.toList());\n    }</code></pre>\n<p>现在与预期的效果比对一下<br>| 对比  | 函数 |<br>| :– | - |<br>| 目前效果 | <code>.filter(StreamUtil.distinctByKey2())</code> |<br>| 预期的效果 | <code>.filter(StreamUtil.distinctByKey2(Xxxxx:getId))</code> |<br>有点不对？！这个函数虽然可以被filter正常接收，但是去无法传入参数。因此要给<code>distinctByKey2()</code>方法加上传入的参数。<br>通过观察预期效果，是需要传入的参数应该是一个函数的，这个函数接收一个<code>T类型</code>参数，返回一个<code>不知道什么类型</code>的参数。<br><code>Function&lt;t, r=&quot;&quot;&gt;</code>函数接收一个T类型，返回一个R类型，可以满足这个需求。<br>继续观察预期效果，这个<code>不知道什么类型的参数</code>实际上就是<code>distinctByKey2方法中new出来Predicate&lt;e&gt;#test(E e)</code>中的那个e，说人话就是<code>Function&lt;t,r&gt;</code>中的R在此处就是<code>Predicate&lt;e&gt;</code>中的E。<br>那么补上我们的形参</p>\n<pre><code class=\"java\">public static &lt;e,r&gt; Predicate&lt;e&gt; distinctByKey2(Function&lt;e,r&gt; function) {\n        return new Predicate&lt;e&gt;() {\n            @Override\n            public boolean test(E t) {\n\n                return false;\n            }\n        };\n    }</code></pre>\n<h4 id=\"实现去重功能\"><a href=\"#实现去重功能\" class=\"headerlink\" title=\"实现去重功能\"></a>实现去重功能</h4><p>现在与预期效果一致了，需要实现去重功能 去重功能可以用Set或者ConcurrentMap实现<br>使用ConcurrentMap存储function返回值的状态<br>根据<code>ConcurrentMap.putIfAbsent(xxx)</code>的特性 如果map中已经有同样的key和value就返回null，根据返回值是否为null来判断是否需要被过滤</p>\n<pre><code class=\"java\">   public static &lt;e,r&gt; Predicate&lt;e&gt; distinctByKey2(Function&lt;e,r&gt; function) {\n\n        Map filterMap = Maps.newConcurrentMap();\n\n        return new Predicate&lt;e&gt;() {\n            @Override\n            public boolean test(E t) {\n                // 调用方传入函数的结果\n                R apply = function.apply(t);\n                // putIfAbsent 在首次关联K,V时返回null 非首次的时候不执行put()方法 直接返回之前的值\n                Boolean isNullIsDuplicate = filterMap.putIfAbsent(apply, Boolean.TRUE);\n                // isNullIsDuplicate==null时 K就没重复 函数返回true\n                return isNullIsDuplicate == null;\n            }\n        };\n    }</code></pre>\n<h4 id=\"参数优化\"><a href=\"#参数优化\" class=\"headerlink\" title=\"参数优化\"></a>参数优化</h4><p>把匿名内部类使用lambda替换掉，在把冗余代码inline，最后调整一下泛型参数</p>\n<pre><code>在上面的例子中`Function&lt;e,r&gt;`中\nR是调用者函数的返回值类型，仅仅被当做key使用，本身是什么类型不重要，因此可以直接去掉这个R泛型，由?代替\nE是调用者函数的形参类型，函数调用方在函数中可能会显式声明参数类型`[注1]`，以达到强转形参类型的目的，因此将E修改为 &lt;!--? super E--&gt;</code></pre><pre><code class=\"java\"> public static &lt;e&gt; Predicate&lt;e&gt; distinctByKey2(Function&lt;!--? super E, ?--&gt; function) {\n        Map filterMap = Maps.newConcurrentMap();\n\n        return e -&amp;gt; filterMap.putIfAbsent(function.apply(e), Boolean.TRUE) == null;\n    }\n\n //[注1] \n public static void main(String[] args) {\n        List collect = Lists.newArrayList()\n                .stream()\n                // 显式强转形参类型\n                .filter(StreamUtil.distinctByKey2(baseEntity -&amp;gt; baseEntity))\n                .collect(Collectors.toList());\n    }</code></pre>"},{"title":"[Centos]yum仓库配置及常用操作","date":"2019-01-02T12:46:25.000Z","updated":"2020-02-20T07:41:36.000Z","comments":1,"_content":"\nyum时不时抽风？仓库获取不到最新资源？先理解yum是怎么工作的吧！\n<!--more-->\n## 常用的储存库\n\n \n\n## 要注意的坑\n\n- 储存库要启用了才有效\n- `yum repo` 只能显示已启用的储存库 显示全部需要`yum repolist all`\n- 如果使用`yum-config-manager`配置仓库一定要记得保存\n- 配置完后记得要`yum makecache`建立缓存，如果不放心可以先`yum clean all `清除所有缓存\n\n&gt; 上面的坑我全部踩了\n\n## 命令 yum repolist all\n\n```text\nLoaded plugins: fastestmirror\nLoading mirror speeds from cached hostfile\n * base: mirror.scalabledns.com\n * elrepo: repos.lax-noc.com\n * elrepo-extras: repos.lax-noc.com\n * elrepo-kernel: repos.lax-noc.com\n * extras: repos-lax.psychz.net\n * updates: repos-lax.psychz.net\nrepo id                       repo name                        status\n// 这些仓库应该是系统升级时留下来的\nC7.0.1406-base/x86_64         CentOS-7.0.1406 - Base           disabled\nC7.0.1406-centosplus/x86_64   CentOS-7.0.1406 - CentOSPlus     disabled\nC7.0.1406-extras/x86_64       CentOS-7.0.1406 - Extras         disabled\nC7.0.1406-fasttrack/x86_64    CentOS-7.0.1406 - Fasttrack      disabled\nC7.0.1406-updates/x86_64      CentOS-7.0.1406 - Updates        disabled\nC7.1.1503-base/x86_64         CentOS-7.1.1503 - Base           disabled\nC7.1.1503-centosplus/x86_64   CentOS-7.1.1503 - CentOSPlus     disabled\nC7.1.1503-extras/x86_64       CentOS-7.1.1503 - Extras         disabled\nC7.1.1503-fasttrack/x86_64    CentOS-7.1.1503 - Fasttrack      disabled\nC7.1.1503-updates/x86_64      CentOS-7.1.1503 - Updates        disabled\nC7.2.1511-base/x86_64         CentOS-7.2.1511 - Base           disabled\nC7.2.1511-centosplus/x86_64   CentOS-7.2.1511 - CentOSPlus     disabled\nC7.2.1511-extras/x86_64       CentOS-7.2.1511 - Extras         disabled\nC7.2.1511-fasttrack/x86_64    CentOS-7.2.1511 - Fasttrack      disabled\nC7.2.1511-updates/x86_64      CentOS-7.2.1511 - Updates        disabled\nC7.3.1611-base/x86_64         CentOS-7.3.1611 - Base           disabled\nC7.3.1611-centosplus/x86_64   CentOS-7.3.1611 - CentOSPlus     disabled\nC7.3.1611-extras/x86_64       CentOS-7.3.1611 - Extras         disabled\nC7.3.1611-fasttrack/x86_64    CentOS-7.3.1611 - Fasttrack      disabled\nC7.3.1611-updates/x86_64      CentOS-7.3.1611 - Updates        disabled\nC7.4.1708-base/x86_64         CentOS-7.4.1708 - Base           disabled\nC7.4.1708-centosplus/x86_64   CentOS-7.4.1708 - CentOSPlus     disabled\nC7.4.1708-extras/x86_64       CentOS-7.4.1708 - Extras         disabled\nC7.4.1708-fasttrack/x86_64    CentOS-7.4.1708 - Fasttrack      disabled\nC7.4.1708-updates/x86_64      CentOS-7.4.1708 - Updates        disabled\nC7.5.1804-base/x86_64         CentOS-7.5.1804 - Base           disabled\nC7.5.1804-centosplus/x86_64   CentOS-7.5.1804 - CentOSPlus     disabled\nC7.5.1804-extras/x86_64       CentOS-7.5.1804 - Extras         disabled\nC7.5.1804-fasttrack/x86_64    CentOS-7.5.1804 - Fasttrack      disabled\nC7.5.1804-updates/x86_64      CentOS-7.5.1804 - Updates        disabled\nC7.6.1810-base/x86_64         CentOS-7.6.1810 - Base           disabled\nC7.6.1810-centosplus/x86_64   CentOS-7.6.1810 - CentOSPlus     disabled\nC7.6.1810-extras/x86_64       CentOS-7.6.1810 - Extras         disabled\nC7.6.1810-fasttrack/x86_64    CentOS-7.6.1810 - Fasttrack      disabled\nC7.6.1810-updates/x86_64      CentOS-7.6.1810 - Updates        disabled\n// centos7核心库 源码库和开发库的源就不开了\nbase/7/x86_64                 CentOS-7 - Base                  enabled: 10,096+1\nbase-debuginfo/x86_64         CentOS-7 - Debuginfo             disabled\nbase-source/7                 CentOS-7 - Base Sources          disabled\n// 看上去是多媒体相关的库 没桌面环境应该是用不上了\nc7-media                      CentOS-7 - Media                 disabled\n// 这个源主要是用来替换base源的，其中有不少包是base源的增强版\n// 但是如果开启这个源部分包可能会于base冲突 \n// 需要在base源中exclude 或者使用yum-plugin-priorities插件来保证兼容性\n// 引用WIKI: https://wiki.centos.org/zh/AdditionalResources/Repositories/CentOSPlus\ncentosplus/7/x86_64           CentOS-7 - Plus                  disabled\ncentosplus-source/7           CentOS-7 - Plus Sources          disabled\n// cr = Continuous Release 下次发布内容 相当于beta版了\ncr/7/x86_64                   CentOS-7 - cr                    disabled\n// elrepo = The Community Enterprise Linux Repository\n// http://elrepo.org 从描述中可以看出是驱动包 如果有UI可能要开\nelrepo                        ELRepo.org Community Enterprise  enabled:      147\nelrepo-extras                 ELRepo.org Community Enterprise  enabled:       19\nelrepo-kernel                 ELRepo.org Community Enterprise  enabled:       37\nelrepo-testing                ELRepo.org Community Enterprise  disabled\n// 这个源要开啊 EPEL仓库 相当多常用的软件都在里面\n// https://fedoraproject.org/\nepel/x86_64                   Extra Packages for Enterprise Li disabled\nepel-debuginfo/x86_64         Extra Packages for Enterprise Li disabled\nepel-source/x86_64            Extra Packages for Enterprise Li disabled\nepel-testing/x86_64           Extra Packages for Enterprise Li disabled\nepel-testing-debuginfo/x86_64 Extra Packages for Enterprise Li disabled\nepel-testing-source/x86_64    Extra Packages for Enterprise Li disabled\nextras/7/x86_64               CentOS-7 - Extras                enabled:      305\nextras-source/7               CentOS-7 - Extras Sources        disabled\nfasttrack/7/x86_64            CentOS-7 - fasttrack             disabled\nupdates/7/x86_64              CentOS-7 - Updates               enabled:    733+5\nupdates-source/7              CentOS-7 - Updates Sources       disabled\nrepolist: 11,337\n```\n\n## 命令 yum-config-manager [yum配置管理器]\n```text\nLoaded plugins: fastestmirror\nUsage: yum-config-manager [options] [section ...]\n\nOptions:\n  Plugin Options:\n\n  Yum Base Options:\n    -h, --help          show this help message and exit\n    -t, --tolerant      be tolerant of errors\n    // 完全从系统缓存运行，不更新缓存\n    -C, --cacheonly     run entirely from system cache, don't update cache\n    -c [config file], --config=[config file]\n                        config file location\n    -R [minutes], --randomwait=[minutes]\n                        maximum command wait time\n    -d [debug level], --debuglevel=[debug level]\n                        debugging output level\n    --showduplicates    show duplicates, in repos, in list/search commands\n    -e [error level], --errorlevel=[error level]\n                        error output level\n    --rpmverbosity=[debug level name]\n                        debugging output level for rpm\n    -q, --quiet         quiet operation\n    -v, --verbose       verbose operation\n    -y, --assumeyes     answer yes for all questions\n    --assumeno          answer no for all questions\n    --version           show Yum version and exit\n    --installroot=[path]\n                        set install root\n    --enablerepo=[repo]\n                        // 启用储存库\n                        enable one or more repositories (wildcards allowed)\n    --disablerepo=[repo]\n                        disable one or more repositories (wildcards allowed)\n    -x [package], --exclude=[package]\n                        exclude package(s) by name or glob\n    --disableexcludes=[repo]\n                        disable exclude from main, for a repo or for\n                        everything\n    --disableincludes=[repo]\n                        disable includepkgs for a repo or for everything\n    --obsoletes         enable obsoletes processing during updates\n    --noplugins         disable Yum plugins\n    --nogpgcheck        disable gpg signature checking\n    --disableplugin=[plugin]\n                        disable plugins by name\n    --enableplugin=[plugin]\n                        enable plugins by name\n    --skip-broken       skip packages with depsolving problems\n    --color=COLOR       control whether color is used\n    --releasever=RELEASEVER\n                        set value of $releasever in yum config and repo files\n    --downloadonly      don't update, just download\n    --downloaddir=DLDIR\n                        specifies an alternate directory to store packages\n    --setopt=SETOPTS    set arbitrary config and repo options\n    --bugfix            Include bugfix relevant packages, in updates\n    --security          Include security relevant packages, in updates\n    --advisory=ADVS, --advisories=ADVS\n                        Include packages needed to fix the given advisory, in\n                        updates\n    --bzs=BZS           Include packages needed to fix the given BZ, in\n                        updates\n    --cves=CVES         Include packages needed to fix the given CVE, in\n                        updates\n    --sec-severity=SEVS, --secseverity=SEVS\n                        Include security relevant packages matching the\n                        severity, in updates\n\n  yum-config-manager options:\n    // 保存当前设置\n    --save              save the current options (useful with --setopt)\n    // 启用仓库 (自动保存)\n    --enable            enable the specified repos (automatically saves)\n    // 禁用仓库 (自动保存)\n    --disable           disable the specified repos (automatically saves)\n    // 从文件或URL添加仓库 (并启用)\n    --add-repo=ADDREPO  add (and enable) the repo from the specified file or\n                        url\n\n```\n\n## 命令 yum\n\n```text\nLoaded plugins: fastestmirror\nUsage: yum [options] COMMAND\n\nList of Commands:\n\ncheck          Check for problems in the rpmdb\ncheck-update   Check for available package updates\nclean          Remove cached data\ndeplist        List a package's dependencies\ndistribution-synchronization Synchronize installed packages to the latest available versions\ndowngrade      downgrade a package\nerase          Remove a package or packages from your system\nfs             Acts on the filesystem data of the host, mainly for removing docs/lanuages for minimal hosts.\nfssnapshot     Creates filesystem snapshots, or lists/deletes current snapshots.\ngroups         Display, or use, the groups information\nhelp           Display a helpful usage message\nhistory        Display, or use, the transaction history\ninfo           Display details about a package or group of packages\ninstall        Install a package or packages on your system\nlist           List a package or groups of packages\nload-transaction load a saved transaction from filename\nmakecache      Generate the metadata cache\nprovides       Find what package provides the given value\nreinstall      reinstall a package\nrepo-pkgs      Treat a repo. as a group of packages, so we can install/remove all of them\nrepolist       Display the configured software repositories\nsearch         Search package details for the given string\nshell          Run an interactive yum shell\nswap           Simple way to swap packages, instead of using shell\nupdate         Update a package or packages on your system\nupdate-minimal Works like upgrade, but goes to the 'newest' package match which fixes a problem that affects your system\nupdateinfo     Acts on repository update information\nupgrade        Update packages taking obsoletes into account\nversion        Display a version for the machine and/or available repos.\n\n\nOptions:\n  -h, --help            show this help message and exit\n  -t, --tolerant        be tolerant of errors\n  -C, --cacheonly       run entirely from system cache, don't update cache\n  -c [config file], --config=[config file]\n                        config file location\n  -R [minutes], --randomwait=[minutes]\n                        maximum command wait time\n  -d [debug level], --debuglevel=[debug level]\n                        debugging output level\n  --showduplicates      show duplicates, in repos, in list/search commands\n  -e [error level], --errorlevel=[error level]\n                        error output level\n  --rpmverbosity=[debug level name]\n                        debugging output level for rpm\n  -q, --quiet           quiet operation\n  -v, --verbose         verbose operation\n  -y, --assumeyes       answer yes for all questions\n  --assumeno            answer no for all questions\n  --version             show Yum version and exit\n  --installroot=[path]  set install root\n  --enablerepo=[repo]   enable one or more repositories (wildcards allowed)\n  --disablerepo=[repo]  disable one or more repositories (wildcards allowed)\n  -x [package], --exclude=[package]\n                        exclude package(s) by name or glob\n  --disableexcludes=[repo]\n                        disable exclude from main, for a repo or for\n                        everything\n  --disableincludes=[repo]\n                        disable includepkgs for a repo or for everything\n  --obsoletes           enable obsoletes processing during updates\n  --noplugins           disable Yum plugins\n  --nogpgcheck          disable gpg signature checking\n  --disableplugin=[plugin]\n                        disable plugins by name\n  --enableplugin=[plugin]\n                        enable plugins by name\n  --skip-broken         skip packages with depsolving problems\n  --color=COLOR         control whether color is used\n  --releasever=RELEASEVER\n                        set value of $releasever in yum config and repo files\n  --downloadonly        don't update, just download\n  --downloaddir=DLDIR   specifies an alternate directory to store packages\n  --setopt=SETOPTS      set arbitrary config and repo options\n  --bugfix              Include bugfix relevant packages, in updates\n  --security            Include security relevant packages, in updates\n  --advisory=ADVS, --advisories=ADVS\n                        Include packages needed to fix the given advisory, in\n                        updates\n  --bzs=BZS             Include packages needed to fix the given BZ, in\n                        updates\n  --cves=CVES           Include packages needed to fix the given CVE, in\n                        updates\n  --sec-severity=SEVS, --secseverity=SEVS\n                        Include security relevant packages matching the\n                        severity, in updates\n\n  Plugin Options:\n\n```\n","source":"_posts/[Centos]yum仓库配置及常用操作.md","raw":"---\ntitle: '[Centos]yum仓库配置及常用操作'\ndate: 2019/1/2 20:46:25\nupdated: 2020/2/20 15:41:36\ncomments: true\ncategories: \n    - [搞点骚操作]\ntags: \n    - linux\n---\n\nyum时不时抽风？仓库获取不到最新资源？先理解yum是怎么工作的吧！\n<!--more-->\n## 常用的储存库\n\n \n\n## 要注意的坑\n\n- 储存库要启用了才有效\n- `yum repo` 只能显示已启用的储存库 显示全部需要`yum repolist all`\n- 如果使用`yum-config-manager`配置仓库一定要记得保存\n- 配置完后记得要`yum makecache`建立缓存，如果不放心可以先`yum clean all `清除所有缓存\n\n&gt; 上面的坑我全部踩了\n\n## 命令 yum repolist all\n\n```text\nLoaded plugins: fastestmirror\nLoading mirror speeds from cached hostfile\n * base: mirror.scalabledns.com\n * elrepo: repos.lax-noc.com\n * elrepo-extras: repos.lax-noc.com\n * elrepo-kernel: repos.lax-noc.com\n * extras: repos-lax.psychz.net\n * updates: repos-lax.psychz.net\nrepo id                       repo name                        status\n// 这些仓库应该是系统升级时留下来的\nC7.0.1406-base/x86_64         CentOS-7.0.1406 - Base           disabled\nC7.0.1406-centosplus/x86_64   CentOS-7.0.1406 - CentOSPlus     disabled\nC7.0.1406-extras/x86_64       CentOS-7.0.1406 - Extras         disabled\nC7.0.1406-fasttrack/x86_64    CentOS-7.0.1406 - Fasttrack      disabled\nC7.0.1406-updates/x86_64      CentOS-7.0.1406 - Updates        disabled\nC7.1.1503-base/x86_64         CentOS-7.1.1503 - Base           disabled\nC7.1.1503-centosplus/x86_64   CentOS-7.1.1503 - CentOSPlus     disabled\nC7.1.1503-extras/x86_64       CentOS-7.1.1503 - Extras         disabled\nC7.1.1503-fasttrack/x86_64    CentOS-7.1.1503 - Fasttrack      disabled\nC7.1.1503-updates/x86_64      CentOS-7.1.1503 - Updates        disabled\nC7.2.1511-base/x86_64         CentOS-7.2.1511 - Base           disabled\nC7.2.1511-centosplus/x86_64   CentOS-7.2.1511 - CentOSPlus     disabled\nC7.2.1511-extras/x86_64       CentOS-7.2.1511 - Extras         disabled\nC7.2.1511-fasttrack/x86_64    CentOS-7.2.1511 - Fasttrack      disabled\nC7.2.1511-updates/x86_64      CentOS-7.2.1511 - Updates        disabled\nC7.3.1611-base/x86_64         CentOS-7.3.1611 - Base           disabled\nC7.3.1611-centosplus/x86_64   CentOS-7.3.1611 - CentOSPlus     disabled\nC7.3.1611-extras/x86_64       CentOS-7.3.1611 - Extras         disabled\nC7.3.1611-fasttrack/x86_64    CentOS-7.3.1611 - Fasttrack      disabled\nC7.3.1611-updates/x86_64      CentOS-7.3.1611 - Updates        disabled\nC7.4.1708-base/x86_64         CentOS-7.4.1708 - Base           disabled\nC7.4.1708-centosplus/x86_64   CentOS-7.4.1708 - CentOSPlus     disabled\nC7.4.1708-extras/x86_64       CentOS-7.4.1708 - Extras         disabled\nC7.4.1708-fasttrack/x86_64    CentOS-7.4.1708 - Fasttrack      disabled\nC7.4.1708-updates/x86_64      CentOS-7.4.1708 - Updates        disabled\nC7.5.1804-base/x86_64         CentOS-7.5.1804 - Base           disabled\nC7.5.1804-centosplus/x86_64   CentOS-7.5.1804 - CentOSPlus     disabled\nC7.5.1804-extras/x86_64       CentOS-7.5.1804 - Extras         disabled\nC7.5.1804-fasttrack/x86_64    CentOS-7.5.1804 - Fasttrack      disabled\nC7.5.1804-updates/x86_64      CentOS-7.5.1804 - Updates        disabled\nC7.6.1810-base/x86_64         CentOS-7.6.1810 - Base           disabled\nC7.6.1810-centosplus/x86_64   CentOS-7.6.1810 - CentOSPlus     disabled\nC7.6.1810-extras/x86_64       CentOS-7.6.1810 - Extras         disabled\nC7.6.1810-fasttrack/x86_64    CentOS-7.6.1810 - Fasttrack      disabled\nC7.6.1810-updates/x86_64      CentOS-7.6.1810 - Updates        disabled\n// centos7核心库 源码库和开发库的源就不开了\nbase/7/x86_64                 CentOS-7 - Base                  enabled: 10,096+1\nbase-debuginfo/x86_64         CentOS-7 - Debuginfo             disabled\nbase-source/7                 CentOS-7 - Base Sources          disabled\n// 看上去是多媒体相关的库 没桌面环境应该是用不上了\nc7-media                      CentOS-7 - Media                 disabled\n// 这个源主要是用来替换base源的，其中有不少包是base源的增强版\n// 但是如果开启这个源部分包可能会于base冲突 \n// 需要在base源中exclude 或者使用yum-plugin-priorities插件来保证兼容性\n// 引用WIKI: https://wiki.centos.org/zh/AdditionalResources/Repositories/CentOSPlus\ncentosplus/7/x86_64           CentOS-7 - Plus                  disabled\ncentosplus-source/7           CentOS-7 - Plus Sources          disabled\n// cr = Continuous Release 下次发布内容 相当于beta版了\ncr/7/x86_64                   CentOS-7 - cr                    disabled\n// elrepo = The Community Enterprise Linux Repository\n// http://elrepo.org 从描述中可以看出是驱动包 如果有UI可能要开\nelrepo                        ELRepo.org Community Enterprise  enabled:      147\nelrepo-extras                 ELRepo.org Community Enterprise  enabled:       19\nelrepo-kernel                 ELRepo.org Community Enterprise  enabled:       37\nelrepo-testing                ELRepo.org Community Enterprise  disabled\n// 这个源要开啊 EPEL仓库 相当多常用的软件都在里面\n// https://fedoraproject.org/\nepel/x86_64                   Extra Packages for Enterprise Li disabled\nepel-debuginfo/x86_64         Extra Packages for Enterprise Li disabled\nepel-source/x86_64            Extra Packages for Enterprise Li disabled\nepel-testing/x86_64           Extra Packages for Enterprise Li disabled\nepel-testing-debuginfo/x86_64 Extra Packages for Enterprise Li disabled\nepel-testing-source/x86_64    Extra Packages for Enterprise Li disabled\nextras/7/x86_64               CentOS-7 - Extras                enabled:      305\nextras-source/7               CentOS-7 - Extras Sources        disabled\nfasttrack/7/x86_64            CentOS-7 - fasttrack             disabled\nupdates/7/x86_64              CentOS-7 - Updates               enabled:    733+5\nupdates-source/7              CentOS-7 - Updates Sources       disabled\nrepolist: 11,337\n```\n\n## 命令 yum-config-manager [yum配置管理器]\n```text\nLoaded plugins: fastestmirror\nUsage: yum-config-manager [options] [section ...]\n\nOptions:\n  Plugin Options:\n\n  Yum Base Options:\n    -h, --help          show this help message and exit\n    -t, --tolerant      be tolerant of errors\n    // 完全从系统缓存运行，不更新缓存\n    -C, --cacheonly     run entirely from system cache, don't update cache\n    -c [config file], --config=[config file]\n                        config file location\n    -R [minutes], --randomwait=[minutes]\n                        maximum command wait time\n    -d [debug level], --debuglevel=[debug level]\n                        debugging output level\n    --showduplicates    show duplicates, in repos, in list/search commands\n    -e [error level], --errorlevel=[error level]\n                        error output level\n    --rpmverbosity=[debug level name]\n                        debugging output level for rpm\n    -q, --quiet         quiet operation\n    -v, --verbose       verbose operation\n    -y, --assumeyes     answer yes for all questions\n    --assumeno          answer no for all questions\n    --version           show Yum version and exit\n    --installroot=[path]\n                        set install root\n    --enablerepo=[repo]\n                        // 启用储存库\n                        enable one or more repositories (wildcards allowed)\n    --disablerepo=[repo]\n                        disable one or more repositories (wildcards allowed)\n    -x [package], --exclude=[package]\n                        exclude package(s) by name or glob\n    --disableexcludes=[repo]\n                        disable exclude from main, for a repo or for\n                        everything\n    --disableincludes=[repo]\n                        disable includepkgs for a repo or for everything\n    --obsoletes         enable obsoletes processing during updates\n    --noplugins         disable Yum plugins\n    --nogpgcheck        disable gpg signature checking\n    --disableplugin=[plugin]\n                        disable plugins by name\n    --enableplugin=[plugin]\n                        enable plugins by name\n    --skip-broken       skip packages with depsolving problems\n    --color=COLOR       control whether color is used\n    --releasever=RELEASEVER\n                        set value of $releasever in yum config and repo files\n    --downloadonly      don't update, just download\n    --downloaddir=DLDIR\n                        specifies an alternate directory to store packages\n    --setopt=SETOPTS    set arbitrary config and repo options\n    --bugfix            Include bugfix relevant packages, in updates\n    --security          Include security relevant packages, in updates\n    --advisory=ADVS, --advisories=ADVS\n                        Include packages needed to fix the given advisory, in\n                        updates\n    --bzs=BZS           Include packages needed to fix the given BZ, in\n                        updates\n    --cves=CVES         Include packages needed to fix the given CVE, in\n                        updates\n    --sec-severity=SEVS, --secseverity=SEVS\n                        Include security relevant packages matching the\n                        severity, in updates\n\n  yum-config-manager options:\n    // 保存当前设置\n    --save              save the current options (useful with --setopt)\n    // 启用仓库 (自动保存)\n    --enable            enable the specified repos (automatically saves)\n    // 禁用仓库 (自动保存)\n    --disable           disable the specified repos (automatically saves)\n    // 从文件或URL添加仓库 (并启用)\n    --add-repo=ADDREPO  add (and enable) the repo from the specified file or\n                        url\n\n```\n\n## 命令 yum\n\n```text\nLoaded plugins: fastestmirror\nUsage: yum [options] COMMAND\n\nList of Commands:\n\ncheck          Check for problems in the rpmdb\ncheck-update   Check for available package updates\nclean          Remove cached data\ndeplist        List a package's dependencies\ndistribution-synchronization Synchronize installed packages to the latest available versions\ndowngrade      downgrade a package\nerase          Remove a package or packages from your system\nfs             Acts on the filesystem data of the host, mainly for removing docs/lanuages for minimal hosts.\nfssnapshot     Creates filesystem snapshots, or lists/deletes current snapshots.\ngroups         Display, or use, the groups information\nhelp           Display a helpful usage message\nhistory        Display, or use, the transaction history\ninfo           Display details about a package or group of packages\ninstall        Install a package or packages on your system\nlist           List a package or groups of packages\nload-transaction load a saved transaction from filename\nmakecache      Generate the metadata cache\nprovides       Find what package provides the given value\nreinstall      reinstall a package\nrepo-pkgs      Treat a repo. as a group of packages, so we can install/remove all of them\nrepolist       Display the configured software repositories\nsearch         Search package details for the given string\nshell          Run an interactive yum shell\nswap           Simple way to swap packages, instead of using shell\nupdate         Update a package or packages on your system\nupdate-minimal Works like upgrade, but goes to the 'newest' package match which fixes a problem that affects your system\nupdateinfo     Acts on repository update information\nupgrade        Update packages taking obsoletes into account\nversion        Display a version for the machine and/or available repos.\n\n\nOptions:\n  -h, --help            show this help message and exit\n  -t, --tolerant        be tolerant of errors\n  -C, --cacheonly       run entirely from system cache, don't update cache\n  -c [config file], --config=[config file]\n                        config file location\n  -R [minutes], --randomwait=[minutes]\n                        maximum command wait time\n  -d [debug level], --debuglevel=[debug level]\n                        debugging output level\n  --showduplicates      show duplicates, in repos, in list/search commands\n  -e [error level], --errorlevel=[error level]\n                        error output level\n  --rpmverbosity=[debug level name]\n                        debugging output level for rpm\n  -q, --quiet           quiet operation\n  -v, --verbose         verbose operation\n  -y, --assumeyes       answer yes for all questions\n  --assumeno            answer no for all questions\n  --version             show Yum version and exit\n  --installroot=[path]  set install root\n  --enablerepo=[repo]   enable one or more repositories (wildcards allowed)\n  --disablerepo=[repo]  disable one or more repositories (wildcards allowed)\n  -x [package], --exclude=[package]\n                        exclude package(s) by name or glob\n  --disableexcludes=[repo]\n                        disable exclude from main, for a repo or for\n                        everything\n  --disableincludes=[repo]\n                        disable includepkgs for a repo or for everything\n  --obsoletes           enable obsoletes processing during updates\n  --noplugins           disable Yum plugins\n  --nogpgcheck          disable gpg signature checking\n  --disableplugin=[plugin]\n                        disable plugins by name\n  --enableplugin=[plugin]\n                        enable plugins by name\n  --skip-broken         skip packages with depsolving problems\n  --color=COLOR         control whether color is used\n  --releasever=RELEASEVER\n                        set value of $releasever in yum config and repo files\n  --downloadonly        don't update, just download\n  --downloaddir=DLDIR   specifies an alternate directory to store packages\n  --setopt=SETOPTS      set arbitrary config and repo options\n  --bugfix              Include bugfix relevant packages, in updates\n  --security            Include security relevant packages, in updates\n  --advisory=ADVS, --advisories=ADVS\n                        Include packages needed to fix the given advisory, in\n                        updates\n  --bzs=BZS             Include packages needed to fix the given BZ, in\n                        updates\n  --cves=CVES           Include packages needed to fix the given CVE, in\n                        updates\n  --sec-severity=SEVS, --secseverity=SEVS\n                        Include security relevant packages matching the\n                        severity, in updates\n\n  Plugin Options:\n\n```\n","slug":"[Centos]yum仓库配置及常用操作","published":1,"_id":"ckacfrpdg001fs04t6cfo5bk6","layout":"post","photos":[],"link":"","content":"<p>yum时不时抽风？仓库获取不到最新资源？先理解yum是怎么工作的吧！</p>\n<a id=\"more\"></a>\n<h2 id=\"常用的储存库\"><a href=\"#常用的储存库\" class=\"headerlink\" title=\"常用的储存库\"></a>常用的储存库</h2><h2 id=\"要注意的坑\"><a href=\"#要注意的坑\" class=\"headerlink\" title=\"要注意的坑\"></a>要注意的坑</h2><ul>\n<li>储存库要启用了才有效</li>\n<li><code>yum repo</code> 只能显示已启用的储存库 显示全部需要<code>yum repolist all</code></li>\n<li>如果使用<code>yum-config-manager</code>配置仓库一定要记得保存</li>\n<li>配置完后记得要<code>yum makecache</code>建立缓存，如果不放心可以先<code>yum clean all</code>清除所有缓存</li>\n</ul>\n<p>&gt; 上面的坑我全部踩了</p>\n<h2 id=\"命令-yum-repolist-all\"><a href=\"#命令-yum-repolist-all\" class=\"headerlink\" title=\"命令 yum repolist all\"></a>命令 yum repolist all</h2><pre><code class=\"text\">Loaded plugins: fastestmirror\nLoading mirror speeds from cached hostfile\n * base: mirror.scalabledns.com\n * elrepo: repos.lax-noc.com\n * elrepo-extras: repos.lax-noc.com\n * elrepo-kernel: repos.lax-noc.com\n * extras: repos-lax.psychz.net\n * updates: repos-lax.psychz.net\nrepo id                       repo name                        status\n// 这些仓库应该是系统升级时留下来的\nC7.0.1406-base/x86_64         CentOS-7.0.1406 - Base           disabled\nC7.0.1406-centosplus/x86_64   CentOS-7.0.1406 - CentOSPlus     disabled\nC7.0.1406-extras/x86_64       CentOS-7.0.1406 - Extras         disabled\nC7.0.1406-fasttrack/x86_64    CentOS-7.0.1406 - Fasttrack      disabled\nC7.0.1406-updates/x86_64      CentOS-7.0.1406 - Updates        disabled\nC7.1.1503-base/x86_64         CentOS-7.1.1503 - Base           disabled\nC7.1.1503-centosplus/x86_64   CentOS-7.1.1503 - CentOSPlus     disabled\nC7.1.1503-extras/x86_64       CentOS-7.1.1503 - Extras         disabled\nC7.1.1503-fasttrack/x86_64    CentOS-7.1.1503 - Fasttrack      disabled\nC7.1.1503-updates/x86_64      CentOS-7.1.1503 - Updates        disabled\nC7.2.1511-base/x86_64         CentOS-7.2.1511 - Base           disabled\nC7.2.1511-centosplus/x86_64   CentOS-7.2.1511 - CentOSPlus     disabled\nC7.2.1511-extras/x86_64       CentOS-7.2.1511 - Extras         disabled\nC7.2.1511-fasttrack/x86_64    CentOS-7.2.1511 - Fasttrack      disabled\nC7.2.1511-updates/x86_64      CentOS-7.2.1511 - Updates        disabled\nC7.3.1611-base/x86_64         CentOS-7.3.1611 - Base           disabled\nC7.3.1611-centosplus/x86_64   CentOS-7.3.1611 - CentOSPlus     disabled\nC7.3.1611-extras/x86_64       CentOS-7.3.1611 - Extras         disabled\nC7.3.1611-fasttrack/x86_64    CentOS-7.3.1611 - Fasttrack      disabled\nC7.3.1611-updates/x86_64      CentOS-7.3.1611 - Updates        disabled\nC7.4.1708-base/x86_64         CentOS-7.4.1708 - Base           disabled\nC7.4.1708-centosplus/x86_64   CentOS-7.4.1708 - CentOSPlus     disabled\nC7.4.1708-extras/x86_64       CentOS-7.4.1708 - Extras         disabled\nC7.4.1708-fasttrack/x86_64    CentOS-7.4.1708 - Fasttrack      disabled\nC7.4.1708-updates/x86_64      CentOS-7.4.1708 - Updates        disabled\nC7.5.1804-base/x86_64         CentOS-7.5.1804 - Base           disabled\nC7.5.1804-centosplus/x86_64   CentOS-7.5.1804 - CentOSPlus     disabled\nC7.5.1804-extras/x86_64       CentOS-7.5.1804 - Extras         disabled\nC7.5.1804-fasttrack/x86_64    CentOS-7.5.1804 - Fasttrack      disabled\nC7.5.1804-updates/x86_64      CentOS-7.5.1804 - Updates        disabled\nC7.6.1810-base/x86_64         CentOS-7.6.1810 - Base           disabled\nC7.6.1810-centosplus/x86_64   CentOS-7.6.1810 - CentOSPlus     disabled\nC7.6.1810-extras/x86_64       CentOS-7.6.1810 - Extras         disabled\nC7.6.1810-fasttrack/x86_64    CentOS-7.6.1810 - Fasttrack      disabled\nC7.6.1810-updates/x86_64      CentOS-7.6.1810 - Updates        disabled\n// centos7核心库 源码库和开发库的源就不开了\nbase/7/x86_64                 CentOS-7 - Base                  enabled: 10,096+1\nbase-debuginfo/x86_64         CentOS-7 - Debuginfo             disabled\nbase-source/7                 CentOS-7 - Base Sources          disabled\n// 看上去是多媒体相关的库 没桌面环境应该是用不上了\nc7-media                      CentOS-7 - Media                 disabled\n// 这个源主要是用来替换base源的，其中有不少包是base源的增强版\n// 但是如果开启这个源部分包可能会于base冲突 \n// 需要在base源中exclude 或者使用yum-plugin-priorities插件来保证兼容性\n// 引用WIKI: https://wiki.centos.org/zh/AdditionalResources/Repositories/CentOSPlus\ncentosplus/7/x86_64           CentOS-7 - Plus                  disabled\ncentosplus-source/7           CentOS-7 - Plus Sources          disabled\n// cr = Continuous Release 下次发布内容 相当于beta版了\ncr/7/x86_64                   CentOS-7 - cr                    disabled\n// elrepo = The Community Enterprise Linux Repository\n// http://elrepo.org 从描述中可以看出是驱动包 如果有UI可能要开\nelrepo                        ELRepo.org Community Enterprise  enabled:      147\nelrepo-extras                 ELRepo.org Community Enterprise  enabled:       19\nelrepo-kernel                 ELRepo.org Community Enterprise  enabled:       37\nelrepo-testing                ELRepo.org Community Enterprise  disabled\n// 这个源要开啊 EPEL仓库 相当多常用的软件都在里面\n// https://fedoraproject.org/\nepel/x86_64                   Extra Packages for Enterprise Li disabled\nepel-debuginfo/x86_64         Extra Packages for Enterprise Li disabled\nepel-source/x86_64            Extra Packages for Enterprise Li disabled\nepel-testing/x86_64           Extra Packages for Enterprise Li disabled\nepel-testing-debuginfo/x86_64 Extra Packages for Enterprise Li disabled\nepel-testing-source/x86_64    Extra Packages for Enterprise Li disabled\nextras/7/x86_64               CentOS-7 - Extras                enabled:      305\nextras-source/7               CentOS-7 - Extras Sources        disabled\nfasttrack/7/x86_64            CentOS-7 - fasttrack             disabled\nupdates/7/x86_64              CentOS-7 - Updates               enabled:    733+5\nupdates-source/7              CentOS-7 - Updates Sources       disabled\nrepolist: 11,337</code></pre>\n<h2 id=\"命令-yum-config-manager-yum配置管理器\"><a href=\"#命令-yum-config-manager-yum配置管理器\" class=\"headerlink\" title=\"命令 yum-config-manager [yum配置管理器]\"></a>命令 yum-config-manager [yum配置管理器]</h2><pre><code class=\"text\">Loaded plugins: fastestmirror\nUsage: yum-config-manager [options] [section ...]\n\nOptions:\n  Plugin Options:\n\n  Yum Base Options:\n    -h, --help          show this help message and exit\n    -t, --tolerant      be tolerant of errors\n    // 完全从系统缓存运行，不更新缓存\n    -C, --cacheonly     run entirely from system cache, don&#39;t update cache\n    -c [config file], --config=[config file]\n                        config file location\n    -R [minutes], --randomwait=[minutes]\n                        maximum command wait time\n    -d [debug level], --debuglevel=[debug level]\n                        debugging output level\n    --showduplicates    show duplicates, in repos, in list/search commands\n    -e [error level], --errorlevel=[error level]\n                        error output level\n    --rpmverbosity=[debug level name]\n                        debugging output level for rpm\n    -q, --quiet         quiet operation\n    -v, --verbose       verbose operation\n    -y, --assumeyes     answer yes for all questions\n    --assumeno          answer no for all questions\n    --version           show Yum version and exit\n    --installroot=[path]\n                        set install root\n    --enablerepo=[repo]\n                        // 启用储存库\n                        enable one or more repositories (wildcards allowed)\n    --disablerepo=[repo]\n                        disable one or more repositories (wildcards allowed)\n    -x [package], --exclude=[package]\n                        exclude package(s) by name or glob\n    --disableexcludes=[repo]\n                        disable exclude from main, for a repo or for\n                        everything\n    --disableincludes=[repo]\n                        disable includepkgs for a repo or for everything\n    --obsoletes         enable obsoletes processing during updates\n    --noplugins         disable Yum plugins\n    --nogpgcheck        disable gpg signature checking\n    --disableplugin=[plugin]\n                        disable plugins by name\n    --enableplugin=[plugin]\n                        enable plugins by name\n    --skip-broken       skip packages with depsolving problems\n    --color=COLOR       control whether color is used\n    --releasever=RELEASEVER\n                        set value of $releasever in yum config and repo files\n    --downloadonly      don&#39;t update, just download\n    --downloaddir=DLDIR\n                        specifies an alternate directory to store packages\n    --setopt=SETOPTS    set arbitrary config and repo options\n    --bugfix            Include bugfix relevant packages, in updates\n    --security          Include security relevant packages, in updates\n    --advisory=ADVS, --advisories=ADVS\n                        Include packages needed to fix the given advisory, in\n                        updates\n    --bzs=BZS           Include packages needed to fix the given BZ, in\n                        updates\n    --cves=CVES         Include packages needed to fix the given CVE, in\n                        updates\n    --sec-severity=SEVS, --secseverity=SEVS\n                        Include security relevant packages matching the\n                        severity, in updates\n\n  yum-config-manager options:\n    // 保存当前设置\n    --save              save the current options (useful with --setopt)\n    // 启用仓库 (自动保存)\n    --enable            enable the specified repos (automatically saves)\n    // 禁用仓库 (自动保存)\n    --disable           disable the specified repos (automatically saves)\n    // 从文件或URL添加仓库 (并启用)\n    --add-repo=ADDREPO  add (and enable) the repo from the specified file or\n                        url\n</code></pre>\n<h2 id=\"命令-yum\"><a href=\"#命令-yum\" class=\"headerlink\" title=\"命令 yum\"></a>命令 yum</h2><pre><code class=\"text\">Loaded plugins: fastestmirror\nUsage: yum [options] COMMAND\n\nList of Commands:\n\ncheck          Check for problems in the rpmdb\ncheck-update   Check for available package updates\nclean          Remove cached data\ndeplist        List a package&#39;s dependencies\ndistribution-synchronization Synchronize installed packages to the latest available versions\ndowngrade      downgrade a package\nerase          Remove a package or packages from your system\nfs             Acts on the filesystem data of the host, mainly for removing docs/lanuages for minimal hosts.\nfssnapshot     Creates filesystem snapshots, or lists/deletes current snapshots.\ngroups         Display, or use, the groups information\nhelp           Display a helpful usage message\nhistory        Display, or use, the transaction history\ninfo           Display details about a package or group of packages\ninstall        Install a package or packages on your system\nlist           List a package or groups of packages\nload-transaction load a saved transaction from filename\nmakecache      Generate the metadata cache\nprovides       Find what package provides the given value\nreinstall      reinstall a package\nrepo-pkgs      Treat a repo. as a group of packages, so we can install/remove all of them\nrepolist       Display the configured software repositories\nsearch         Search package details for the given string\nshell          Run an interactive yum shell\nswap           Simple way to swap packages, instead of using shell\nupdate         Update a package or packages on your system\nupdate-minimal Works like upgrade, but goes to the &#39;newest&#39; package match which fixes a problem that affects your system\nupdateinfo     Acts on repository update information\nupgrade        Update packages taking obsoletes into account\nversion        Display a version for the machine and/or available repos.\n\n\nOptions:\n  -h, --help            show this help message and exit\n  -t, --tolerant        be tolerant of errors\n  -C, --cacheonly       run entirely from system cache, don&#39;t update cache\n  -c [config file], --config=[config file]\n                        config file location\n  -R [minutes], --randomwait=[minutes]\n                        maximum command wait time\n  -d [debug level], --debuglevel=[debug level]\n                        debugging output level\n  --showduplicates      show duplicates, in repos, in list/search commands\n  -e [error level], --errorlevel=[error level]\n                        error output level\n  --rpmverbosity=[debug level name]\n                        debugging output level for rpm\n  -q, --quiet           quiet operation\n  -v, --verbose         verbose operation\n  -y, --assumeyes       answer yes for all questions\n  --assumeno            answer no for all questions\n  --version             show Yum version and exit\n  --installroot=[path]  set install root\n  --enablerepo=[repo]   enable one or more repositories (wildcards allowed)\n  --disablerepo=[repo]  disable one or more repositories (wildcards allowed)\n  -x [package], --exclude=[package]\n                        exclude package(s) by name or glob\n  --disableexcludes=[repo]\n                        disable exclude from main, for a repo or for\n                        everything\n  --disableincludes=[repo]\n                        disable includepkgs for a repo or for everything\n  --obsoletes           enable obsoletes processing during updates\n  --noplugins           disable Yum plugins\n  --nogpgcheck          disable gpg signature checking\n  --disableplugin=[plugin]\n                        disable plugins by name\n  --enableplugin=[plugin]\n                        enable plugins by name\n  --skip-broken         skip packages with depsolving problems\n  --color=COLOR         control whether color is used\n  --releasever=RELEASEVER\n                        set value of $releasever in yum config and repo files\n  --downloadonly        don&#39;t update, just download\n  --downloaddir=DLDIR   specifies an alternate directory to store packages\n  --setopt=SETOPTS      set arbitrary config and repo options\n  --bugfix              Include bugfix relevant packages, in updates\n  --security            Include security relevant packages, in updates\n  --advisory=ADVS, --advisories=ADVS\n                        Include packages needed to fix the given advisory, in\n                        updates\n  --bzs=BZS             Include packages needed to fix the given BZ, in\n                        updates\n  --cves=CVES           Include packages needed to fix the given CVE, in\n                        updates\n  --sec-severity=SEVS, --secseverity=SEVS\n                        Include security relevant packages matching the\n                        severity, in updates\n\n  Plugin Options:\n</code></pre>\n","site":{"data":{}},"excerpt":"<p>yum时不时抽风？仓库获取不到最新资源？先理解yum是怎么工作的吧！</p>","more":"<h2 id=\"常用的储存库\"><a href=\"#常用的储存库\" class=\"headerlink\" title=\"常用的储存库\"></a>常用的储存库</h2><h2 id=\"要注意的坑\"><a href=\"#要注意的坑\" class=\"headerlink\" title=\"要注意的坑\"></a>要注意的坑</h2><ul>\n<li>储存库要启用了才有效</li>\n<li><code>yum repo</code> 只能显示已启用的储存库 显示全部需要<code>yum repolist all</code></li>\n<li>如果使用<code>yum-config-manager</code>配置仓库一定要记得保存</li>\n<li>配置完后记得要<code>yum makecache</code>建立缓存，如果不放心可以先<code>yum clean all</code>清除所有缓存</li>\n</ul>\n<p>&gt; 上面的坑我全部踩了</p>\n<h2 id=\"命令-yum-repolist-all\"><a href=\"#命令-yum-repolist-all\" class=\"headerlink\" title=\"命令 yum repolist all\"></a>命令 yum repolist all</h2><pre><code class=\"text\">Loaded plugins: fastestmirror\nLoading mirror speeds from cached hostfile\n * base: mirror.scalabledns.com\n * elrepo: repos.lax-noc.com\n * elrepo-extras: repos.lax-noc.com\n * elrepo-kernel: repos.lax-noc.com\n * extras: repos-lax.psychz.net\n * updates: repos-lax.psychz.net\nrepo id                       repo name                        status\n// 这些仓库应该是系统升级时留下来的\nC7.0.1406-base/x86_64         CentOS-7.0.1406 - Base           disabled\nC7.0.1406-centosplus/x86_64   CentOS-7.0.1406 - CentOSPlus     disabled\nC7.0.1406-extras/x86_64       CentOS-7.0.1406 - Extras         disabled\nC7.0.1406-fasttrack/x86_64    CentOS-7.0.1406 - Fasttrack      disabled\nC7.0.1406-updates/x86_64      CentOS-7.0.1406 - Updates        disabled\nC7.1.1503-base/x86_64         CentOS-7.1.1503 - Base           disabled\nC7.1.1503-centosplus/x86_64   CentOS-7.1.1503 - CentOSPlus     disabled\nC7.1.1503-extras/x86_64       CentOS-7.1.1503 - Extras         disabled\nC7.1.1503-fasttrack/x86_64    CentOS-7.1.1503 - Fasttrack      disabled\nC7.1.1503-updates/x86_64      CentOS-7.1.1503 - Updates        disabled\nC7.2.1511-base/x86_64         CentOS-7.2.1511 - Base           disabled\nC7.2.1511-centosplus/x86_64   CentOS-7.2.1511 - CentOSPlus     disabled\nC7.2.1511-extras/x86_64       CentOS-7.2.1511 - Extras         disabled\nC7.2.1511-fasttrack/x86_64    CentOS-7.2.1511 - Fasttrack      disabled\nC7.2.1511-updates/x86_64      CentOS-7.2.1511 - Updates        disabled\nC7.3.1611-base/x86_64         CentOS-7.3.1611 - Base           disabled\nC7.3.1611-centosplus/x86_64   CentOS-7.3.1611 - CentOSPlus     disabled\nC7.3.1611-extras/x86_64       CentOS-7.3.1611 - Extras         disabled\nC7.3.1611-fasttrack/x86_64    CentOS-7.3.1611 - Fasttrack      disabled\nC7.3.1611-updates/x86_64      CentOS-7.3.1611 - Updates        disabled\nC7.4.1708-base/x86_64         CentOS-7.4.1708 - Base           disabled\nC7.4.1708-centosplus/x86_64   CentOS-7.4.1708 - CentOSPlus     disabled\nC7.4.1708-extras/x86_64       CentOS-7.4.1708 - Extras         disabled\nC7.4.1708-fasttrack/x86_64    CentOS-7.4.1708 - Fasttrack      disabled\nC7.4.1708-updates/x86_64      CentOS-7.4.1708 - Updates        disabled\nC7.5.1804-base/x86_64         CentOS-7.5.1804 - Base           disabled\nC7.5.1804-centosplus/x86_64   CentOS-7.5.1804 - CentOSPlus     disabled\nC7.5.1804-extras/x86_64       CentOS-7.5.1804 - Extras         disabled\nC7.5.1804-fasttrack/x86_64    CentOS-7.5.1804 - Fasttrack      disabled\nC7.5.1804-updates/x86_64      CentOS-7.5.1804 - Updates        disabled\nC7.6.1810-base/x86_64         CentOS-7.6.1810 - Base           disabled\nC7.6.1810-centosplus/x86_64   CentOS-7.6.1810 - CentOSPlus     disabled\nC7.6.1810-extras/x86_64       CentOS-7.6.1810 - Extras         disabled\nC7.6.1810-fasttrack/x86_64    CentOS-7.6.1810 - Fasttrack      disabled\nC7.6.1810-updates/x86_64      CentOS-7.6.1810 - Updates        disabled\n// centos7核心库 源码库和开发库的源就不开了\nbase/7/x86_64                 CentOS-7 - Base                  enabled: 10,096+1\nbase-debuginfo/x86_64         CentOS-7 - Debuginfo             disabled\nbase-source/7                 CentOS-7 - Base Sources          disabled\n// 看上去是多媒体相关的库 没桌面环境应该是用不上了\nc7-media                      CentOS-7 - Media                 disabled\n// 这个源主要是用来替换base源的，其中有不少包是base源的增强版\n// 但是如果开启这个源部分包可能会于base冲突 \n// 需要在base源中exclude 或者使用yum-plugin-priorities插件来保证兼容性\n// 引用WIKI: https://wiki.centos.org/zh/AdditionalResources/Repositories/CentOSPlus\ncentosplus/7/x86_64           CentOS-7 - Plus                  disabled\ncentosplus-source/7           CentOS-7 - Plus Sources          disabled\n// cr = Continuous Release 下次发布内容 相当于beta版了\ncr/7/x86_64                   CentOS-7 - cr                    disabled\n// elrepo = The Community Enterprise Linux Repository\n// http://elrepo.org 从描述中可以看出是驱动包 如果有UI可能要开\nelrepo                        ELRepo.org Community Enterprise  enabled:      147\nelrepo-extras                 ELRepo.org Community Enterprise  enabled:       19\nelrepo-kernel                 ELRepo.org Community Enterprise  enabled:       37\nelrepo-testing                ELRepo.org Community Enterprise  disabled\n// 这个源要开啊 EPEL仓库 相当多常用的软件都在里面\n// https://fedoraproject.org/\nepel/x86_64                   Extra Packages for Enterprise Li disabled\nepel-debuginfo/x86_64         Extra Packages for Enterprise Li disabled\nepel-source/x86_64            Extra Packages for Enterprise Li disabled\nepel-testing/x86_64           Extra Packages for Enterprise Li disabled\nepel-testing-debuginfo/x86_64 Extra Packages for Enterprise Li disabled\nepel-testing-source/x86_64    Extra Packages for Enterprise Li disabled\nextras/7/x86_64               CentOS-7 - Extras                enabled:      305\nextras-source/7               CentOS-7 - Extras Sources        disabled\nfasttrack/7/x86_64            CentOS-7 - fasttrack             disabled\nupdates/7/x86_64              CentOS-7 - Updates               enabled:    733+5\nupdates-source/7              CentOS-7 - Updates Sources       disabled\nrepolist: 11,337</code></pre>\n<h2 id=\"命令-yum-config-manager-yum配置管理器\"><a href=\"#命令-yum-config-manager-yum配置管理器\" class=\"headerlink\" title=\"命令 yum-config-manager [yum配置管理器]\"></a>命令 yum-config-manager [yum配置管理器]</h2><pre><code class=\"text\">Loaded plugins: fastestmirror\nUsage: yum-config-manager [options] [section ...]\n\nOptions:\n  Plugin Options:\n\n  Yum Base Options:\n    -h, --help          show this help message and exit\n    -t, --tolerant      be tolerant of errors\n    // 完全从系统缓存运行，不更新缓存\n    -C, --cacheonly     run entirely from system cache, don&#39;t update cache\n    -c [config file], --config=[config file]\n                        config file location\n    -R [minutes], --randomwait=[minutes]\n                        maximum command wait time\n    -d [debug level], --debuglevel=[debug level]\n                        debugging output level\n    --showduplicates    show duplicates, in repos, in list/search commands\n    -e [error level], --errorlevel=[error level]\n                        error output level\n    --rpmverbosity=[debug level name]\n                        debugging output level for rpm\n    -q, --quiet         quiet operation\n    -v, --verbose       verbose operation\n    -y, --assumeyes     answer yes for all questions\n    --assumeno          answer no for all questions\n    --version           show Yum version and exit\n    --installroot=[path]\n                        set install root\n    --enablerepo=[repo]\n                        // 启用储存库\n                        enable one or more repositories (wildcards allowed)\n    --disablerepo=[repo]\n                        disable one or more repositories (wildcards allowed)\n    -x [package], --exclude=[package]\n                        exclude package(s) by name or glob\n    --disableexcludes=[repo]\n                        disable exclude from main, for a repo or for\n                        everything\n    --disableincludes=[repo]\n                        disable includepkgs for a repo or for everything\n    --obsoletes         enable obsoletes processing during updates\n    --noplugins         disable Yum plugins\n    --nogpgcheck        disable gpg signature checking\n    --disableplugin=[plugin]\n                        disable plugins by name\n    --enableplugin=[plugin]\n                        enable plugins by name\n    --skip-broken       skip packages with depsolving problems\n    --color=COLOR       control whether color is used\n    --releasever=RELEASEVER\n                        set value of $releasever in yum config and repo files\n    --downloadonly      don&#39;t update, just download\n    --downloaddir=DLDIR\n                        specifies an alternate directory to store packages\n    --setopt=SETOPTS    set arbitrary config and repo options\n    --bugfix            Include bugfix relevant packages, in updates\n    --security          Include security relevant packages, in updates\n    --advisory=ADVS, --advisories=ADVS\n                        Include packages needed to fix the given advisory, in\n                        updates\n    --bzs=BZS           Include packages needed to fix the given BZ, in\n                        updates\n    --cves=CVES         Include packages needed to fix the given CVE, in\n                        updates\n    --sec-severity=SEVS, --secseverity=SEVS\n                        Include security relevant packages matching the\n                        severity, in updates\n\n  yum-config-manager options:\n    // 保存当前设置\n    --save              save the current options (useful with --setopt)\n    // 启用仓库 (自动保存)\n    --enable            enable the specified repos (automatically saves)\n    // 禁用仓库 (自动保存)\n    --disable           disable the specified repos (automatically saves)\n    // 从文件或URL添加仓库 (并启用)\n    --add-repo=ADDREPO  add (and enable) the repo from the specified file or\n                        url\n</code></pre>\n<h2 id=\"命令-yum\"><a href=\"#命令-yum\" class=\"headerlink\" title=\"命令 yum\"></a>命令 yum</h2><pre><code class=\"text\">Loaded plugins: fastestmirror\nUsage: yum [options] COMMAND\n\nList of Commands:\n\ncheck          Check for problems in the rpmdb\ncheck-update   Check for available package updates\nclean          Remove cached data\ndeplist        List a package&#39;s dependencies\ndistribution-synchronization Synchronize installed packages to the latest available versions\ndowngrade      downgrade a package\nerase          Remove a package or packages from your system\nfs             Acts on the filesystem data of the host, mainly for removing docs/lanuages for minimal hosts.\nfssnapshot     Creates filesystem snapshots, or lists/deletes current snapshots.\ngroups         Display, or use, the groups information\nhelp           Display a helpful usage message\nhistory        Display, or use, the transaction history\ninfo           Display details about a package or group of packages\ninstall        Install a package or packages on your system\nlist           List a package or groups of packages\nload-transaction load a saved transaction from filename\nmakecache      Generate the metadata cache\nprovides       Find what package provides the given value\nreinstall      reinstall a package\nrepo-pkgs      Treat a repo. as a group of packages, so we can install/remove all of them\nrepolist       Display the configured software repositories\nsearch         Search package details for the given string\nshell          Run an interactive yum shell\nswap           Simple way to swap packages, instead of using shell\nupdate         Update a package or packages on your system\nupdate-minimal Works like upgrade, but goes to the &#39;newest&#39; package match which fixes a problem that affects your system\nupdateinfo     Acts on repository update information\nupgrade        Update packages taking obsoletes into account\nversion        Display a version for the machine and/or available repos.\n\n\nOptions:\n  -h, --help            show this help message and exit\n  -t, --tolerant        be tolerant of errors\n  -C, --cacheonly       run entirely from system cache, don&#39;t update cache\n  -c [config file], --config=[config file]\n                        config file location\n  -R [minutes], --randomwait=[minutes]\n                        maximum command wait time\n  -d [debug level], --debuglevel=[debug level]\n                        debugging output level\n  --showduplicates      show duplicates, in repos, in list/search commands\n  -e [error level], --errorlevel=[error level]\n                        error output level\n  --rpmverbosity=[debug level name]\n                        debugging output level for rpm\n  -q, --quiet           quiet operation\n  -v, --verbose         verbose operation\n  -y, --assumeyes       answer yes for all questions\n  --assumeno            answer no for all questions\n  --version             show Yum version and exit\n  --installroot=[path]  set install root\n  --enablerepo=[repo]   enable one or more repositories (wildcards allowed)\n  --disablerepo=[repo]  disable one or more repositories (wildcards allowed)\n  -x [package], --exclude=[package]\n                        exclude package(s) by name or glob\n  --disableexcludes=[repo]\n                        disable exclude from main, for a repo or for\n                        everything\n  --disableincludes=[repo]\n                        disable includepkgs for a repo or for everything\n  --obsoletes           enable obsoletes processing during updates\n  --noplugins           disable Yum plugins\n  --nogpgcheck          disable gpg signature checking\n  --disableplugin=[plugin]\n                        disable plugins by name\n  --enableplugin=[plugin]\n                        enable plugins by name\n  --skip-broken         skip packages with depsolving problems\n  --color=COLOR         control whether color is used\n  --releasever=RELEASEVER\n                        set value of $releasever in yum config and repo files\n  --downloadonly        don&#39;t update, just download\n  --downloaddir=DLDIR   specifies an alternate directory to store packages\n  --setopt=SETOPTS      set arbitrary config and repo options\n  --bugfix              Include bugfix relevant packages, in updates\n  --security            Include security relevant packages, in updates\n  --advisory=ADVS, --advisories=ADVS\n                        Include packages needed to fix the given advisory, in\n                        updates\n  --bzs=BZS             Include packages needed to fix the given BZ, in\n                        updates\n  --cves=CVES           Include packages needed to fix the given CVE, in\n                        updates\n  --sec-severity=SEVS, --secseverity=SEVS\n                        Include security relevant packages matching the\n                        severity, in updates\n\n  Plugin Options:\n</code></pre>"},{"title":"SpringBoot中的redis密码问题","date":"2019-05-13T04:03:01.000Z","updated":"2020-02-20T07:41:36.000Z","comments":1,"_content":"\n很简单的一个问题，花了大力气去解决。重要的是解决问题的方式和思路。\n<!--more-->\n\n## 出现问题\n \n出问题的配置如下\n\n\n---\n\napplication.yml\n\n```yml\nspring:\n  redis:\n    # REDIS_URL\n    url: redis://192.168.1.233:6379\n    # 如果有密码\n    password: testpassword123\n    # 存储到分区1\n    database: 1\n    # 默认超时2000\n    timeout: 3000\n\n\n```\n\n\n报错的日志\n\n```log\n[20190827 20:42:53] ERROR 7900 --- [nio-8086-exec-2] c.z.v.d.a.c.mvc.GlobalExceptionHandler   : Unable to connect to Redis; nested exception is io.lettuce.core.RedisCommandExecutionException: NOAUTH Authentication required.\n\norg.springframework.data.redis.RedisConnectionFailureException: Unable to connect to Redis; nested exception is io.lettuce.core.RedisCommandExecutionException: NOAUTH Authentication required.\n\tat org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getNativeConnection(LettuceConnectionFactory.java:1092)\n\tat org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getConnection(LettuceConnectionFactory.java:1065)\n\tat org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getSharedConnection(LettuceConnectionFactory.java:865)\n\tat org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getConnection(LettuceConnectionFactory.java:340)\n\tat org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:238)\n\tat org.springframework.data.redis.cache.DefaultRedisCacheWriter.get(DefaultRedisCacheWriter.java:109)\n\tat org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:82)\n\tat org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58)\n\tat org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73)\n\tat org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:554)\n\tat org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:519)\n\tat org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:401)\n\tat org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345)\n\tat org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)\n\tat com.zunchen.video.dmp.service.impl.onvif.OnvifDeviceCacheServiceImpl$EnhancerBySpringCGLIB$913f47a3.connectOnvifDevice(<generated>)\n\tat com.zunchen.video.dmp.admin.api.ConnectDeviceApiController.connect(ConnectDeviceApiController.java:36)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:215)\n\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:142)\n\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)\n\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:998)\n\tat org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:890)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:634)\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:875)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:741)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:90)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:154)\n\tat org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:122)\n\tat org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:107)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\n\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:770)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: io.lettuce.core.RedisCommandExecutionException: NOAUTH Authentication required.\n\tat io.lettuce.core.ExceptionFactory.createExecutionException(ExceptionFactory.java:135)\n\tat io.lettuce.core.LettuceFutures.awaitOrCancel(LettuceFutures.java:122)\n\tat io.lettuce.core.AbstractRedisAsyncCommands.select(AbstractRedisAsyncCommands.java:1194)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat io.lettuce.core.FutureSyncInvocationHandler.handleInvocation(FutureSyncInvocationHandler.java:57)\n\tat io.lettuce.core.internal.AbstractInvocationHandler.invoke(AbstractInvocationHandler.java:80)\n\tat com.sun.proxy.$Proxy206.select(Unknown Source)\n\tat org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getNativeConnection(LettuceConnectionFactory.java:1087)\n\t... 69 common frames omitted\n```\n\n## 查询资料\n\n - [spring boot 配置redis 报错 NOAUTH Authentication required](https://bbs.csdn.net/topics/392009425)\n - [springboot整合redis报错NOAUTH Authentication required.解决方案](https://www.twblogs.net/a/5b7e13012b717768385523f9/zh-cn)\n \n### 归纳\n  大多解决方案都是通过配置注入的RedisConfig来setPassword解决的，SpringBoot未注入密码的原因仍然不明。\n\n## 原因探究\n\n### 原因分析\n\n  由报错信息可以看出，最终抛出的异常是io.lettuce.core.RedisCommandExecutionException，其中lettuce不知道是什么。\n\n  通过查阅资料 [高级的 Redis Java 客户端 Lettuce](https://toutiao.io/posts/pknpcs/preview) 得知lettuce是springboot2.0中用来代替jedis的新的redis客户端。\n\n  那为何lettuce为何会报错呢？这是我最大的疑惑，我决定去spring.redis的自动配置类中看看到底发生了什么\n\n### 源码跟踪\n\n&gt; spring.redis的自动配置包：org.springframework.boot.autoconfigure.data.redis\n\n![](leanote://file/getImage?fileId=5d847766e1488a763c000011)\n\n看着这个目录结构，第一反应直奔LettuceConnectionConfiguration中去看源码。\n\n![](leanote://file/getImage?fileId=5d84778be1488a763c000012)\n\n在其构造方法处打断点发现是拿到了密码的，发现同类下有一方法createLettuceConnectionFactory();明显是创建连接工厂的方法，断点套上去。\n\n![](leanote://file/getImage?fileId=5d8477a7e1488a763c000013)\n\n这个方法中干了啥，它看了看配置文件中有没有包含${spring.redis.sentinel}和${spring.redis.cluster}的配置，如果有就拿对应的配置去创建连接工厂。但是yml中既没有配置哨兵模式也没有配置集群模式，所以进入独立模式getStandaloneConfig();\n\n![](leanote://file/getImage?fileId=5d8478d0e1488a763c000014)\n\n顺手计算一下，看看standaloneConfig长什么样子…..嗯???!!!……密码呢？……发生了啥？\n\n![](leanote://file/getImage?fileId=5d8478e8e1488a763c000015)\n\n问题找到了，感觉自己好蠢。\n\n## 解决问题\n\n### 修改配置\n\n```yml\nspring:\n  redis:\n    # REDIS_URL 中自己带上密码\n    # Connection URL. Overrides host, port, and password. User is ignored. Example:\n    # redis://user:password@example.com:6379\n    # url: redis://UserIsIgnored:testpassword123@192.168.1.233:6379\n    # HOST 和 PASSWORD 是一套配置\n    host: 192.168.1.233\n    # 如果有密码 （用于RedisTemplate ，Lettuce不会拿这个password）\n    password: testpassword123\n    # 存储到分区1\n    database: 1\n    # 默认超时2000\n    timeout: 3000\n```\n\n修改后启动：\n\n```log\n[20190828 03:15:04] ERROR 8564 --- [nio-8086-exec-2] c.z.v.d.a.c.mvc.GlobalExceptionHandler   : Unable to connect to Redis; nested exception is io.lettuce.core.RedisCommandExecutionException: NOAUTH Authentication required.\n\norg.springframework.data.redis.RedisConnectionFailureException: Unable to connect to Redis; nested exception is io.lettuce.core.RedisCommandExecutionException: NOAUTH Authentication required.\n\tat org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getNativeConnection(LettuceConnectionFactory.java:1092)\n\tat org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getConnection(LettuceConnectionFactory.java:1065)\n\tat org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getSharedConnection(LettuceConnectionFactory.java:865)\n\tat org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getConnection(LettuceConnectionFactory.java:340)\n\tat org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:238)\n\tat org.springframework.data.redis.cache.DefaultRedisCacheWriter.get(DefaultRedisCacheWriter.java:109)\n\tat org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:82)\n\tat org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58)\n\tat org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73)\n\tat org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:554)\n\tat org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:519)\n\tat org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:401)\n\tat org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345)\n\tat org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)\n\tat com.zunchen.video.dmp.service.impl.onvif.OnvifDeviceCacheServiceImpl$EnhancerBySpringCGLIB$b001f767.connectOnvifDevice(<generated>)\n\tat com.zunchen.video.dmp.admin.api.ConnectDeviceApiController.connect(ConnectDeviceApiController.java:36)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:215)\n\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:142)\n\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)\n\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:998)\n\tat org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:890)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:634)\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:875)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:741)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:90)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:154)\n\tat org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:122)\n\tat org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:107)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\n\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:770)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\tat java.lang.Thread.run(Thread.java:748)\n```\n\n仍然在报错，这下尴尬了。\n\n\n### 再次解决问题\n\n![](leanote://file/getImage?fileId=5d847965e1488a763c000016)\n\n径直来到报错信息提示的地方，估计是红框出出现了异常。此处调用的是接口方法，不知道进了那个方法，没关系，打个断点强制步入。\n\n![](leanote://file/getImage?fileId=5d847984e1488a763c000017)\n\n有点懒，不想解释了，直接画图，发现是redisURISupplier中的password仍然是空的。不想知道为什么了，我只想解决问题。源码点过去看下。\n\n![](leanote://file/getImage?fileId=5d847996e1488a763c000018)\n\n 查看该类的构造方法，这个东西正在解析RedisURI，那RedisURI哪儿来的呢？配置里配的呗。\n \n## 成功解决问题\n\n```yml\nspring:\n  redis:\n    # REDIS_URL 中自己带上密码\n    # Connection URL. Overrides host, port, and password. User is ignored. Example:\n    # redis://user:password@example.com:6379\n    url: redis://UserIsIgnored:testpassword123@192.168.1.233:6379\n    # HOST 和 PASSWORD 是一套配置\n    # host: 192.168.1.233\n    # 如果有密码 （用于RedisTemplate ，Lettuce不会拿这个password）\n    # password: testpassword123\n    # 存储到分区1\n    database: 1\n    # 默认超时2000\n    timeout: 3000\n```\n\n这次好了，redis成功连接。大功告成。\n\n\n\n\n\n\n","source":"_posts/SpringBoot中的redis密码问题.md","raw":"---\ntitle: 'SpringBoot中的redis密码问题'\ndate: 2019/05/13 12:03:01\nupdated: 2020/2/20 15:41:36\ncomments: true\ncategories: \n    - [我永远爱学习]\ntags: \n    - spring\n    - java\n    - dubug\n---\n\n很简单的一个问题，花了大力气去解决。重要的是解决问题的方式和思路。\n<!--more-->\n\n## 出现问题\n \n出问题的配置如下\n\n\n---\n\napplication.yml\n\n```yml\nspring:\n  redis:\n    # REDIS_URL\n    url: redis://192.168.1.233:6379\n    # 如果有密码\n    password: testpassword123\n    # 存储到分区1\n    database: 1\n    # 默认超时2000\n    timeout: 3000\n\n\n```\n\n\n报错的日志\n\n```log\n[20190827 20:42:53] ERROR 7900 --- [nio-8086-exec-2] c.z.v.d.a.c.mvc.GlobalExceptionHandler   : Unable to connect to Redis; nested exception is io.lettuce.core.RedisCommandExecutionException: NOAUTH Authentication required.\n\norg.springframework.data.redis.RedisConnectionFailureException: Unable to connect to Redis; nested exception is io.lettuce.core.RedisCommandExecutionException: NOAUTH Authentication required.\n\tat org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getNativeConnection(LettuceConnectionFactory.java:1092)\n\tat org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getConnection(LettuceConnectionFactory.java:1065)\n\tat org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getSharedConnection(LettuceConnectionFactory.java:865)\n\tat org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getConnection(LettuceConnectionFactory.java:340)\n\tat org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:238)\n\tat org.springframework.data.redis.cache.DefaultRedisCacheWriter.get(DefaultRedisCacheWriter.java:109)\n\tat org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:82)\n\tat org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58)\n\tat org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73)\n\tat org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:554)\n\tat org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:519)\n\tat org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:401)\n\tat org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345)\n\tat org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)\n\tat com.zunchen.video.dmp.service.impl.onvif.OnvifDeviceCacheServiceImpl$EnhancerBySpringCGLIB$913f47a3.connectOnvifDevice(<generated>)\n\tat com.zunchen.video.dmp.admin.api.ConnectDeviceApiController.connect(ConnectDeviceApiController.java:36)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:215)\n\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:142)\n\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)\n\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:998)\n\tat org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:890)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:634)\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:875)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:741)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:90)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:154)\n\tat org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:122)\n\tat org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:107)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\n\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:770)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: io.lettuce.core.RedisCommandExecutionException: NOAUTH Authentication required.\n\tat io.lettuce.core.ExceptionFactory.createExecutionException(ExceptionFactory.java:135)\n\tat io.lettuce.core.LettuceFutures.awaitOrCancel(LettuceFutures.java:122)\n\tat io.lettuce.core.AbstractRedisAsyncCommands.select(AbstractRedisAsyncCommands.java:1194)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat io.lettuce.core.FutureSyncInvocationHandler.handleInvocation(FutureSyncInvocationHandler.java:57)\n\tat io.lettuce.core.internal.AbstractInvocationHandler.invoke(AbstractInvocationHandler.java:80)\n\tat com.sun.proxy.$Proxy206.select(Unknown Source)\n\tat org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getNativeConnection(LettuceConnectionFactory.java:1087)\n\t... 69 common frames omitted\n```\n\n## 查询资料\n\n - [spring boot 配置redis 报错 NOAUTH Authentication required](https://bbs.csdn.net/topics/392009425)\n - [springboot整合redis报错NOAUTH Authentication required.解决方案](https://www.twblogs.net/a/5b7e13012b717768385523f9/zh-cn)\n \n### 归纳\n  大多解决方案都是通过配置注入的RedisConfig来setPassword解决的，SpringBoot未注入密码的原因仍然不明。\n\n## 原因探究\n\n### 原因分析\n\n  由报错信息可以看出，最终抛出的异常是io.lettuce.core.RedisCommandExecutionException，其中lettuce不知道是什么。\n\n  通过查阅资料 [高级的 Redis Java 客户端 Lettuce](https://toutiao.io/posts/pknpcs/preview) 得知lettuce是springboot2.0中用来代替jedis的新的redis客户端。\n\n  那为何lettuce为何会报错呢？这是我最大的疑惑，我决定去spring.redis的自动配置类中看看到底发生了什么\n\n### 源码跟踪\n\n&gt; spring.redis的自动配置包：org.springframework.boot.autoconfigure.data.redis\n\n![](leanote://file/getImage?fileId=5d847766e1488a763c000011)\n\n看着这个目录结构，第一反应直奔LettuceConnectionConfiguration中去看源码。\n\n![](leanote://file/getImage?fileId=5d84778be1488a763c000012)\n\n在其构造方法处打断点发现是拿到了密码的，发现同类下有一方法createLettuceConnectionFactory();明显是创建连接工厂的方法，断点套上去。\n\n![](leanote://file/getImage?fileId=5d8477a7e1488a763c000013)\n\n这个方法中干了啥，它看了看配置文件中有没有包含${spring.redis.sentinel}和${spring.redis.cluster}的配置，如果有就拿对应的配置去创建连接工厂。但是yml中既没有配置哨兵模式也没有配置集群模式，所以进入独立模式getStandaloneConfig();\n\n![](leanote://file/getImage?fileId=5d8478d0e1488a763c000014)\n\n顺手计算一下，看看standaloneConfig长什么样子…..嗯???!!!……密码呢？……发生了啥？\n\n![](leanote://file/getImage?fileId=5d8478e8e1488a763c000015)\n\n问题找到了，感觉自己好蠢。\n\n## 解决问题\n\n### 修改配置\n\n```yml\nspring:\n  redis:\n    # REDIS_URL 中自己带上密码\n    # Connection URL. Overrides host, port, and password. User is ignored. Example:\n    # redis://user:password@example.com:6379\n    # url: redis://UserIsIgnored:testpassword123@192.168.1.233:6379\n    # HOST 和 PASSWORD 是一套配置\n    host: 192.168.1.233\n    # 如果有密码 （用于RedisTemplate ，Lettuce不会拿这个password）\n    password: testpassword123\n    # 存储到分区1\n    database: 1\n    # 默认超时2000\n    timeout: 3000\n```\n\n修改后启动：\n\n```log\n[20190828 03:15:04] ERROR 8564 --- [nio-8086-exec-2] c.z.v.d.a.c.mvc.GlobalExceptionHandler   : Unable to connect to Redis; nested exception is io.lettuce.core.RedisCommandExecutionException: NOAUTH Authentication required.\n\norg.springframework.data.redis.RedisConnectionFailureException: Unable to connect to Redis; nested exception is io.lettuce.core.RedisCommandExecutionException: NOAUTH Authentication required.\n\tat org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getNativeConnection(LettuceConnectionFactory.java:1092)\n\tat org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getConnection(LettuceConnectionFactory.java:1065)\n\tat org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getSharedConnection(LettuceConnectionFactory.java:865)\n\tat org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getConnection(LettuceConnectionFactory.java:340)\n\tat org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:238)\n\tat org.springframework.data.redis.cache.DefaultRedisCacheWriter.get(DefaultRedisCacheWriter.java:109)\n\tat org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:82)\n\tat org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58)\n\tat org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73)\n\tat org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:554)\n\tat org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:519)\n\tat org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:401)\n\tat org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345)\n\tat org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)\n\tat com.zunchen.video.dmp.service.impl.onvif.OnvifDeviceCacheServiceImpl$EnhancerBySpringCGLIB$b001f767.connectOnvifDevice(<generated>)\n\tat com.zunchen.video.dmp.admin.api.ConnectDeviceApiController.connect(ConnectDeviceApiController.java:36)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:215)\n\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:142)\n\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)\n\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:998)\n\tat org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:890)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:634)\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:875)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:741)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:90)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:154)\n\tat org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:122)\n\tat org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:107)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\n\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:770)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\tat java.lang.Thread.run(Thread.java:748)\n```\n\n仍然在报错，这下尴尬了。\n\n\n### 再次解决问题\n\n![](leanote://file/getImage?fileId=5d847965e1488a763c000016)\n\n径直来到报错信息提示的地方，估计是红框出出现了异常。此处调用的是接口方法，不知道进了那个方法，没关系，打个断点强制步入。\n\n![](leanote://file/getImage?fileId=5d847984e1488a763c000017)\n\n有点懒，不想解释了，直接画图，发现是redisURISupplier中的password仍然是空的。不想知道为什么了，我只想解决问题。源码点过去看下。\n\n![](leanote://file/getImage?fileId=5d847996e1488a763c000018)\n\n 查看该类的构造方法，这个东西正在解析RedisURI，那RedisURI哪儿来的呢？配置里配的呗。\n \n## 成功解决问题\n\n```yml\nspring:\n  redis:\n    # REDIS_URL 中自己带上密码\n    # Connection URL. Overrides host, port, and password. User is ignored. Example:\n    # redis://user:password@example.com:6379\n    url: redis://UserIsIgnored:testpassword123@192.168.1.233:6379\n    # HOST 和 PASSWORD 是一套配置\n    # host: 192.168.1.233\n    # 如果有密码 （用于RedisTemplate ，Lettuce不会拿这个password）\n    # password: testpassword123\n    # 存储到分区1\n    database: 1\n    # 默认超时2000\n    timeout: 3000\n```\n\n这次好了，redis成功连接。大功告成。\n\n\n\n\n\n\n","slug":"SpringBoot中的redis密码问题","published":1,"_id":"ckacfrpdp001js04tbdd82e62","layout":"post","photos":[],"link":"","content":"<p>很简单的一个问题，花了大力气去解决。重要的是解决问题的方式和思路。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"出现问题\"><a href=\"#出现问题\" class=\"headerlink\" title=\"出现问题\"></a>出现问题</h2><p>出问题的配置如下</p>\n<hr>\n<p>application.yml</p>\n<pre><code class=\"yml\">spring:\n  redis:\n    # REDIS_URL\n    url: redis://192.168.1.233:6379\n    # 如果有密码\n    password: testpassword123\n    # 存储到分区1\n    database: 1\n    # 默认超时2000\n    timeout: 3000\n\n</code></pre>\n<p>报错的日志</p>\n<pre><code class=\"log\">[20190827 20:42:53] ERROR 7900 --- [nio-8086-exec-2] c.z.v.d.a.c.mvc.GlobalExceptionHandler   : Unable to connect to Redis; nested exception is io.lettuce.core.RedisCommandExecutionException: NOAUTH Authentication required.\n\norg.springframework.data.redis.RedisConnectionFailureException: Unable to connect to Redis; nested exception is io.lettuce.core.RedisCommandExecutionException: NOAUTH Authentication required.\n    at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getNativeConnection(LettuceConnectionFactory.java:1092)\n    at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getConnection(LettuceConnectionFactory.java:1065)\n    at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getSharedConnection(LettuceConnectionFactory.java:865)\n    at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getConnection(LettuceConnectionFactory.java:340)\n    at org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:238)\n    at org.springframework.data.redis.cache.DefaultRedisCacheWriter.get(DefaultRedisCacheWriter.java:109)\n    at org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:82)\n    at org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58)\n    at org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73)\n    at org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:554)\n    at org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:519)\n    at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:401)\n    at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345)\n    at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n    at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)\n    at com.zunchen.video.dmp.service.impl.onvif.OnvifDeviceCacheServiceImpl$EnhancerBySpringCGLIB$913f47a3.connectOnvifDevice(&lt;generated&gt;)\n    at com.zunchen.video.dmp.admin.api.ConnectDeviceApiController.connect(ConnectDeviceApiController.java:36)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:215)\n    at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:142)\n    at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)\n    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)\n    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)\n    at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\n    at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)\n    at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)\n    at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:998)\n    at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:890)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)\n    at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:875)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n    at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n    at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:90)\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n    at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:154)\n    at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:122)\n    at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:107)\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n    at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)\n    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)\n    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)\n    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)\n    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\n    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\n    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\n    at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)\n    at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)\n    at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:770)\n    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)\n    at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n    at java.lang.Thread.run(Thread.java:748)\nCaused by: io.lettuce.core.RedisCommandExecutionException: NOAUTH Authentication required.\n    at io.lettuce.core.ExceptionFactory.createExecutionException(ExceptionFactory.java:135)\n    at io.lettuce.core.LettuceFutures.awaitOrCancel(LettuceFutures.java:122)\n    at io.lettuce.core.AbstractRedisAsyncCommands.select(AbstractRedisAsyncCommands.java:1194)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at io.lettuce.core.FutureSyncInvocationHandler.handleInvocation(FutureSyncInvocationHandler.java:57)\n    at io.lettuce.core.internal.AbstractInvocationHandler.invoke(AbstractInvocationHandler.java:80)\n    at com.sun.proxy.$Proxy206.select(Unknown Source)\n    at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getNativeConnection(LettuceConnectionFactory.java:1087)\n    ... 69 common frames omitted</code></pre>\n<h2 id=\"查询资料\"><a href=\"#查询资料\" class=\"headerlink\" title=\"查询资料\"></a>查询资料</h2><ul>\n<li><a href=\"https://bbs.csdn.net/topics/392009425\" target=\"_blank\" rel=\"noopener\">spring boot 配置redis 报错 NOAUTH Authentication required</a></li>\n<li><a href=\"https://www.twblogs.net/a/5b7e13012b717768385523f9/zh-cn\" target=\"_blank\" rel=\"noopener\">springboot整合redis报错NOAUTH Authentication required.解决方案</a></li>\n</ul>\n<h3 id=\"归纳\"><a href=\"#归纳\" class=\"headerlink\" title=\"归纳\"></a>归纳</h3><p>  大多解决方案都是通过配置注入的RedisConfig来setPassword解决的，SpringBoot未注入密码的原因仍然不明。</p>\n<h2 id=\"原因探究\"><a href=\"#原因探究\" class=\"headerlink\" title=\"原因探究\"></a>原因探究</h2><h3 id=\"原因分析\"><a href=\"#原因分析\" class=\"headerlink\" title=\"原因分析\"></a>原因分析</h3><p>  由报错信息可以看出，最终抛出的异常是io.lettuce.core.RedisCommandExecutionException，其中lettuce不知道是什么。</p>\n<p>  通过查阅资料 <a href=\"https://toutiao.io/posts/pknpcs/preview\" target=\"_blank\" rel=\"noopener\">高级的 Redis Java 客户端 Lettuce</a> 得知lettuce是springboot2.0中用来代替jedis的新的redis客户端。</p>\n<p>  那为何lettuce为何会报错呢？这是我最大的疑惑，我决定去spring.redis的自动配置类中看看到底发生了什么</p>\n<h3 id=\"源码跟踪\"><a href=\"#源码跟踪\" class=\"headerlink\" title=\"源码跟踪\"></a>源码跟踪</h3><p>&gt; spring.redis的自动配置包：org.springframework.boot.autoconfigure.data.redis</p>\n<p><img src=\"leanote://file/getImage?fileId=5d847766e1488a763c000011\" alt=\"\"></p>\n<p>看着这个目录结构，第一反应直奔LettuceConnectionConfiguration中去看源码。</p>\n<p><img src=\"leanote://file/getImage?fileId=5d84778be1488a763c000012\" alt=\"\"></p>\n<p>在其构造方法处打断点发现是拿到了密码的，发现同类下有一方法createLettuceConnectionFactory();明显是创建连接工厂的方法，断点套上去。</p>\n<p><img src=\"leanote://file/getImage?fileId=5d8477a7e1488a763c000013\" alt=\"\"></p>\n<p>这个方法中干了啥，它看了看配置文件中有没有包含${spring.redis.sentinel}和${spring.redis.cluster}的配置，如果有就拿对应的配置去创建连接工厂。但是yml中既没有配置哨兵模式也没有配置集群模式，所以进入独立模式getStandaloneConfig();</p>\n<p><img src=\"leanote://file/getImage?fileId=5d8478d0e1488a763c000014\" alt=\"\"></p>\n<p>顺手计算一下，看看standaloneConfig长什么样子…..嗯???!!!……密码呢？……发生了啥？</p>\n<p><img src=\"leanote://file/getImage?fileId=5d8478e8e1488a763c000015\" alt=\"\"></p>\n<p>问题找到了，感觉自己好蠢。</p>\n<h2 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h2><h3 id=\"修改配置\"><a href=\"#修改配置\" class=\"headerlink\" title=\"修改配置\"></a>修改配置</h3><pre><code class=\"yml\">spring:\n  redis:\n    # REDIS_URL 中自己带上密码\n    # Connection URL. Overrides host, port, and password. User is ignored. Example:\n    # redis://user:password@example.com:6379\n    # url: redis://UserIsIgnored:testpassword123@192.168.1.233:6379\n    # HOST 和 PASSWORD 是一套配置\n    host: 192.168.1.233\n    # 如果有密码 （用于RedisTemplate ，Lettuce不会拿这个password）\n    password: testpassword123\n    # 存储到分区1\n    database: 1\n    # 默认超时2000\n    timeout: 3000</code></pre>\n<p>修改后启动：</p>\n<pre><code class=\"log\">[20190828 03:15:04] ERROR 8564 --- [nio-8086-exec-2] c.z.v.d.a.c.mvc.GlobalExceptionHandler   : Unable to connect to Redis; nested exception is io.lettuce.core.RedisCommandExecutionException: NOAUTH Authentication required.\n\norg.springframework.data.redis.RedisConnectionFailureException: Unable to connect to Redis; nested exception is io.lettuce.core.RedisCommandExecutionException: NOAUTH Authentication required.\n    at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getNativeConnection(LettuceConnectionFactory.java:1092)\n    at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getConnection(LettuceConnectionFactory.java:1065)\n    at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getSharedConnection(LettuceConnectionFactory.java:865)\n    at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getConnection(LettuceConnectionFactory.java:340)\n    at org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:238)\n    at org.springframework.data.redis.cache.DefaultRedisCacheWriter.get(DefaultRedisCacheWriter.java:109)\n    at org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:82)\n    at org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58)\n    at org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73)\n    at org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:554)\n    at org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:519)\n    at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:401)\n    at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345)\n    at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n    at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)\n    at com.zunchen.video.dmp.service.impl.onvif.OnvifDeviceCacheServiceImpl$EnhancerBySpringCGLIB$b001f767.connectOnvifDevice(&lt;generated&gt;)\n    at com.zunchen.video.dmp.admin.api.ConnectDeviceApiController.connect(ConnectDeviceApiController.java:36)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:215)\n    at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:142)\n    at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)\n    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)\n    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)\n    at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\n    at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)\n    at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)\n    at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:998)\n    at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:890)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)\n    at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:875)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n    at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n    at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:90)\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n    at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:154)\n    at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:122)\n    at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:107)\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n    at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)\n    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)\n    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)\n    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)\n    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\n    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\n    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\n    at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)\n    at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)\n    at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:770)\n    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)\n    at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n    at java.lang.Thread.run(Thread.java:748)</code></pre>\n<p>仍然在报错，这下尴尬了。</p>\n<h3 id=\"再次解决问题\"><a href=\"#再次解决问题\" class=\"headerlink\" title=\"再次解决问题\"></a>再次解决问题</h3><p><img src=\"leanote://file/getImage?fileId=5d847965e1488a763c000016\" alt=\"\"></p>\n<p>径直来到报错信息提示的地方，估计是红框出出现了异常。此处调用的是接口方法，不知道进了那个方法，没关系，打个断点强制步入。</p>\n<p><img src=\"leanote://file/getImage?fileId=5d847984e1488a763c000017\" alt=\"\"></p>\n<p>有点懒，不想解释了，直接画图，发现是redisURISupplier中的password仍然是空的。不想知道为什么了，我只想解决问题。源码点过去看下。</p>\n<p><img src=\"leanote://file/getImage?fileId=5d847996e1488a763c000018\" alt=\"\"></p>\n<p> 查看该类的构造方法，这个东西正在解析RedisURI，那RedisURI哪儿来的呢？配置里配的呗。\n </p>\n<h2 id=\"成功解决问题\"><a href=\"#成功解决问题\" class=\"headerlink\" title=\"成功解决问题\"></a>成功解决问题</h2><pre><code class=\"yml\">spring:\n  redis:\n    # REDIS_URL 中自己带上密码\n    # Connection URL. Overrides host, port, and password. User is ignored. Example:\n    # redis://user:password@example.com:6379\n    url: redis://UserIsIgnored:testpassword123@192.168.1.233:6379\n    # HOST 和 PASSWORD 是一套配置\n    # host: 192.168.1.233\n    # 如果有密码 （用于RedisTemplate ，Lettuce不会拿这个password）\n    # password: testpassword123\n    # 存储到分区1\n    database: 1\n    # 默认超时2000\n    timeout: 3000</code></pre>\n<p>这次好了，redis成功连接。大功告成。</p>\n","site":{"data":{}},"excerpt":"<p>很简单的一个问题，花了大力气去解决。重要的是解决问题的方式和思路。</p>","more":"<h2 id=\"出现问题\"><a href=\"#出现问题\" class=\"headerlink\" title=\"出现问题\"></a>出现问题</h2><p>出问题的配置如下</p>\n<hr>\n<p>application.yml</p>\n<pre><code class=\"yml\">spring:\n  redis:\n    # REDIS_URL\n    url: redis://192.168.1.233:6379\n    # 如果有密码\n    password: testpassword123\n    # 存储到分区1\n    database: 1\n    # 默认超时2000\n    timeout: 3000\n\n</code></pre>\n<p>报错的日志</p>\n<pre><code class=\"log\">[20190827 20:42:53] ERROR 7900 --- [nio-8086-exec-2] c.z.v.d.a.c.mvc.GlobalExceptionHandler   : Unable to connect to Redis; nested exception is io.lettuce.core.RedisCommandExecutionException: NOAUTH Authentication required.\n\norg.springframework.data.redis.RedisConnectionFailureException: Unable to connect to Redis; nested exception is io.lettuce.core.RedisCommandExecutionException: NOAUTH Authentication required.\n    at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getNativeConnection(LettuceConnectionFactory.java:1092)\n    at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getConnection(LettuceConnectionFactory.java:1065)\n    at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getSharedConnection(LettuceConnectionFactory.java:865)\n    at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getConnection(LettuceConnectionFactory.java:340)\n    at org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:238)\n    at org.springframework.data.redis.cache.DefaultRedisCacheWriter.get(DefaultRedisCacheWriter.java:109)\n    at org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:82)\n    at org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58)\n    at org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73)\n    at org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:554)\n    at org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:519)\n    at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:401)\n    at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345)\n    at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n    at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)\n    at com.zunchen.video.dmp.service.impl.onvif.OnvifDeviceCacheServiceImpl$EnhancerBySpringCGLIB$913f47a3.connectOnvifDevice(&lt;generated&gt;)\n    at com.zunchen.video.dmp.admin.api.ConnectDeviceApiController.connect(ConnectDeviceApiController.java:36)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:215)\n    at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:142)\n    at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)\n    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)\n    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)\n    at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\n    at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)\n    at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)\n    at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:998)\n    at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:890)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)\n    at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:875)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n    at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n    at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:90)\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n    at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:154)\n    at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:122)\n    at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:107)\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n    at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)\n    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)\n    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)\n    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)\n    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\n    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\n    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\n    at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)\n    at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)\n    at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:770)\n    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)\n    at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n    at java.lang.Thread.run(Thread.java:748)\nCaused by: io.lettuce.core.RedisCommandExecutionException: NOAUTH Authentication required.\n    at io.lettuce.core.ExceptionFactory.createExecutionException(ExceptionFactory.java:135)\n    at io.lettuce.core.LettuceFutures.awaitOrCancel(LettuceFutures.java:122)\n    at io.lettuce.core.AbstractRedisAsyncCommands.select(AbstractRedisAsyncCommands.java:1194)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at io.lettuce.core.FutureSyncInvocationHandler.handleInvocation(FutureSyncInvocationHandler.java:57)\n    at io.lettuce.core.internal.AbstractInvocationHandler.invoke(AbstractInvocationHandler.java:80)\n    at com.sun.proxy.$Proxy206.select(Unknown Source)\n    at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getNativeConnection(LettuceConnectionFactory.java:1087)\n    ... 69 common frames omitted</code></pre>\n<h2 id=\"查询资料\"><a href=\"#查询资料\" class=\"headerlink\" title=\"查询资料\"></a>查询资料</h2><ul>\n<li><a href=\"https://bbs.csdn.net/topics/392009425\" target=\"_blank\" rel=\"noopener\">spring boot 配置redis 报错 NOAUTH Authentication required</a></li>\n<li><a href=\"https://www.twblogs.net/a/5b7e13012b717768385523f9/zh-cn\" target=\"_blank\" rel=\"noopener\">springboot整合redis报错NOAUTH Authentication required.解决方案</a></li>\n</ul>\n<h3 id=\"归纳\"><a href=\"#归纳\" class=\"headerlink\" title=\"归纳\"></a>归纳</h3><p>  大多解决方案都是通过配置注入的RedisConfig来setPassword解决的，SpringBoot未注入密码的原因仍然不明。</p>\n<h2 id=\"原因探究\"><a href=\"#原因探究\" class=\"headerlink\" title=\"原因探究\"></a>原因探究</h2><h3 id=\"原因分析\"><a href=\"#原因分析\" class=\"headerlink\" title=\"原因分析\"></a>原因分析</h3><p>  由报错信息可以看出，最终抛出的异常是io.lettuce.core.RedisCommandExecutionException，其中lettuce不知道是什么。</p>\n<p>  通过查阅资料 <a href=\"https://toutiao.io/posts/pknpcs/preview\" target=\"_blank\" rel=\"noopener\">高级的 Redis Java 客户端 Lettuce</a> 得知lettuce是springboot2.0中用来代替jedis的新的redis客户端。</p>\n<p>  那为何lettuce为何会报错呢？这是我最大的疑惑，我决定去spring.redis的自动配置类中看看到底发生了什么</p>\n<h3 id=\"源码跟踪\"><a href=\"#源码跟踪\" class=\"headerlink\" title=\"源码跟踪\"></a>源码跟踪</h3><p>&gt; spring.redis的自动配置包：org.springframework.boot.autoconfigure.data.redis</p>\n<p><img src=\"leanote://file/getImage?fileId=5d847766e1488a763c000011\" alt=\"\"></p>\n<p>看着这个目录结构，第一反应直奔LettuceConnectionConfiguration中去看源码。</p>\n<p><img src=\"leanote://file/getImage?fileId=5d84778be1488a763c000012\" alt=\"\"></p>\n<p>在其构造方法处打断点发现是拿到了密码的，发现同类下有一方法createLettuceConnectionFactory();明显是创建连接工厂的方法，断点套上去。</p>\n<p><img src=\"leanote://file/getImage?fileId=5d8477a7e1488a763c000013\" alt=\"\"></p>\n<p>这个方法中干了啥，它看了看配置文件中有没有包含${spring.redis.sentinel}和${spring.redis.cluster}的配置，如果有就拿对应的配置去创建连接工厂。但是yml中既没有配置哨兵模式也没有配置集群模式，所以进入独立模式getStandaloneConfig();</p>\n<p><img src=\"leanote://file/getImage?fileId=5d8478d0e1488a763c000014\" alt=\"\"></p>\n<p>顺手计算一下，看看standaloneConfig长什么样子…..嗯???!!!……密码呢？……发生了啥？</p>\n<p><img src=\"leanote://file/getImage?fileId=5d8478e8e1488a763c000015\" alt=\"\"></p>\n<p>问题找到了，感觉自己好蠢。</p>\n<h2 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h2><h3 id=\"修改配置\"><a href=\"#修改配置\" class=\"headerlink\" title=\"修改配置\"></a>修改配置</h3><pre><code class=\"yml\">spring:\n  redis:\n    # REDIS_URL 中自己带上密码\n    # Connection URL. Overrides host, port, and password. User is ignored. Example:\n    # redis://user:password@example.com:6379\n    # url: redis://UserIsIgnored:testpassword123@192.168.1.233:6379\n    # HOST 和 PASSWORD 是一套配置\n    host: 192.168.1.233\n    # 如果有密码 （用于RedisTemplate ，Lettuce不会拿这个password）\n    password: testpassword123\n    # 存储到分区1\n    database: 1\n    # 默认超时2000\n    timeout: 3000</code></pre>\n<p>修改后启动：</p>\n<pre><code class=\"log\">[20190828 03:15:04] ERROR 8564 --- [nio-8086-exec-2] c.z.v.d.a.c.mvc.GlobalExceptionHandler   : Unable to connect to Redis; nested exception is io.lettuce.core.RedisCommandExecutionException: NOAUTH Authentication required.\n\norg.springframework.data.redis.RedisConnectionFailureException: Unable to connect to Redis; nested exception is io.lettuce.core.RedisCommandExecutionException: NOAUTH Authentication required.\n    at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getNativeConnection(LettuceConnectionFactory.java:1092)\n    at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getConnection(LettuceConnectionFactory.java:1065)\n    at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getSharedConnection(LettuceConnectionFactory.java:865)\n    at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getConnection(LettuceConnectionFactory.java:340)\n    at org.springframework.data.redis.cache.DefaultRedisCacheWriter.execute(DefaultRedisCacheWriter.java:238)\n    at org.springframework.data.redis.cache.DefaultRedisCacheWriter.get(DefaultRedisCacheWriter.java:109)\n    at org.springframework.data.redis.cache.RedisCache.lookup(RedisCache.java:82)\n    at org.springframework.cache.support.AbstractValueAdaptingCache.get(AbstractValueAdaptingCache.java:58)\n    at org.springframework.cache.interceptor.AbstractCacheInvoker.doGet(AbstractCacheInvoker.java:73)\n    at org.springframework.cache.interceptor.CacheAspectSupport.findInCaches(CacheAspectSupport.java:554)\n    at org.springframework.cache.interceptor.CacheAspectSupport.findCachedItem(CacheAspectSupport.java:519)\n    at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:401)\n    at org.springframework.cache.interceptor.CacheAspectSupport.execute(CacheAspectSupport.java:345)\n    at org.springframework.cache.interceptor.CacheInterceptor.invoke(CacheInterceptor.java:61)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n    at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)\n    at com.zunchen.video.dmp.service.impl.onvif.OnvifDeviceCacheServiceImpl$EnhancerBySpringCGLIB$b001f767.connectOnvifDevice(&lt;generated&gt;)\n    at com.zunchen.video.dmp.admin.api.ConnectDeviceApiController.connect(ConnectDeviceApiController.java:36)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:215)\n    at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:142)\n    at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102)\n    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)\n    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:800)\n    at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\n    at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1038)\n    at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)\n    at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:998)\n    at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:890)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)\n    at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:875)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n    at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n    at org.springframework.boot.actuate.web.trace.servlet.HttpTraceFilter.doFilterInternal(HttpTraceFilter.java:90)\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n    at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:154)\n    at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.filterAndRecordMetrics(WebMvcMetricsFilter.java:122)\n    at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:107)\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n    at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)\n    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)\n    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)\n    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)\n    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\n    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\n    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\n    at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)\n    at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)\n    at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:770)\n    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)\n    at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n    at java.lang.Thread.run(Thread.java:748)</code></pre>\n<p>仍然在报错，这下尴尬了。</p>\n<h3 id=\"再次解决问题\"><a href=\"#再次解决问题\" class=\"headerlink\" title=\"再次解决问题\"></a>再次解决问题</h3><p><img src=\"leanote://file/getImage?fileId=5d847965e1488a763c000016\" alt=\"\"></p>\n<p>径直来到报错信息提示的地方，估计是红框出出现了异常。此处调用的是接口方法，不知道进了那个方法，没关系，打个断点强制步入。</p>\n<p><img src=\"leanote://file/getImage?fileId=5d847984e1488a763c000017\" alt=\"\"></p>\n<p>有点懒，不想解释了，直接画图，发现是redisURISupplier中的password仍然是空的。不想知道为什么了，我只想解决问题。源码点过去看下。</p>\n<p><img src=\"leanote://file/getImage?fileId=5d847996e1488a763c000018\" alt=\"\"></p>\n<p> 查看该类的构造方法，这个东西正在解析RedisURI，那RedisURI哪儿来的呢？配置里配的呗。\n </p>\n<h2 id=\"成功解决问题\"><a href=\"#成功解决问题\" class=\"headerlink\" title=\"成功解决问题\"></a>成功解决问题</h2><pre><code class=\"yml\">spring:\n  redis:\n    # REDIS_URL 中自己带上密码\n    # Connection URL. Overrides host, port, and password. User is ignored. Example:\n    # redis://user:password@example.com:6379\n    url: redis://UserIsIgnored:testpassword123@192.168.1.233:6379\n    # HOST 和 PASSWORD 是一套配置\n    # host: 192.168.1.233\n    # 如果有密码 （用于RedisTemplate ，Lettuce不会拿这个password）\n    # password: testpassword123\n    # 存储到分区1\n    database: 1\n    # 默认超时2000\n    timeout: 3000</code></pre>\n<p>这次好了，redis成功连接。大功告成。</p>"},{"title":"[WSL2]子系统ubuntu安装jdk8","date":"2019-01-04T07:42:01.000Z","updated":"2020-02-20T07:41:36.000Z","comments":1,"_content":"\n这是个大坑 平时装个JDK这么简单的事 在WSL上问题还真不少\n<!--more-->\n\n### 安装环境\n```\n适用于 Linux 的 Windows 子系统:\nUbuntu-18.04 (默认)\n```\n\n\n\n### \n\n以前都是用的centos,直接`yum localinstall ./jdk-???-linux-x64.rpm`就可以安装本地的RPM包了。 \n但是现在使用的Ubuntu，只能安装DEB包，查询了一下有三种安装方式：\n\n- RPM包转制为DEB包\n- 使用开箱即用的tar.gz并配置环境变量\n- 使用ppa源安装\n \n### 开始安装\n\n很明显使用ppa源安装更稳定不容易遇到问题，参考了此文章 \n[Install Oracle Java 8 (JDK8 and JRE8) in Ubuntu or Linux Mint](http://www.webupd8.org/2012/09/install-oracle-java-8-in-ubuntu-via-ppa.html)\n\n```\nsudo add-apt-repository ppa:webupd8team/java    //添加PPA源\nsudo apt-get update                             //更新本地包\nsudo apt-get install oracle-java8-installer     //安装JDK\n\n// 很遗憾报错了\n\nroot@DESKTOP-UFOJIL7:/wsl_share# apt-get install oracle-java8-installer\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nPackage oracle-java8-installer is not available, but is referred to by another package.\nThis may mean that the package is missing, has been obsoleted, or\nis only available from another source\n\nE: Package 'oracle-java8-installer' has no installation candidate\n```\n\n### \n\n在这里找到了答案\n[Oracle-Java8-Installer: No installation candidate](https://askubuntu.com/questions/790671/oracle-java8-installer-no-installation-candidate)\n\n&gt; NOTE: This answer no longer works, as the WebUpd8 PPA has been deprecated since Oracle has changed licensing and access restrictions to the Oracle Java codebase. Details at http://www.webupd8.org/2014/03/how-to-install-oracle-java-8-in-debian.html\n\n翻译一下\n\n&gt;注意：此答案不再有效，因为WebUpd8 PPA已被弃用，因为Oracle已将许可和访问限制更改为Oracle Java代码库。 有关详细信息， 请访问http://www.webupd8.org/2014/03/how-to-install-oracle-java-8-in-debian.html\n\n既然如此，那没啥办法只能手动安装一个了\n\n### 手动配置\n\n首先下载一个`jdk-8u221-linux-x64.tar.gz`,拷贝到wsl_share中\n\n```\nroot@DESKTOP-UFOJIL7:/wsl_share# tar -zxvf ./jdk-8u221-linux-x64.tar.gz      //首先解压\nroot@DESKTOP-UFOJIL7:/wsl_share# vim ~/.bashrc                              //配置环境变量\n```\n\n```\n// bashrc中追加以下内容\nexport JAVA_HOME=/app/jdk1.8.0_221\nexport JRE_HOME=${JAVA_HOME}/jre\nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib\nexport PATH=${JAVA_HOME}/bin:$PATH\n```\n\n```\nroot@DESKTOP-UFOJIL7:/wsl_share# source ~/.bashrc    //重新加载环境变量\n\nroot@DESKTOP-UFOJIL7:/wsl_share# java -version\njava version \"1.8.0_221\"\nJava(TM) SE Runtime Environment (build 1.8.0_221-b11)\nJava HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)\n\n\n```\n","source":"_posts/[WSL2]子系统ubuntu安装jdk8.md","raw":"---\ntitle: '[WSL2]子系统ubuntu安装jdk8'\ndate: 2019/1/4 15:42:01\nupdated: 2020/2/20 15:41:36\ncomments: true\ncategories: \n    - [搞点骚操作]\ntags: \n    - linux\n---\n\n这是个大坑 平时装个JDK这么简单的事 在WSL上问题还真不少\n<!--more-->\n\n### 安装环境\n```\n适用于 Linux 的 Windows 子系统:\nUbuntu-18.04 (默认)\n```\n\n\n\n### \n\n以前都是用的centos,直接`yum localinstall ./jdk-???-linux-x64.rpm`就可以安装本地的RPM包了。 \n但是现在使用的Ubuntu，只能安装DEB包，查询了一下有三种安装方式：\n\n- RPM包转制为DEB包\n- 使用开箱即用的tar.gz并配置环境变量\n- 使用ppa源安装\n \n### 开始安装\n\n很明显使用ppa源安装更稳定不容易遇到问题，参考了此文章 \n[Install Oracle Java 8 (JDK8 and JRE8) in Ubuntu or Linux Mint](http://www.webupd8.org/2012/09/install-oracle-java-8-in-ubuntu-via-ppa.html)\n\n```\nsudo add-apt-repository ppa:webupd8team/java    //添加PPA源\nsudo apt-get update                             //更新本地包\nsudo apt-get install oracle-java8-installer     //安装JDK\n\n// 很遗憾报错了\n\nroot@DESKTOP-UFOJIL7:/wsl_share# apt-get install oracle-java8-installer\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nPackage oracle-java8-installer is not available, but is referred to by another package.\nThis may mean that the package is missing, has been obsoleted, or\nis only available from another source\n\nE: Package 'oracle-java8-installer' has no installation candidate\n```\n\n### \n\n在这里找到了答案\n[Oracle-Java8-Installer: No installation candidate](https://askubuntu.com/questions/790671/oracle-java8-installer-no-installation-candidate)\n\n&gt; NOTE: This answer no longer works, as the WebUpd8 PPA has been deprecated since Oracle has changed licensing and access restrictions to the Oracle Java codebase. Details at http://www.webupd8.org/2014/03/how-to-install-oracle-java-8-in-debian.html\n\n翻译一下\n\n&gt;注意：此答案不再有效，因为WebUpd8 PPA已被弃用，因为Oracle已将许可和访问限制更改为Oracle Java代码库。 有关详细信息， 请访问http://www.webupd8.org/2014/03/how-to-install-oracle-java-8-in-debian.html\n\n既然如此，那没啥办法只能手动安装一个了\n\n### 手动配置\n\n首先下载一个`jdk-8u221-linux-x64.tar.gz`,拷贝到wsl_share中\n\n```\nroot@DESKTOP-UFOJIL7:/wsl_share# tar -zxvf ./jdk-8u221-linux-x64.tar.gz      //首先解压\nroot@DESKTOP-UFOJIL7:/wsl_share# vim ~/.bashrc                              //配置环境变量\n```\n\n```\n// bashrc中追加以下内容\nexport JAVA_HOME=/app/jdk1.8.0_221\nexport JRE_HOME=${JAVA_HOME}/jre\nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib\nexport PATH=${JAVA_HOME}/bin:$PATH\n```\n\n```\nroot@DESKTOP-UFOJIL7:/wsl_share# source ~/.bashrc    //重新加载环境变量\n\nroot@DESKTOP-UFOJIL7:/wsl_share# java -version\njava version \"1.8.0_221\"\nJava(TM) SE Runtime Environment (build 1.8.0_221-b11)\nJava HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)\n\n\n```\n","slug":"[WSL2]子系统ubuntu安装jdk8","published":1,"_id":"ckacfrpdt001ps04t92e5hhkm","layout":"post","photos":[],"link":"","content":"<p>这是个大坑 平时装个JDK这么简单的事 在WSL上问题还真不少</p>\n<a id=\"more\"></a>\n\n<h3 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h3><pre><code>适用于 Linux 的 Windows 子系统:\nUbuntu-18.04 (默认)</code></pre><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><p>以前都是用的centos,直接<code>yum localinstall ./jdk-???-linux-x64.rpm</code>就可以安装本地的RPM包了。<br>但是现在使用的Ubuntu，只能安装DEB包，查询了一下有三种安装方式：</p>\n<ul>\n<li>RPM包转制为DEB包</li>\n<li>使用开箱即用的tar.gz并配置环境变量</li>\n<li>使用ppa源安装</li>\n</ul>\n<h3 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h3><p>很明显使用ppa源安装更稳定不容易遇到问题，参考了此文章<br><a href=\"http://www.webupd8.org/2012/09/install-oracle-java-8-in-ubuntu-via-ppa.html\" target=\"_blank\" rel=\"noopener\">Install Oracle Java 8 (JDK8 and JRE8) in Ubuntu or Linux Mint</a></p>\n<pre><code>sudo add-apt-repository ppa:webupd8team/java    //添加PPA源\nsudo apt-get update                             //更新本地包\nsudo apt-get install oracle-java8-installer     //安装JDK\n\n// 很遗憾报错了\n\nroot@DESKTOP-UFOJIL7:/wsl_share# apt-get install oracle-java8-installer\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nPackage oracle-java8-installer is not available, but is referred to by another package.\nThis may mean that the package is missing, has been obsoleted, or\nis only available from another source\n\nE: Package &#39;oracle-java8-installer&#39; has no installation candidate</code></pre><h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h3><p>在这里找到了答案<br><a href=\"https://askubuntu.com/questions/790671/oracle-java8-installer-no-installation-candidate\" target=\"_blank\" rel=\"noopener\">Oracle-Java8-Installer: No installation candidate</a></p>\n<p>&gt; NOTE: This answer no longer works, as the WebUpd8 PPA has been deprecated since Oracle has changed licensing and access restrictions to the Oracle Java codebase. Details at <a href=\"http://www.webupd8.org/2014/03/how-to-install-oracle-java-8-in-debian.html\" target=\"_blank\" rel=\"noopener\">http://www.webupd8.org/2014/03/how-to-install-oracle-java-8-in-debian.html</a></p>\n<p>翻译一下</p>\n<p>&gt;注意：此答案不再有效，因为WebUpd8 PPA已被弃用，因为Oracle已将许可和访问限制更改为Oracle Java代码库。 有关详细信息， 请访问<a href=\"http://www.webupd8.org/2014/03/how-to-install-oracle-java-8-in-debian.html\" target=\"_blank\" rel=\"noopener\">http://www.webupd8.org/2014/03/how-to-install-oracle-java-8-in-debian.html</a></p>\n<p>既然如此，那没啥办法只能手动安装一个了</p>\n<h3 id=\"手动配置\"><a href=\"#手动配置\" class=\"headerlink\" title=\"手动配置\"></a>手动配置</h3><p>首先下载一个<code>jdk-8u221-linux-x64.tar.gz</code>,拷贝到wsl_share中</p>\n<pre><code>root@DESKTOP-UFOJIL7:/wsl_share# tar -zxvf ./jdk-8u221-linux-x64.tar.gz      //首先解压\nroot@DESKTOP-UFOJIL7:/wsl_share# vim ~/.bashrc                              //配置环境变量</code></pre><pre><code>// bashrc中追加以下内容\nexport JAVA_HOME=/app/jdk1.8.0_221\nexport JRE_HOME=${JAVA_HOME}/jre\nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib\nexport PATH=${JAVA_HOME}/bin:$PATH</code></pre><pre><code>root@DESKTOP-UFOJIL7:/wsl_share# source ~/.bashrc    //重新加载环境变量\n\nroot@DESKTOP-UFOJIL7:/wsl_share# java -version\njava version &quot;1.8.0_221&quot;\nJava(TM) SE Runtime Environment (build 1.8.0_221-b11)\nJava HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)\n\n</code></pre>","site":{"data":{}},"excerpt":"<p>这是个大坑 平时装个JDK这么简单的事 在WSL上问题还真不少</p>","more":"<h3 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h3><pre><code>适用于 Linux 的 Windows 子系统:\nUbuntu-18.04 (默认)</code></pre><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><p>以前都是用的centos,直接<code>yum localinstall ./jdk-???-linux-x64.rpm</code>就可以安装本地的RPM包了。<br>但是现在使用的Ubuntu，只能安装DEB包，查询了一下有三种安装方式：</p>\n<ul>\n<li>RPM包转制为DEB包</li>\n<li>使用开箱即用的tar.gz并配置环境变量</li>\n<li>使用ppa源安装</li>\n</ul>\n<h3 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h3><p>很明显使用ppa源安装更稳定不容易遇到问题，参考了此文章<br><a href=\"http://www.webupd8.org/2012/09/install-oracle-java-8-in-ubuntu-via-ppa.html\" target=\"_blank\" rel=\"noopener\">Install Oracle Java 8 (JDK8 and JRE8) in Ubuntu or Linux Mint</a></p>\n<pre><code>sudo add-apt-repository ppa:webupd8team/java    //添加PPA源\nsudo apt-get update                             //更新本地包\nsudo apt-get install oracle-java8-installer     //安装JDK\n\n// 很遗憾报错了\n\nroot@DESKTOP-UFOJIL7:/wsl_share# apt-get install oracle-java8-installer\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nPackage oracle-java8-installer is not available, but is referred to by another package.\nThis may mean that the package is missing, has been obsoleted, or\nis only available from another source\n\nE: Package &#39;oracle-java8-installer&#39; has no installation candidate</code></pre><h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h3><p>在这里找到了答案<br><a href=\"https://askubuntu.com/questions/790671/oracle-java8-installer-no-installation-candidate\" target=\"_blank\" rel=\"noopener\">Oracle-Java8-Installer: No installation candidate</a></p>\n<p>&gt; NOTE: This answer no longer works, as the WebUpd8 PPA has been deprecated since Oracle has changed licensing and access restrictions to the Oracle Java codebase. Details at <a href=\"http://www.webupd8.org/2014/03/how-to-install-oracle-java-8-in-debian.html\" target=\"_blank\" rel=\"noopener\">http://www.webupd8.org/2014/03/how-to-install-oracle-java-8-in-debian.html</a></p>\n<p>翻译一下</p>\n<p>&gt;注意：此答案不再有效，因为WebUpd8 PPA已被弃用，因为Oracle已将许可和访问限制更改为Oracle Java代码库。 有关详细信息， 请访问<a href=\"http://www.webupd8.org/2014/03/how-to-install-oracle-java-8-in-debian.html\" target=\"_blank\" rel=\"noopener\">http://www.webupd8.org/2014/03/how-to-install-oracle-java-8-in-debian.html</a></p>\n<p>既然如此，那没啥办法只能手动安装一个了</p>\n<h3 id=\"手动配置\"><a href=\"#手动配置\" class=\"headerlink\" title=\"手动配置\"></a>手动配置</h3><p>首先下载一个<code>jdk-8u221-linux-x64.tar.gz</code>,拷贝到wsl_share中</p>\n<pre><code>root@DESKTOP-UFOJIL7:/wsl_share# tar -zxvf ./jdk-8u221-linux-x64.tar.gz      //首先解压\nroot@DESKTOP-UFOJIL7:/wsl_share# vim ~/.bashrc                              //配置环境变量</code></pre><pre><code>// bashrc中追加以下内容\nexport JAVA_HOME=/app/jdk1.8.0_221\nexport JRE_HOME=${JAVA_HOME}/jre\nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib\nexport PATH=${JAVA_HOME}/bin:$PATH</code></pre><pre><code>root@DESKTOP-UFOJIL7:/wsl_share# source ~/.bashrc    //重新加载环境变量\n\nroot@DESKTOP-UFOJIL7:/wsl_share# java -version\njava version &quot;1.8.0_221&quot;\nJava(TM) SE Runtime Environment (build 1.8.0_221-b11)\nJava HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)\n\n</code></pre>"},{"title":"[MXCHIP-2]真机调试","date":"2019-05-21T03:11:53.000Z","cover":"/2019/05/21/%5BMXCHIP-2%5D真机调试/title.jpg","coverWidth":1210,"coverHeight":905,"_content":"\n离上一篇文章发布已经时隔很久了，整理了一下最近学习的操作做个记录免得忘掉了。\n\n<!--more-->\n\n### 真机调试\n\n#### 本次的主角 X讯TC1插排\n\n{% asset_img 拆机后的TC1.jpg [拆机后的TC1] %}\n<!-- ![拆机后的TC1]() -->\n\n通过仔细观察可以发现，在PCB上预留了2组(8个)触点，一组上面标有RX/TX字样，那肯定就是UART接口了。\n\n{% asset_img UART接口定义.jpg [UART接口定义] %}\n<!-- ![UART接口定义](./UART接口定义.jpg) -->\n\n另一组标有CLK、BIO字样，应该是用于刷机的SWD接口。\n\n{% asset_img SWD接口定义.jpg [SWD接口定义] %}\n<!-- ![SWD接口定义](./SWD接口定义.jpg) -->\n\n- [引用的资料](https://iot-security.wiki/hardware-security/debug/jtag.html)\n\n#### 模块文档\n\n从官网翻到了模块的参数信息\n[DS0021CN_EMW3031_V1.4]([MXCHIP-2]真机调试/DS0021CN_EMW3031_V1.4.pdf)\n","source":"_posts/[MXCHIP-2]真机调试.md","raw":"---\ntitle: \"[MXCHIP-2]真机调试\"\ndate: 2019/5/21 11:11:53\ncategories: \n    - [我永远爱学习]\ntags: \n    - 单片机\n    - IOT\n    - C\ncover: /2019/05/21/%5BMXCHIP-2%5D真机调试/title.jpg\ncoverWidth: 1210\ncoverHeight: 905\n---\n\n离上一篇文章发布已经时隔很久了，整理了一下最近学习的操作做个记录免得忘掉了。\n\n<!--more-->\n\n### 真机调试\n\n#### 本次的主角 X讯TC1插排\n\n{% asset_img 拆机后的TC1.jpg [拆机后的TC1] %}\n<!-- ![拆机后的TC1]() -->\n\n通过仔细观察可以发现，在PCB上预留了2组(8个)触点，一组上面标有RX/TX字样，那肯定就是UART接口了。\n\n{% asset_img UART接口定义.jpg [UART接口定义] %}\n<!-- ![UART接口定义](./UART接口定义.jpg) -->\n\n另一组标有CLK、BIO字样，应该是用于刷机的SWD接口。\n\n{% asset_img SWD接口定义.jpg [SWD接口定义] %}\n<!-- ![SWD接口定义](./SWD接口定义.jpg) -->\n\n- [引用的资料](https://iot-security.wiki/hardware-security/debug/jtag.html)\n\n#### 模块文档\n\n从官网翻到了模块的参数信息\n[DS0021CN_EMW3031_V1.4]([MXCHIP-2]真机调试/DS0021CN_EMW3031_V1.4.pdf)\n","slug":"[MXCHIP-2]真机调试","published":1,"updated":"2020-05-18T15:42:13.492Z","_id":"ckacjl4hl0003vo4t3qlm6e2y","comments":1,"layout":"post","photos":[],"link":"","content":"<p>离上一篇文章发布已经时隔很久了，整理了一下最近学习的操作做个记录免得忘掉了。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"真机调试\"><a href=\"#真机调试\" class=\"headerlink\" title=\"真机调试\"></a>真机调试</h3><h4 id=\"本次的主角-X讯TC1插排\"><a href=\"#本次的主角-X讯TC1插排\" class=\"headerlink\" title=\"本次的主角 X讯TC1插排\"></a>本次的主角 X讯TC1插排</h4>\n<!-- ![拆机后的TC1]() -->\n\n<p>通过仔细观察可以发现，在PCB上预留了2组(8个)触点，一组上面标有RX/TX字样，那肯定就是UART接口了。</p>\n<img src=\"/2019/05/21/%5BMXCHIP-2%5D%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95/UART%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89.jpg\" class=\"\" title=\"[UART接口定义]\">\n<!-- ![UART接口定义](./UART接口定义.jpg) -->\n\n<p>另一组标有CLK、BIO字样，应该是用于刷机的SWD接口。</p>\n<img src=\"/2019/05/21/%5BMXCHIP-2%5D%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95/SWD%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89.jpg\" class=\"\" title=\"[SWD接口定义]\">\n<!-- ![SWD接口定义](./SWD接口定义.jpg) -->\n\n<ul>\n<li><a href=\"https://iot-security.wiki/hardware-security/debug/jtag.html\" target=\"_blank\" rel=\"noopener\">引用的资料</a></li>\n</ul>\n<h4 id=\"模块文档\"><a href=\"#模块文档\" class=\"headerlink\" title=\"模块文档\"></a>模块文档</h4><p>从官网翻到了模块的参数信息<br><a href=\"[MXCHIP-2]真机调试/DS0021CN_EMW3031_V1.4.pdf\">DS0021CN_EMW3031_V1.4</a></p>\n","site":{"data":{}},"excerpt":"<p>离上一篇文章发布已经时隔很久了，整理了一下最近学习的操作做个记录免得忘掉了。</p>","more":"<h3 id=\"真机调试\"><a href=\"#真机调试\" class=\"headerlink\" title=\"真机调试\"></a>真机调试</h3><h4 id=\"本次的主角-X讯TC1插排\"><a href=\"#本次的主角-X讯TC1插排\" class=\"headerlink\" title=\"本次的主角 X讯TC1插排\"></a>本次的主角 X讯TC1插排</h4>\n<!-- ![拆机后的TC1]() -->\n\n<p>通过仔细观察可以发现，在PCB上预留了2组(8个)触点，一组上面标有RX/TX字样，那肯定就是UART接口了。</p>\n<img src=\"/2019/05/21/%5BMXCHIP-2%5D%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95/UART%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89.jpg\" class=\"\" title=\"[UART接口定义]\">\n<!-- ![UART接口定义](./UART接口定义.jpg) -->\n\n<p>另一组标有CLK、BIO字样，应该是用于刷机的SWD接口。</p>\n<img src=\"/2019/05/21/%5BMXCHIP-2%5D%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95/SWD%E6%8E%A5%E5%8F%A3%E5%AE%9A%E4%B9%89.jpg\" class=\"\" title=\"[SWD接口定义]\">\n<!-- ![SWD接口定义](./SWD接口定义.jpg) -->\n\n<ul>\n<li><a href=\"https://iot-security.wiki/hardware-security/debug/jtag.html\" target=\"_blank\" rel=\"noopener\">引用的资料</a></li>\n</ul>\n<h4 id=\"模块文档\"><a href=\"#模块文档\" class=\"headerlink\" title=\"模块文档\"></a>模块文档</h4><p>从官网翻到了模块的参数信息<br><a href=\"[MXCHIP-2]真机调试/DS0021CN_EMW3031_V1.4.pdf\">DS0021CN_EMW3031_V1.4</a></p>"},{"title":"[Zookeeper学习-第二章]用作SpringCloud的注册中心","date":"2019-07-01T07:53:24.000Z","updated":"2020-02-20T07:41:36.000Z","comments":1,"_content":"\n太长懒得写了 用作注册中心->手动维护节点->节点树操作 最后配合feign完成服务动态调用\n<!--more-->\n#\n","source":"_posts/[Zookeeper学习-第二章]用作SpringCloud的注册中心.md","raw":"---\ntitle: '[Zookeeper学习-第二章]用作SpringCloud的注册中心'\ndate: 2019/7/1 15:53:24\nupdated: 2020/2/20 15:41:36\ncomments: true\ncategories: \n    - [我永远爱学习]\ntags: \n    - java\n    - zookeeper\n---\n\n太长懒得写了 用作注册中心->手动维护节点->节点树操作 最后配合feign完成服务动态调用\n<!--more-->\n#\n","slug":"[Zookeeper学习-第二章]用作SpringCloud的注册中心","published":1,"_id":"ckacnprqb0008vo4t5rta00ps","layout":"post","photos":[],"link":"","content":"<p>太长懒得写了 用作注册中心-&gt;手动维护节点-&gt;节点树操作 最后配合feign完成服务动态调用</p>\n<a id=\"more\"></a>\n<p>#</p>\n","site":{"data":{}},"excerpt":"<p>太长懒得写了 用作注册中心-&gt;手动维护节点-&gt;节点树操作 最后配合feign完成服务动态调用</p>","more":"<p>#</p>"},{"title":"[Zookeeper学习-第一章]zk环境搭建[单机+控制台]","date":"2019-07-01T07:53:24.000Z","updated":"2020-02-20T07:41:36.000Z","comments":1,"_content":"\n系统环境为 Centos ，由于项目需要，准备搭建 zookeeper-3.5.5 + 用于方便展示节点的zookeeperAdmin用作公司开发之用\n<!--more-->\n\n## zookeeper-3.5.5\n\n### 下载\n\n前往开源项目[下载页面](http://zookeeper.apache.org/releases.html#download)根据需要下载对应的版本（注意要下载文件名后面带\"-bin\"的包）<br/>\n[懒人链接](https://archive.apache.org/dist/zookeeper/)\n\n```bash\n[root@iZuf6imeqt5e7fo9jw7918Z zookeeper]# tar -zxvf ./apache-zookeeper-3.5.5-bin.tar.gz\n[root@iZuf6imeqt5e7fo9jw7918Z zookeeper]# cd ./apache-zookeeper-3.5.5-bin.tar.gz\n[root@iZuf6imeqt5e7fo9jw7918Z zookeeper]# ll\ntotal 44\ndrwxr-xr-x 2 2002 2002  4096 Apr  9 19:13 bin\ndrwxr-xr-x 2 2002 2002  4096 Sep 20 14:00 conf\ndrwxr-xr-x 5 2002 2002  4096 May  3 20:07 docs\ndrwxr-xr-x 2 root root  4096 Sep 20 13:40 lib\n-rw-r--r-- 1 2002 2002 11358 Feb 15  2019 LICENSE.txt\ndrwxr-xr-x 2 root root  4096 Sep 20 13:43 logs\n-rw-r--r-- 1 2002 2002   432 Apr  9 19:13 NOTICE.txt\n-rw-r--r-- 1 2002 2002  1560 May  3 19:41 README.md\n-rw-r--r-- 1 2002 2002  1347 Apr  2 21:05 README_packaging.txt\n[root@iZuf6imeqt5e7fo9jw7918Z zookeeper]# ll\n[root@iZuf6imeqt5e7fo9jw7918Z apache-zookeeper-3.5.5-bin]# cd conf\n[root@iZuf6imeqt5e7fo9jw7918Z conf]# ll\ntotal 16\n-rw-r--r-- 1 2002 2002  535 Feb 15  2019 configuration.xsl\n-rw-r--r-- 1 2002 2002 2712 Apr  2 21:05 log4j.properties\n-rw-r--r-- 1 2002 2002  922 Feb 15  2019 zoo_sample.cfg\n[root@iZuf6imeqt5e7fo9jw7918Z conf]# cp ./zoo_sample.cfg ./zoo.cfg\n[root@iZuf6imeqt5e7fo9jw7918Z conf]# cd ../bin/\n[root@iZuf6imeqt5e7fo9jw7918Z conf]# \n\n```\n\n### 需要留意的\n如果在这里直接启动的话可能会启动不成功，因为apache-zookeeper默认监听了8080端口作为自己的`zookeeper-server`的服务端。最好是自己在./conf/zoo.cfg中配置一下`admin.serverPort=[自己随便改个端口]`，对的，配置文件里默认是没有这行的，这个比较坑。\n\n### 启动\n```bash\n[root@iZuf6imeqt5e7fo9jw7918Z bin]# ./zkServer.sh start\n/usr/bin/java\nZooKeeper JMX enabled by default\nUsing config: /app/zookeeper/apache-zookeeper-3.5.5-bin/bin/../conf/zoo.cfg\nStarting zookeeper ... STARTED\n[root@iZuf6imeqt5e7fo9jw7918Z bin]# ./zkServer.sh start\n/usr/bin/java\nZooKeeper JMX enabled by default\nUsing config: /app/zookeeper/apache-zookeeper-3.5.5-bin/bin/../conf/zoo.cfg\nStarting zookeeper ... already running as process 29414.\n[root@iZuf6imeqt5e7fo9jw7918Z bin]# ./zkServer.sh status\n/usr/bin/java\nZooKeeper JMX enabled by default\nUsing config: /app/zookeeper/apache-zookeeper-3.5.5-bin/bin/../conf/zoo.cfg\nClient port found: 2181. Client address: localhost.\nMode: standalone\n```\n\n\n\n##  zookeeper-admin\n这是一个github上的小[项目](https://github.com/Ahoo-Wang/ZooKeeper-Admin)<br/>\n功能不多，刚刚够用就行，不整那些花里胡哨的，支持直接使用docker构建，非常方便\n\n```bash\n[root@iZuf6imeqt5e7fo9jw7918Z zookeeper]# docker run --name zookeeper-admin -p 80:2182 docker.io/ahoowang/zookeeper.admin\n[root@iZuf6imeqt5e7fo9jw7918Z zookeeper]# docker container ls\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES\n56bf5522f4fe        4232addbc345        \"dotnet ZooKeeper....\"   About an hour ago   Up 2 minutes        0.0.0.0:2182-&gt;80/tcp   zookeeper-admin\n\n```\n![zookeeper-admin](leanote://file/getImage?fileId=5d84827ce1488a763c000019)\n\n界面看上去还不错。\n\n然而好景不长，跑了一阵发现无法访问了。\n```bash\n[root@iZuf6imeqt5e7fo9jw7918Z zookeeper]# docker container ls\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n```\n??? 怎么停止了，看看日志怎么说\n```\n[root@iZuf6imeqt5e7fo9jw7918Z zookeeper]# docker logs 56bf5522f4fe\nHosting environment: Production\nContent root path: /app\nNow listening on: http://+:80\nApplication started. Press Ctrl+C to shut down.\nApplication is shutting down...\nHosting environment: Production\nContent root path: /app\nNow listening on: http://+:80\nApplication started. Press Ctrl+C to shut down.\nUnhandled Exception: System.InvalidOperationException: Collection was modified; enumeration operation may not execute.\n   at System.ThrowHelper.ThrowInvalidOperationException(ExceptionResource resource)\n   at System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.MoveNext()\n   at ZooKeeper.Admin.ZooKeeperManager.<dispose>d__9.MoveNext() in E:\\ZooKeeper-Admin\\ZooKeeper.Admin\\ZooKeeperManager.cs:line 55\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\n   at System.Threading.QueueUserWorkItemCallback.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\n\n```\n\n\n\n","source":"_posts/[Zookeeper学习-第一章]zk环境搭建[单机+控制台].md","raw":"---\ntitle: '[Zookeeper学习-第一章]zk环境搭建[单机+控制台]'\ndate: 2019/7/1 15:53:24\nupdated: 2020/2/20 15:41:36\ncomments: true\ncategories: \n    - [我永远爱学习]\ntags: \n    - java\n    - zookeeper\n---\n\n系统环境为 Centos ，由于项目需要，准备搭建 zookeeper-3.5.5 + 用于方便展示节点的zookeeperAdmin用作公司开发之用\n<!--more-->\n\n## zookeeper-3.5.5\n\n### 下载\n\n前往开源项目[下载页面](http://zookeeper.apache.org/releases.html#download)根据需要下载对应的版本（注意要下载文件名后面带\"-bin\"的包）<br/>\n[懒人链接](https://archive.apache.org/dist/zookeeper/)\n\n```bash\n[root@iZuf6imeqt5e7fo9jw7918Z zookeeper]# tar -zxvf ./apache-zookeeper-3.5.5-bin.tar.gz\n[root@iZuf6imeqt5e7fo9jw7918Z zookeeper]# cd ./apache-zookeeper-3.5.5-bin.tar.gz\n[root@iZuf6imeqt5e7fo9jw7918Z zookeeper]# ll\ntotal 44\ndrwxr-xr-x 2 2002 2002  4096 Apr  9 19:13 bin\ndrwxr-xr-x 2 2002 2002  4096 Sep 20 14:00 conf\ndrwxr-xr-x 5 2002 2002  4096 May  3 20:07 docs\ndrwxr-xr-x 2 root root  4096 Sep 20 13:40 lib\n-rw-r--r-- 1 2002 2002 11358 Feb 15  2019 LICENSE.txt\ndrwxr-xr-x 2 root root  4096 Sep 20 13:43 logs\n-rw-r--r-- 1 2002 2002   432 Apr  9 19:13 NOTICE.txt\n-rw-r--r-- 1 2002 2002  1560 May  3 19:41 README.md\n-rw-r--r-- 1 2002 2002  1347 Apr  2 21:05 README_packaging.txt\n[root@iZuf6imeqt5e7fo9jw7918Z zookeeper]# ll\n[root@iZuf6imeqt5e7fo9jw7918Z apache-zookeeper-3.5.5-bin]# cd conf\n[root@iZuf6imeqt5e7fo9jw7918Z conf]# ll\ntotal 16\n-rw-r--r-- 1 2002 2002  535 Feb 15  2019 configuration.xsl\n-rw-r--r-- 1 2002 2002 2712 Apr  2 21:05 log4j.properties\n-rw-r--r-- 1 2002 2002  922 Feb 15  2019 zoo_sample.cfg\n[root@iZuf6imeqt5e7fo9jw7918Z conf]# cp ./zoo_sample.cfg ./zoo.cfg\n[root@iZuf6imeqt5e7fo9jw7918Z conf]# cd ../bin/\n[root@iZuf6imeqt5e7fo9jw7918Z conf]# \n\n```\n\n### 需要留意的\n如果在这里直接启动的话可能会启动不成功，因为apache-zookeeper默认监听了8080端口作为自己的`zookeeper-server`的服务端。最好是自己在./conf/zoo.cfg中配置一下`admin.serverPort=[自己随便改个端口]`，对的，配置文件里默认是没有这行的，这个比较坑。\n\n### 启动\n```bash\n[root@iZuf6imeqt5e7fo9jw7918Z bin]# ./zkServer.sh start\n/usr/bin/java\nZooKeeper JMX enabled by default\nUsing config: /app/zookeeper/apache-zookeeper-3.5.5-bin/bin/../conf/zoo.cfg\nStarting zookeeper ... STARTED\n[root@iZuf6imeqt5e7fo9jw7918Z bin]# ./zkServer.sh start\n/usr/bin/java\nZooKeeper JMX enabled by default\nUsing config: /app/zookeeper/apache-zookeeper-3.5.5-bin/bin/../conf/zoo.cfg\nStarting zookeeper ... already running as process 29414.\n[root@iZuf6imeqt5e7fo9jw7918Z bin]# ./zkServer.sh status\n/usr/bin/java\nZooKeeper JMX enabled by default\nUsing config: /app/zookeeper/apache-zookeeper-3.5.5-bin/bin/../conf/zoo.cfg\nClient port found: 2181. Client address: localhost.\nMode: standalone\n```\n\n\n\n##  zookeeper-admin\n这是一个github上的小[项目](https://github.com/Ahoo-Wang/ZooKeeper-Admin)<br/>\n功能不多，刚刚够用就行，不整那些花里胡哨的，支持直接使用docker构建，非常方便\n\n```bash\n[root@iZuf6imeqt5e7fo9jw7918Z zookeeper]# docker run --name zookeeper-admin -p 80:2182 docker.io/ahoowang/zookeeper.admin\n[root@iZuf6imeqt5e7fo9jw7918Z zookeeper]# docker container ls\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES\n56bf5522f4fe        4232addbc345        \"dotnet ZooKeeper....\"   About an hour ago   Up 2 minutes        0.0.0.0:2182-&gt;80/tcp   zookeeper-admin\n\n```\n![zookeeper-admin](leanote://file/getImage?fileId=5d84827ce1488a763c000019)\n\n界面看上去还不错。\n\n然而好景不长，跑了一阵发现无法访问了。\n```bash\n[root@iZuf6imeqt5e7fo9jw7918Z zookeeper]# docker container ls\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n```\n??? 怎么停止了，看看日志怎么说\n```\n[root@iZuf6imeqt5e7fo9jw7918Z zookeeper]# docker logs 56bf5522f4fe\nHosting environment: Production\nContent root path: /app\nNow listening on: http://+:80\nApplication started. Press Ctrl+C to shut down.\nApplication is shutting down...\nHosting environment: Production\nContent root path: /app\nNow listening on: http://+:80\nApplication started. Press Ctrl+C to shut down.\nUnhandled Exception: System.InvalidOperationException: Collection was modified; enumeration operation may not execute.\n   at System.ThrowHelper.ThrowInvalidOperationException(ExceptionResource resource)\n   at System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.MoveNext()\n   at ZooKeeper.Admin.ZooKeeperManager.<dispose>d__9.MoveNext() in E:\\ZooKeeper-Admin\\ZooKeeper.Admin\\ZooKeeperManager.cs:line 55\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\n   at System.Threading.QueueUserWorkItemCallback.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\n\n```\n\n\n\n","slug":"[Zookeeper学习-第一章]zk环境搭建[单机+控制台]","published":1,"_id":"ckacnps68000gvo4t1k5vg5gv","layout":"post","photos":[],"link":"","content":"<p>系统环境为 Centos ，由于项目需要，准备搭建 zookeeper-3.5.5 + 用于方便展示节点的zookeeperAdmin用作公司开发之用</p>\n<a id=\"more\"></a>\n\n<h2 id=\"zookeeper-3-5-5\"><a href=\"#zookeeper-3-5-5\" class=\"headerlink\" title=\"zookeeper-3.5.5\"></a>zookeeper-3.5.5</h2><h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>前往开源项目<a href=\"http://zookeeper.apache.org/releases.html#download\" target=\"_blank\" rel=\"noopener\">下载页面</a>根据需要下载对应的版本（注意要下载文件名后面带”-bin”的包）<br/><br><a href=\"https://archive.apache.org/dist/zookeeper/\" target=\"_blank\" rel=\"noopener\">懒人链接</a></p>\n<pre><code class=\"bash\">[root@iZuf6imeqt5e7fo9jw7918Z zookeeper]# tar -zxvf ./apache-zookeeper-3.5.5-bin.tar.gz\n[root@iZuf6imeqt5e7fo9jw7918Z zookeeper]# cd ./apache-zookeeper-3.5.5-bin.tar.gz\n[root@iZuf6imeqt5e7fo9jw7918Z zookeeper]# ll\ntotal 44\ndrwxr-xr-x 2 2002 2002  4096 Apr  9 19:13 bin\ndrwxr-xr-x 2 2002 2002  4096 Sep 20 14:00 conf\ndrwxr-xr-x 5 2002 2002  4096 May  3 20:07 docs\ndrwxr-xr-x 2 root root  4096 Sep 20 13:40 lib\n-rw-r--r-- 1 2002 2002 11358 Feb 15  2019 LICENSE.txt\ndrwxr-xr-x 2 root root  4096 Sep 20 13:43 logs\n-rw-r--r-- 1 2002 2002   432 Apr  9 19:13 NOTICE.txt\n-rw-r--r-- 1 2002 2002  1560 May  3 19:41 README.md\n-rw-r--r-- 1 2002 2002  1347 Apr  2 21:05 README_packaging.txt\n[root@iZuf6imeqt5e7fo9jw7918Z zookeeper]# ll\n[root@iZuf6imeqt5e7fo9jw7918Z apache-zookeeper-3.5.5-bin]# cd conf\n[root@iZuf6imeqt5e7fo9jw7918Z conf]# ll\ntotal 16\n-rw-r--r-- 1 2002 2002  535 Feb 15  2019 configuration.xsl\n-rw-r--r-- 1 2002 2002 2712 Apr  2 21:05 log4j.properties\n-rw-r--r-- 1 2002 2002  922 Feb 15  2019 zoo_sample.cfg\n[root@iZuf6imeqt5e7fo9jw7918Z conf]# cp ./zoo_sample.cfg ./zoo.cfg\n[root@iZuf6imeqt5e7fo9jw7918Z conf]# cd ../bin/\n[root@iZuf6imeqt5e7fo9jw7918Z conf]# \n</code></pre>\n<h3 id=\"需要留意的\"><a href=\"#需要留意的\" class=\"headerlink\" title=\"需要留意的\"></a>需要留意的</h3><p>如果在这里直接启动的话可能会启动不成功，因为apache-zookeeper默认监听了8080端口作为自己的<code>zookeeper-server</code>的服务端。最好是自己在./conf/zoo.cfg中配置一下<code>admin.serverPort=[自己随便改个端口]</code>，对的，配置文件里默认是没有这行的，这个比较坑。</p>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><pre><code class=\"bash\">[root@iZuf6imeqt5e7fo9jw7918Z bin]# ./zkServer.sh start\n/usr/bin/java\nZooKeeper JMX enabled by default\nUsing config: /app/zookeeper/apache-zookeeper-3.5.5-bin/bin/../conf/zoo.cfg\nStarting zookeeper ... STARTED\n[root@iZuf6imeqt5e7fo9jw7918Z bin]# ./zkServer.sh start\n/usr/bin/java\nZooKeeper JMX enabled by default\nUsing config: /app/zookeeper/apache-zookeeper-3.5.5-bin/bin/../conf/zoo.cfg\nStarting zookeeper ... already running as process 29414.\n[root@iZuf6imeqt5e7fo9jw7918Z bin]# ./zkServer.sh status\n/usr/bin/java\nZooKeeper JMX enabled by default\nUsing config: /app/zookeeper/apache-zookeeper-3.5.5-bin/bin/../conf/zoo.cfg\nClient port found: 2181. Client address: localhost.\nMode: standalone</code></pre>\n<h2 id=\"zookeeper-admin\"><a href=\"#zookeeper-admin\" class=\"headerlink\" title=\"zookeeper-admin\"></a>zookeeper-admin</h2><p>这是一个github上的小<a href=\"https://github.com/Ahoo-Wang/ZooKeeper-Admin\" target=\"_blank\" rel=\"noopener\">项目</a><br/><br>功能不多，刚刚够用就行，不整那些花里胡哨的，支持直接使用docker构建，非常方便</p>\n<pre><code class=\"bash\">[root@iZuf6imeqt5e7fo9jw7918Z zookeeper]# docker run --name zookeeper-admin -p 80:2182 docker.io/ahoowang/zookeeper.admin\n[root@iZuf6imeqt5e7fo9jw7918Z zookeeper]# docker container ls\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES\n56bf5522f4fe        4232addbc345        &quot;dotnet ZooKeeper....&quot;   About an hour ago   Up 2 minutes        0.0.0.0:2182-&amp;gt;80/tcp   zookeeper-admin\n</code></pre>\n<p><img src=\"leanote://file/getImage?fileId=5d84827ce1488a763c000019\" alt=\"zookeeper-admin\"></p>\n<p>界面看上去还不错。</p>\n<p>然而好景不长，跑了一阵发现无法访问了。</p>\n<pre><code class=\"bash\">[root@iZuf6imeqt5e7fo9jw7918Z zookeeper]# docker container ls\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</code></pre>\n<p>??? 怎么停止了，看看日志怎么说</p>\n<pre><code>[root@iZuf6imeqt5e7fo9jw7918Z zookeeper]# docker logs 56bf5522f4fe\nHosting environment: Production\nContent root path: /app\nNow listening on: http://+:80\nApplication started. Press Ctrl+C to shut down.\nApplication is shutting down...\nHosting environment: Production\nContent root path: /app\nNow listening on: http://+:80\nApplication started. Press Ctrl+C to shut down.\nUnhandled Exception: System.InvalidOperationException: Collection was modified; enumeration operation may not execute.\n   at System.ThrowHelper.ThrowInvalidOperationException(ExceptionResource resource)\n   at System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.MoveNext()\n   at ZooKeeper.Admin.ZooKeeperManager.&lt;dispose&gt;d__9.MoveNext() in E:\\ZooKeeper-Admin\\ZooKeeper.Admin\\ZooKeeperManager.cs:line 55\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\n   at System.Threading.QueueUserWorkItemCallback.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\n</code></pre>","site":{"data":{}},"excerpt":"<p>系统环境为 Centos ，由于项目需要，准备搭建 zookeeper-3.5.5 + 用于方便展示节点的zookeeperAdmin用作公司开发之用</p>","more":"<h2 id=\"zookeeper-3-5-5\"><a href=\"#zookeeper-3-5-5\" class=\"headerlink\" title=\"zookeeper-3.5.5\"></a>zookeeper-3.5.5</h2><h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>前往开源项目<a href=\"http://zookeeper.apache.org/releases.html#download\" target=\"_blank\" rel=\"noopener\">下载页面</a>根据需要下载对应的版本（注意要下载文件名后面带”-bin”的包）<br/><br><a href=\"https://archive.apache.org/dist/zookeeper/\" target=\"_blank\" rel=\"noopener\">懒人链接</a></p>\n<pre><code class=\"bash\">[root@iZuf6imeqt5e7fo9jw7918Z zookeeper]# tar -zxvf ./apache-zookeeper-3.5.5-bin.tar.gz\n[root@iZuf6imeqt5e7fo9jw7918Z zookeeper]# cd ./apache-zookeeper-3.5.5-bin.tar.gz\n[root@iZuf6imeqt5e7fo9jw7918Z zookeeper]# ll\ntotal 44\ndrwxr-xr-x 2 2002 2002  4096 Apr  9 19:13 bin\ndrwxr-xr-x 2 2002 2002  4096 Sep 20 14:00 conf\ndrwxr-xr-x 5 2002 2002  4096 May  3 20:07 docs\ndrwxr-xr-x 2 root root  4096 Sep 20 13:40 lib\n-rw-r--r-- 1 2002 2002 11358 Feb 15  2019 LICENSE.txt\ndrwxr-xr-x 2 root root  4096 Sep 20 13:43 logs\n-rw-r--r-- 1 2002 2002   432 Apr  9 19:13 NOTICE.txt\n-rw-r--r-- 1 2002 2002  1560 May  3 19:41 README.md\n-rw-r--r-- 1 2002 2002  1347 Apr  2 21:05 README_packaging.txt\n[root@iZuf6imeqt5e7fo9jw7918Z zookeeper]# ll\n[root@iZuf6imeqt5e7fo9jw7918Z apache-zookeeper-3.5.5-bin]# cd conf\n[root@iZuf6imeqt5e7fo9jw7918Z conf]# ll\ntotal 16\n-rw-r--r-- 1 2002 2002  535 Feb 15  2019 configuration.xsl\n-rw-r--r-- 1 2002 2002 2712 Apr  2 21:05 log4j.properties\n-rw-r--r-- 1 2002 2002  922 Feb 15  2019 zoo_sample.cfg\n[root@iZuf6imeqt5e7fo9jw7918Z conf]# cp ./zoo_sample.cfg ./zoo.cfg\n[root@iZuf6imeqt5e7fo9jw7918Z conf]# cd ../bin/\n[root@iZuf6imeqt5e7fo9jw7918Z conf]# \n</code></pre>\n<h3 id=\"需要留意的\"><a href=\"#需要留意的\" class=\"headerlink\" title=\"需要留意的\"></a>需要留意的</h3><p>如果在这里直接启动的话可能会启动不成功，因为apache-zookeeper默认监听了8080端口作为自己的<code>zookeeper-server</code>的服务端。最好是自己在./conf/zoo.cfg中配置一下<code>admin.serverPort=[自己随便改个端口]</code>，对的，配置文件里默认是没有这行的，这个比较坑。</p>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><pre><code class=\"bash\">[root@iZuf6imeqt5e7fo9jw7918Z bin]# ./zkServer.sh start\n/usr/bin/java\nZooKeeper JMX enabled by default\nUsing config: /app/zookeeper/apache-zookeeper-3.5.5-bin/bin/../conf/zoo.cfg\nStarting zookeeper ... STARTED\n[root@iZuf6imeqt5e7fo9jw7918Z bin]# ./zkServer.sh start\n/usr/bin/java\nZooKeeper JMX enabled by default\nUsing config: /app/zookeeper/apache-zookeeper-3.5.5-bin/bin/../conf/zoo.cfg\nStarting zookeeper ... already running as process 29414.\n[root@iZuf6imeqt5e7fo9jw7918Z bin]# ./zkServer.sh status\n/usr/bin/java\nZooKeeper JMX enabled by default\nUsing config: /app/zookeeper/apache-zookeeper-3.5.5-bin/bin/../conf/zoo.cfg\nClient port found: 2181. Client address: localhost.\nMode: standalone</code></pre>\n<h2 id=\"zookeeper-admin\"><a href=\"#zookeeper-admin\" class=\"headerlink\" title=\"zookeeper-admin\"></a>zookeeper-admin</h2><p>这是一个github上的小<a href=\"https://github.com/Ahoo-Wang/ZooKeeper-Admin\" target=\"_blank\" rel=\"noopener\">项目</a><br/><br>功能不多，刚刚够用就行，不整那些花里胡哨的，支持直接使用docker构建，非常方便</p>\n<pre><code class=\"bash\">[root@iZuf6imeqt5e7fo9jw7918Z zookeeper]# docker run --name zookeeper-admin -p 80:2182 docker.io/ahoowang/zookeeper.admin\n[root@iZuf6imeqt5e7fo9jw7918Z zookeeper]# docker container ls\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES\n56bf5522f4fe        4232addbc345        &quot;dotnet ZooKeeper....&quot;   About an hour ago   Up 2 minutes        0.0.0.0:2182-&amp;gt;80/tcp   zookeeper-admin\n</code></pre>\n<p><img src=\"leanote://file/getImage?fileId=5d84827ce1488a763c000019\" alt=\"zookeeper-admin\"></p>\n<p>界面看上去还不错。</p>\n<p>然而好景不长，跑了一阵发现无法访问了。</p>\n<pre><code class=\"bash\">[root@iZuf6imeqt5e7fo9jw7918Z zookeeper]# docker container ls\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</code></pre>\n<p>??? 怎么停止了，看看日志怎么说</p>\n<pre><code>[root@iZuf6imeqt5e7fo9jw7918Z zookeeper]# docker logs 56bf5522f4fe\nHosting environment: Production\nContent root path: /app\nNow listening on: http://+:80\nApplication started. Press Ctrl+C to shut down.\nApplication is shutting down...\nHosting environment: Production\nContent root path: /app\nNow listening on: http://+:80\nApplication started. Press Ctrl+C to shut down.\nUnhandled Exception: System.InvalidOperationException: Collection was modified; enumeration operation may not execute.\n   at System.ThrowHelper.ThrowInvalidOperationException(ExceptionResource resource)\n   at System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.MoveNext()\n   at ZooKeeper.Admin.ZooKeeperManager.&lt;dispose&gt;d__9.MoveNext() in E:\\ZooKeeper-Admin\\ZooKeeper.Admin\\ZooKeeperManager.cs:line 55\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\n   at System.Threading.QueueUserWorkItemCallback.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\n</code></pre>"},{"title":"Hexo部署GitMent评论","date":"2018-12-23T03:02:53.000Z","updated":"2020-02-20T07:41:36.000Z","comments":1,"_content":"\n之前还没换主题的时候就是这样手动配置的，现在gitment都没人用了git-talk比较方便\n<!--more-->\n\n# GitMent简介 #\n  Gitment是一个基于GitHub Issues的评论系统，他使用一个Github Repository的Issues区作为评论的存储区。支持在前端直接引入，不需要任何后端代码。可以在页面进行登录、查看、评论、点赞等操作，同时有完整的 Markdown / GFM 和代码高亮支持。尤为适合各种基于 GitHub Pages 的静态博客或项目页面。<!-- more -->\n\n### Initialize Comments 时提示 Error: Validation Failed ### \n\n\n###### 出现问题 ###### \n\n  部署完成后点击初始化按钮后alert:\"Error: Validation Failed\" \n![图1.Error: Validation Failed](https://www.dreamccc.club/hexo/images/pasted-3.png)\n<center><span style=\"border-bottom: 1px solid #d9d9d9;color: #aaa;\">图1.Error: Validation Failed</span></center>\n\n###### 查询资料 ######\n\n  首先查阅了一下资料,找到了 [GitMent的issues](https://github.com/imsun/gitment/issues/118) ：\n &gt; 地址 https://github.com/imsun/gitment/issues/118\n\n###### 原因分析 ######\n\n  GitHub Issues中新建label时LabelName长度不能超过50，但是在GitMent中是以页面url(window.location.pathname)作为唯一标识来创建Label的，当我们以中文作为文章标题时，中文将被转义，转义后的url超过了50字符长度的限制，引起报错。\n\n![图2.LabelName长度过长](https://www.dreamccc.club/hexo/images/pasted-7.png)\n<center><span style=\"border-bottom: 1px solid #d9d9d9;color: #aaa;\">图2.LabelName长度过长</span></center>\n\n解决方式：\n 1. 缩短标题长度，并尽量少用中文标题\n 2. 寻找较短的具有唯一性的参数作为Issues的LabelName\n \n \n![图3.参数替换前后对比](https://www.dreamccc.club/hexo/images/pasted-4.png)\n<center><span style=\"border-bottom: 1px solid #d9d9d9;color: #aaa;\">图3.参数替换前后对比</span></center>\n \n很明显只能寻找其他参数来代替URL作为ID了，在这里我们使用网页标题（document.title）作为ID。\n\n\n###### 错误修正&nbsp;#######\n\n** hexo-theme-yilia主题 ** <br/>\n  该主题的gitment配置文件位于${hexo_root}/themes/hexo-theme-yilia/layout/_partial/post下\n\n修改gitment.ejs:\n![图4.gitment.ejs](https://www.dreamccc.club/hexo/images/pasted-9.png)\n<center><span style=\"border-bottom: 1px solid #d9d9d9;color: #aaa;\">图4.gitment.ejs</span></center>\n\n** hexo-theme-next主题 ** <br/>\n  该主题的gitment配置文件位于${hexo_root}/themes/hexo-theme-next/layout/_third-party/comments下\n\n修改gitment.swig:\n![图5.gitment.swig](https://www.dreamccc.club/hexo/images/pasted-8.png)\n<center><span style=\"border-bottom: 1px solid #d9d9d9;color: #aaa;\">图5.gitment.swig</span></center>\n\n###### 效果一览 ######\n\n  修改后成功初始化，Issus中出现了对应文章的记录，blog中可以正常的发布评论了。\n\n![图6.GitMent效果](https://www.dreamccc.club/hexo/images/pasted-10.png)\n<center><span style=\"border-bottom: 1px solid #d9d9d9;color: #aaa;\">图6.GitMent效果</span></center>\n\n\n![图7.GitHub效果](https://www.dreamccc.club/hexo/images/pasted-11.png)\n<center><span style=\"border-bottom: 1px solid #d9d9d9;color: #aaa;\">图7.GitHub效果</span></center></pre></en-note>\n","source":"_posts/Hexo部署GitMent评论.md","raw":"---\ntitle: 'Hexo部署GitMent评论'\ndate: 2018/12/23 11:02:53\nupdated: 2020/2/20 15:41:36\ncomments: true\ncategories: \n    - [搞点骚操作]\ntags: \n    - blog\n---\n\n之前还没换主题的时候就是这样手动配置的，现在gitment都没人用了git-talk比较方便\n<!--more-->\n\n# GitMent简介 #\n  Gitment是一个基于GitHub Issues的评论系统，他使用一个Github Repository的Issues区作为评论的存储区。支持在前端直接引入，不需要任何后端代码。可以在页面进行登录、查看、评论、点赞等操作，同时有完整的 Markdown / GFM 和代码高亮支持。尤为适合各种基于 GitHub Pages 的静态博客或项目页面。<!-- more -->\n\n### Initialize Comments 时提示 Error: Validation Failed ### \n\n\n###### 出现问题 ###### \n\n  部署完成后点击初始化按钮后alert:\"Error: Validation Failed\" \n![图1.Error: Validation Failed](https://www.dreamccc.club/hexo/images/pasted-3.png)\n<center><span style=\"border-bottom: 1px solid #d9d9d9;color: #aaa;\">图1.Error: Validation Failed</span></center>\n\n###### 查询资料 ######\n\n  首先查阅了一下资料,找到了 [GitMent的issues](https://github.com/imsun/gitment/issues/118) ：\n &gt; 地址 https://github.com/imsun/gitment/issues/118\n\n###### 原因分析 ######\n\n  GitHub Issues中新建label时LabelName长度不能超过50，但是在GitMent中是以页面url(window.location.pathname)作为唯一标识来创建Label的，当我们以中文作为文章标题时，中文将被转义，转义后的url超过了50字符长度的限制，引起报错。\n\n![图2.LabelName长度过长](https://www.dreamccc.club/hexo/images/pasted-7.png)\n<center><span style=\"border-bottom: 1px solid #d9d9d9;color: #aaa;\">图2.LabelName长度过长</span></center>\n\n解决方式：\n 1. 缩短标题长度，并尽量少用中文标题\n 2. 寻找较短的具有唯一性的参数作为Issues的LabelName\n \n \n![图3.参数替换前后对比](https://www.dreamccc.club/hexo/images/pasted-4.png)\n<center><span style=\"border-bottom: 1px solid #d9d9d9;color: #aaa;\">图3.参数替换前后对比</span></center>\n \n很明显只能寻找其他参数来代替URL作为ID了，在这里我们使用网页标题（document.title）作为ID。\n\n\n###### 错误修正&nbsp;#######\n\n** hexo-theme-yilia主题 ** <br/>\n  该主题的gitment配置文件位于${hexo_root}/themes/hexo-theme-yilia/layout/_partial/post下\n\n修改gitment.ejs:\n![图4.gitment.ejs](https://www.dreamccc.club/hexo/images/pasted-9.png)\n<center><span style=\"border-bottom: 1px solid #d9d9d9;color: #aaa;\">图4.gitment.ejs</span></center>\n\n** hexo-theme-next主题 ** <br/>\n  该主题的gitment配置文件位于${hexo_root}/themes/hexo-theme-next/layout/_third-party/comments下\n\n修改gitment.swig:\n![图5.gitment.swig](https://www.dreamccc.club/hexo/images/pasted-8.png)\n<center><span style=\"border-bottom: 1px solid #d9d9d9;color: #aaa;\">图5.gitment.swig</span></center>\n\n###### 效果一览 ######\n\n  修改后成功初始化，Issus中出现了对应文章的记录，blog中可以正常的发布评论了。\n\n![图6.GitMent效果](https://www.dreamccc.club/hexo/images/pasted-10.png)\n<center><span style=\"border-bottom: 1px solid #d9d9d9;color: #aaa;\">图6.GitMent效果</span></center>\n\n\n![图7.GitHub效果](https://www.dreamccc.club/hexo/images/pasted-11.png)\n<center><span style=\"border-bottom: 1px solid #d9d9d9;color: #aaa;\">图7.GitHub效果</span></center></pre></en-note>\n","slug":"Hexo部署GitMent评论","published":1,"layout":"post","photos":[],"link":"","_id":"ckacog5d100009w4tcf3ughmf","content":"<p>之前还没换主题的时候就是这样手动配置的，现在gitment都没人用了git-talk比较方便</p>\n<a id=\"more\"></a>\n\n<h1 id=\"GitMent简介\"><a href=\"#GitMent简介\" class=\"headerlink\" title=\"GitMent简介\"></a>GitMent简介</h1><p>  Gitment是一个基于GitHub Issues的评论系统，他使用一个Github Repository的Issues区作为评论的存储区。支持在前端直接引入，不需要任何后端代码。可以在页面进行登录、查看、评论、点赞等操作，同时有完整的 Markdown / GFM 和代码高亮支持。尤为适合各种基于 GitHub Pages 的静态博客或项目页面。<!-- more --></p>\n<h3 id=\"Initialize-Comments-时提示-Error-Validation-Failed\"><a href=\"#Initialize-Comments-时提示-Error-Validation-Failed\" class=\"headerlink\" title=\"Initialize Comments 时提示 Error: Validation Failed\"></a>Initialize Comments 时提示 Error: Validation Failed</h3><h6 id=\"出现问题\"><a href=\"#出现问题\" class=\"headerlink\" title=\"出现问题\"></a>出现问题</h6><p>  部署完成后点击初始化按钮后alert:”Error: Validation Failed”<br><img src=\"https://www.dreamccc.club/hexo/images/pasted-3.png\" alt=\"图1.Error: Validation Failed\"></p>\n<center><span style=\"border-bottom: 1px solid #d9d9d9;color: #aaa;\">图1.Error: Validation Failed</span></center>\n\n<h6 id=\"查询资料\"><a href=\"#查询资料\" class=\"headerlink\" title=\"查询资料\"></a>查询资料</h6><p>  首先查阅了一下资料,找到了 <a href=\"https://github.com/imsun/gitment/issues/118\" target=\"_blank\" rel=\"noopener\">GitMent的issues</a> ：<br> &gt; 地址 <a href=\"https://github.com/imsun/gitment/issues/118\" target=\"_blank\" rel=\"noopener\">https://github.com/imsun/gitment/issues/118</a></p>\n<h6 id=\"原因分析\"><a href=\"#原因分析\" class=\"headerlink\" title=\"原因分析\"></a>原因分析</h6><p>  GitHub Issues中新建label时LabelName长度不能超过50，但是在GitMent中是以页面url(window.location.pathname)作为唯一标识来创建Label的，当我们以中文作为文章标题时，中文将被转义，转义后的url超过了50字符长度的限制，引起报错。</p>\n<p><img src=\"https://www.dreamccc.club/hexo/images/pasted-7.png\" alt=\"图2.LabelName长度过长\"></p>\n<center><span style=\"border-bottom: 1px solid #d9d9d9;color: #aaa;\">图2.LabelName长度过长</span></center>\n\n<p>解决方式：</p>\n<ol>\n<li>缩短标题长度，并尽量少用中文标题</li>\n<li>寻找较短的具有唯一性的参数作为Issues的LabelName</li>\n</ol>\n<p><img src=\"https://www.dreamccc.club/hexo/images/pasted-4.png\" alt=\"图3.参数替换前后对比\"></p>\n<center><span style=\"border-bottom: 1px solid #d9d9d9;color: #aaa;\">图3.参数替换前后对比</span></center>\n\n<p>很明显只能寻找其他参数来代替URL作为ID了，在这里我们使用网页标题（document.title）作为ID。</p>\n<h6 id=\"错误修正-nbsp\"><a href=\"#错误修正-nbsp\" class=\"headerlink\" title=\"错误修正&nbsp;#######\"></a>错误修正&nbsp;#######</h6><p>** hexo-theme-yilia主题 ** <br/><br>  该主题的gitment配置文件位于${hexo_root}/themes/hexo-theme-yilia/layout/_partial/post下</p>\n<p>修改gitment.ejs:<br><img src=\"https://www.dreamccc.club/hexo/images/pasted-9.png\" alt=\"图4.gitment.ejs\"></p>\n<center><span style=\"border-bottom: 1px solid #d9d9d9;color: #aaa;\">图4.gitment.ejs</span></center>\n\n<p>** hexo-theme-next主题 ** <br/><br>  该主题的gitment配置文件位于${hexo_root}/themes/hexo-theme-next/layout/_third-party/comments下</p>\n<p>修改gitment.swig:<br><img src=\"https://www.dreamccc.club/hexo/images/pasted-8.png\" alt=\"图5.gitment.swig\"></p>\n<center><span style=\"border-bottom: 1px solid #d9d9d9;color: #aaa;\">图5.gitment.swig</span></center>\n\n<h6 id=\"效果一览\"><a href=\"#效果一览\" class=\"headerlink\" title=\"效果一览\"></a>效果一览</h6><p>  修改后成功初始化，Issus中出现了对应文章的记录，blog中可以正常的发布评论了。</p>\n<p><img src=\"https://www.dreamccc.club/hexo/images/pasted-10.png\" alt=\"图6.GitMent效果\"></p>\n<center><span style=\"border-bottom: 1px solid #d9d9d9;color: #aaa;\">图6.GitMent效果</span></center>\n\n\n<p><img src=\"https://www.dreamccc.club/hexo/images/pasted-11.png\" alt=\"图7.GitHub效果\"></p>\n<center><span style=\"border-bottom: 1px solid #d9d9d9;color: #aaa;\">图7.GitHub效果</span></center></pre></en-note>\n","site":{"data":{}},"excerpt":"<p>之前还没换主题的时候就是这样手动配置的，现在gitment都没人用了git-talk比较方便</p>","more":"<h1 id=\"GitMent简介\"><a href=\"#GitMent简介\" class=\"headerlink\" title=\"GitMent简介\"></a>GitMent简介</h1><p>  Gitment是一个基于GitHub Issues的评论系统，他使用一个Github Repository的Issues区作为评论的存储区。支持在前端直接引入，不需要任何后端代码。可以在页面进行登录、查看、评论、点赞等操作，同时有完整的 Markdown / GFM 和代码高亮支持。尤为适合各种基于 GitHub Pages 的静态博客或项目页面。<!-- more --></p>\n<h3 id=\"Initialize-Comments-时提示-Error-Validation-Failed\"><a href=\"#Initialize-Comments-时提示-Error-Validation-Failed\" class=\"headerlink\" title=\"Initialize Comments 时提示 Error: Validation Failed\"></a>Initialize Comments 时提示 Error: Validation Failed</h3><h6 id=\"出现问题\"><a href=\"#出现问题\" class=\"headerlink\" title=\"出现问题\"></a>出现问题</h6><p>  部署完成后点击初始化按钮后alert:”Error: Validation Failed”<br><img src=\"https://www.dreamccc.club/hexo/images/pasted-3.png\" alt=\"图1.Error: Validation Failed\"></p>\n<center><span style=\"border-bottom: 1px solid #d9d9d9;color: #aaa;\">图1.Error: Validation Failed</span></center>\n\n<h6 id=\"查询资料\"><a href=\"#查询资料\" class=\"headerlink\" title=\"查询资料\"></a>查询资料</h6><p>  首先查阅了一下资料,找到了 <a href=\"https://github.com/imsun/gitment/issues/118\" target=\"_blank\" rel=\"noopener\">GitMent的issues</a> ：<br> &gt; 地址 <a href=\"https://github.com/imsun/gitment/issues/118\" target=\"_blank\" rel=\"noopener\">https://github.com/imsun/gitment/issues/118</a></p>\n<h6 id=\"原因分析\"><a href=\"#原因分析\" class=\"headerlink\" title=\"原因分析\"></a>原因分析</h6><p>  GitHub Issues中新建label时LabelName长度不能超过50，但是在GitMent中是以页面url(window.location.pathname)作为唯一标识来创建Label的，当我们以中文作为文章标题时，中文将被转义，转义后的url超过了50字符长度的限制，引起报错。</p>\n<p><img src=\"https://www.dreamccc.club/hexo/images/pasted-7.png\" alt=\"图2.LabelName长度过长\"></p>\n<center><span style=\"border-bottom: 1px solid #d9d9d9;color: #aaa;\">图2.LabelName长度过长</span></center>\n\n<p>解决方式：</p>\n<ol>\n<li>缩短标题长度，并尽量少用中文标题</li>\n<li>寻找较短的具有唯一性的参数作为Issues的LabelName</li>\n</ol>\n<p><img src=\"https://www.dreamccc.club/hexo/images/pasted-4.png\" alt=\"图3.参数替换前后对比\"></p>\n<center><span style=\"border-bottom: 1px solid #d9d9d9;color: #aaa;\">图3.参数替换前后对比</span></center>\n\n<p>很明显只能寻找其他参数来代替URL作为ID了，在这里我们使用网页标题（document.title）作为ID。</p>\n<h6 id=\"错误修正-nbsp\"><a href=\"#错误修正-nbsp\" class=\"headerlink\" title=\"错误修正&nbsp;#######\"></a>错误修正&nbsp;#######</h6><p>** hexo-theme-yilia主题 ** <br/><br>  该主题的gitment配置文件位于${hexo_root}/themes/hexo-theme-yilia/layout/_partial/post下</p>\n<p>修改gitment.ejs:<br><img src=\"https://www.dreamccc.club/hexo/images/pasted-9.png\" alt=\"图4.gitment.ejs\"></p>\n<center><span style=\"border-bottom: 1px solid #d9d9d9;color: #aaa;\">图4.gitment.ejs</span></center>\n\n<p>** hexo-theme-next主题 ** <br/><br>  该主题的gitment配置文件位于${hexo_root}/themes/hexo-theme-next/layout/_third-party/comments下</p>\n<p>修改gitment.swig:<br><img src=\"https://www.dreamccc.club/hexo/images/pasted-8.png\" alt=\"图5.gitment.swig\"></p>\n<center><span style=\"border-bottom: 1px solid #d9d9d9;color: #aaa;\">图5.gitment.swig</span></center>\n\n<h6 id=\"效果一览\"><a href=\"#效果一览\" class=\"headerlink\" title=\"效果一览\"></a>效果一览</h6><p>  修改后成功初始化，Issus中出现了对应文章的记录，blog中可以正常的发布评论了。</p>\n<p><img src=\"https://www.dreamccc.club/hexo/images/pasted-10.png\" alt=\"图6.GitMent效果\"></p>\n<center><span style=\"border-bottom: 1px solid #d9d9d9;color: #aaa;\">图6.GitMent效果</span></center>\n\n\n<p><img src=\"https://www.dreamccc.club/hexo/images/pasted-11.png\" alt=\"图7.GitHub效果\"></p>\n<center><span style=\"border-bottom: 1px solid #d9d9d9;color: #aaa;\">图7.GitHub效果</span></center></pre></en-note>"},{"title":"Death_Standing","date":"2020-03-12T12:30:53.000Z","cover":"https://pic2.zhimg.com/v2-e0a965a2365bdadda41dedcb9fe5ec58_r.jpg","coverWidth":1284,"coverHeight":722,"_content":"\n\n### 前言\n\n\n> 三个月前《死亡搁浅》发售时，没有人想到里面近未来的世界观，会成为中国当下的现实。\n各地限制交通，封城断路，我们成了United Cities of China。\n人们离群索居，恐惧无声蔓延，病毒有如天上淅淅沥沥的时间雨，吞噬着希望和快乐。一旦死去，尸体必须马上就近火化，生者无法举行任何仪式。\n就连抢夺货物囤积在自己营地的米尔人也真实地还原了。\n快递员孤独地在路上奔波着，送药物，送口罩，送食品——一如游戏里的披萨和香槟。货物被留在冷冰冰的丰巢，小区门口的桌子上。因为没有3D投影，下单的人们甚至不能和快递员说一句赞美和感谢。\n不知道这样的日子还要过多久，如果有PS4，不妨买一份《死亡搁浅》，感受一下另一个相似的世界。\n即使在最冰冷和孤独的荒野，也能响起Low Roar的歌。\n———转自weibo:lilimarleen\n\n\n<!--more-->\n\n\n### 先吹一波\n\n - 世界观庞大且严谨，随着主线推进逐渐解锁世界的真相。\n - 游戏内容重复但却不枯燥，即使是同一个任务，也有无数种不同的完成方式。\n - 优美的风景辅以悠扬的音乐实在是画龙点睛之用。\n - 所有出场的人物角色都是根据真人3D建模的，在剧情中有很大的代入感。\n\n### 不足之处\n\n - 顽人的伏笔还没收呢，是要出续作的节奏？\n - 难度设置不均衡，前三章缺乏有效抗BT武器~~（其实前三章都是新手教程，真实的**走路模拟器**）~~，容易劝退新玩家。左下雪山区难度也十分劝退。\n - 缺乏互动性，该作只能与其他玩家建造的建筑互动，无法和其他快递员一起飙车还是蛮遗憾的。\n\n### 小彩蛋\n\n- 在点赞数比较多的小石堆休息会加快体力恢复速度。\n- 在点赞数比较多的蘑菇堆旁能捉到隐生虫，~~捉完记得浇花~~。\n- 在点赞数比较多的小石堆和蘑菇堆旁呼喊能够得到~~不明人员~~的回应和祝福！\n- 运送`mama`和`开罗尔艺术家`的时候可以绕道和妹子一起去泡温泉！！\n- 如果在生日那天送快递，对周围呼喊时会有~~不明人员~~祝你生日快乐！！！\n\n![生日小彩蛋](http://a1.qpic.cn/psc?/2f78ab1d-9f0c-40a8-b8ed-fc20fe8c44e3/xBo1HguJwfqPLd*kRKpWsEcMYmv9E9Xd4f9mt2mu7KM*p481WV2wbbRi8Pi2Qf0KNPq5q9t9TbFkqWnbRd9nwQ!!/b&ek=1&kp=1&pt=0&bo=gAc4BIAHOAQRECc!&tl=3&vuin=736233029&tm=1589817600&sce=60-2-2&rf=viewer_311)\n\n\n### 白金感言\n\n整个作品给人最大的印象就是`干净`。剧情中有一个相当重要的意象：`绳子`。绳子象征着`连接`，将各地孤立无援的人们连在一起、互相帮助，共同对抗末日。而整部游戏更是宣扬的`人性至善`,不管走到哪里，都会得到其他玩家的帮助，只要帮助过别人，便能收获他人的赞赏与激励。这种受到他人赞美与感谢的感觉真是令人沉迷其中。\n\n> 这款游戏的神奇之处就在于：**并非玩家挑选游戏，而是让游戏来挑选玩家**！\n\n对于习惯于快节奏对抗的玩家来说，这款游戏极有可能与他们无缘——被劝退于前两章的新手教程，而留存下来的玩家则是适合慢节奏大片时间游玩的玩家，只有被筛选出来的玩家才有机会尽情享受这款游戏带来的震撼与感动。\n\n{% asset_img IMG_20200319_004053.jpg [白金截图] %}\n\n###  一句话总结\n\n这个作品前无古人，不知道后是否有来者。","source":"_posts/Death_Standing.md","raw":"---\n\n\n\ntitle: \"Death_Standing\"\ndate: 2020/3/12 20:30:53\ncategories: \n    - [想到啥写啥]\ntags: \n    - Games\ncover: https://pic2.zhimg.com/v2-e0a965a2365bdadda41dedcb9fe5ec58_r.jpg\ncoverWidth: 1284\ncoverHeight: 722\n---\n\n\n### 前言\n\n\n> 三个月前《死亡搁浅》发售时，没有人想到里面近未来的世界观，会成为中国当下的现实。\n各地限制交通，封城断路，我们成了United Cities of China。\n人们离群索居，恐惧无声蔓延，病毒有如天上淅淅沥沥的时间雨，吞噬着希望和快乐。一旦死去，尸体必须马上就近火化，生者无法举行任何仪式。\n就连抢夺货物囤积在自己营地的米尔人也真实地还原了。\n快递员孤独地在路上奔波着，送药物，送口罩，送食品——一如游戏里的披萨和香槟。货物被留在冷冰冰的丰巢，小区门口的桌子上。因为没有3D投影，下单的人们甚至不能和快递员说一句赞美和感谢。\n不知道这样的日子还要过多久，如果有PS4，不妨买一份《死亡搁浅》，感受一下另一个相似的世界。\n即使在最冰冷和孤独的荒野，也能响起Low Roar的歌。\n———转自weibo:lilimarleen\n\n\n<!--more-->\n\n\n### 先吹一波\n\n - 世界观庞大且严谨，随着主线推进逐渐解锁世界的真相。\n - 游戏内容重复但却不枯燥，即使是同一个任务，也有无数种不同的完成方式。\n - 优美的风景辅以悠扬的音乐实在是画龙点睛之用。\n - 所有出场的人物角色都是根据真人3D建模的，在剧情中有很大的代入感。\n\n### 不足之处\n\n - 顽人的伏笔还没收呢，是要出续作的节奏？\n - 难度设置不均衡，前三章缺乏有效抗BT武器~~（其实前三章都是新手教程，真实的**走路模拟器**）~~，容易劝退新玩家。左下雪山区难度也十分劝退。\n - 缺乏互动性，该作只能与其他玩家建造的建筑互动，无法和其他快递员一起飙车还是蛮遗憾的。\n\n### 小彩蛋\n\n- 在点赞数比较多的小石堆休息会加快体力恢复速度。\n- 在点赞数比较多的蘑菇堆旁能捉到隐生虫，~~捉完记得浇花~~。\n- 在点赞数比较多的小石堆和蘑菇堆旁呼喊能够得到~~不明人员~~的回应和祝福！\n- 运送`mama`和`开罗尔艺术家`的时候可以绕道和妹子一起去泡温泉！！\n- 如果在生日那天送快递，对周围呼喊时会有~~不明人员~~祝你生日快乐！！！\n\n![生日小彩蛋](http://a1.qpic.cn/psc?/2f78ab1d-9f0c-40a8-b8ed-fc20fe8c44e3/xBo1HguJwfqPLd*kRKpWsEcMYmv9E9Xd4f9mt2mu7KM*p481WV2wbbRi8Pi2Qf0KNPq5q9t9TbFkqWnbRd9nwQ!!/b&ek=1&kp=1&pt=0&bo=gAc4BIAHOAQRECc!&tl=3&vuin=736233029&tm=1589817600&sce=60-2-2&rf=viewer_311)\n\n\n### 白金感言\n\n整个作品给人最大的印象就是`干净`。剧情中有一个相当重要的意象：`绳子`。绳子象征着`连接`，将各地孤立无援的人们连在一起、互相帮助，共同对抗末日。而整部游戏更是宣扬的`人性至善`,不管走到哪里，都会得到其他玩家的帮助，只要帮助过别人，便能收获他人的赞赏与激励。这种受到他人赞美与感谢的感觉真是令人沉迷其中。\n\n> 这款游戏的神奇之处就在于：**并非玩家挑选游戏，而是让游戏来挑选玩家**！\n\n对于习惯于快节奏对抗的玩家来说，这款游戏极有可能与他们无缘——被劝退于前两章的新手教程，而留存下来的玩家则是适合慢节奏大片时间游玩的玩家，只有被筛选出来的玩家才有机会尽情享受这款游戏带来的震撼与感动。\n\n{% asset_img IMG_20200319_004053.jpg [白金截图] %}\n\n###  一句话总结\n\n这个作品前无古人，不知道后是否有来者。","slug":"Death_Standing","published":1,"updated":"2020-05-18T17:25:45.182Z","_id":"ckacptyq60000u44tfjc0g4fo","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>三个月前《死亡搁浅》发售时，没有人想到里面近未来的世界观，会成为中国当下的现实。<br>各地限制交通，封城断路，我们成了United Cities of China。<br>人们离群索居，恐惧无声蔓延，病毒有如天上淅淅沥沥的时间雨，吞噬着希望和快乐。一旦死去，尸体必须马上就近火化，生者无法举行任何仪式。<br>就连抢夺货物囤积在自己营地的米尔人也真实地还原了。<br>快递员孤独地在路上奔波着，送药物，送口罩，送食品——一如游戏里的披萨和香槟。货物被留在冷冰冰的丰巢，小区门口的桌子上。因为没有3D投影，下单的人们甚至不能和快递员说一句赞美和感谢。<br>不知道这样的日子还要过多久，如果有PS4，不妨买一份《死亡搁浅》，感受一下另一个相似的世界。<br>即使在最冰冷和孤独的荒野，也能响起Low Roar的歌。<br>———转自weibo:lilimarleen</p>\n</blockquote>\n<a id=\"more\"></a>\n\n\n<h3 id=\"先吹一波\"><a href=\"#先吹一波\" class=\"headerlink\" title=\"先吹一波\"></a>先吹一波</h3><ul>\n<li>世界观庞大且严谨，随着主线推进逐渐解锁世界的真相。</li>\n<li>游戏内容重复但却不枯燥，即使是同一个任务，也有无数种不同的完成方式。</li>\n<li>优美的风景辅以悠扬的音乐实在是画龙点睛之用。</li>\n<li>所有出场的人物角色都是根据真人3D建模的，在剧情中有很大的代入感。</li>\n</ul>\n<h3 id=\"不足之处\"><a href=\"#不足之处\" class=\"headerlink\" title=\"不足之处\"></a>不足之处</h3><ul>\n<li>顽人的伏笔还没收呢，是要出续作的节奏？</li>\n<li>难度设置不均衡，前三章缺乏有效抗BT武器<del>（其实前三章都是新手教程，真实的<strong>走路模拟器</strong>）</del>，容易劝退新玩家。左下雪山区难度也十分劝退。</li>\n<li>缺乏互动性，该作只能与其他玩家建造的建筑互动，无法和其他快递员一起飙车还是蛮遗憾的。</li>\n</ul>\n<h3 id=\"小彩蛋\"><a href=\"#小彩蛋\" class=\"headerlink\" title=\"小彩蛋\"></a>小彩蛋</h3><ul>\n<li>在点赞数比较多的小石堆休息会加快体力恢复速度。</li>\n<li>在点赞数比较多的蘑菇堆旁能捉到隐生虫，<del>捉完记得浇花</del>。</li>\n<li>在点赞数比较多的小石堆和蘑菇堆旁呼喊能够得到<del>不明人员</del>的回应和祝福！</li>\n<li>运送<code>mama</code>和<code>开罗尔艺术家</code>的时候可以绕道和妹子一起去泡温泉！！</li>\n<li>如果在生日那天送快递，对周围呼喊时会有<del>不明人员</del>祝你生日快乐！！！</li>\n</ul>\n<p><img src=\"http://a1.qpic.cn/psc?/2f78ab1d-9f0c-40a8-b8ed-fc20fe8c44e3/xBo1HguJwfqPLd*kRKpWsEcMYmv9E9Xd4f9mt2mu7KM*p481WV2wbbRi8Pi2Qf0KNPq5q9t9TbFkqWnbRd9nwQ!!/b&ek=1&kp=1&pt=0&bo=gAc4BIAHOAQRECc!&tl=3&vuin=736233029&tm=1589817600&sce=60-2-2&rf=viewer_311\" alt=\"生日小彩蛋\"></p>\n<h3 id=\"白金感言\"><a href=\"#白金感言\" class=\"headerlink\" title=\"白金感言\"></a>白金感言</h3><p>整个作品给人最大的印象就是<code>干净</code>。剧情中有一个相当重要的意象：<code>绳子</code>。绳子象征着<code>连接</code>，将各地孤立无援的人们连在一起、互相帮助，共同对抗末日。而整部游戏更是宣扬的<code>人性至善</code>,不管走到哪里，都会得到其他玩家的帮助，只要帮助过别人，便能收获他人的赞赏与激励。这种受到他人赞美与感谢的感觉真是令人沉迷其中。</p>\n<blockquote>\n<p>这款游戏的神奇之处就在于：<strong>并非玩家挑选游戏，而是让游戏来挑选玩家</strong>！</p>\n</blockquote>\n<p>对于习惯于快节奏对抗的玩家来说，这款游戏极有可能与他们无缘——被劝退于前两章的新手教程，而留存下来的玩家则是适合慢节奏大片时间游玩的玩家，只有被筛选出来的玩家才有机会尽情享受这款游戏带来的震撼与感动。</p>\n<img src=\"/2020/03/12/Death_Standing/IMG_20200319_004053.jpg\" class=\"\" title=\"[白金截图]\">\n\n<h3 id=\"一句话总结\"><a href=\"#一句话总结\" class=\"headerlink\" title=\"一句话总结\"></a>一句话总结</h3><p>这个作品前无古人，不知道后是否有来者。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>三个月前《死亡搁浅》发售时，没有人想到里面近未来的世界观，会成为中国当下的现实。<br>各地限制交通，封城断路，我们成了United Cities of China。<br>人们离群索居，恐惧无声蔓延，病毒有如天上淅淅沥沥的时间雨，吞噬着希望和快乐。一旦死去，尸体必须马上就近火化，生者无法举行任何仪式。<br>就连抢夺货物囤积在自己营地的米尔人也真实地还原了。<br>快递员孤独地在路上奔波着，送药物，送口罩，送食品——一如游戏里的披萨和香槟。货物被留在冷冰冰的丰巢，小区门口的桌子上。因为没有3D投影，下单的人们甚至不能和快递员说一句赞美和感谢。<br>不知道这样的日子还要过多久，如果有PS4，不妨买一份《死亡搁浅》，感受一下另一个相似的世界。<br>即使在最冰冷和孤独的荒野，也能响起Low Roar的歌。<br>———转自weibo:lilimarleen</p>\n</blockquote>","more":"<h3 id=\"先吹一波\"><a href=\"#先吹一波\" class=\"headerlink\" title=\"先吹一波\"></a>先吹一波</h3><ul>\n<li>世界观庞大且严谨，随着主线推进逐渐解锁世界的真相。</li>\n<li>游戏内容重复但却不枯燥，即使是同一个任务，也有无数种不同的完成方式。</li>\n<li>优美的风景辅以悠扬的音乐实在是画龙点睛之用。</li>\n<li>所有出场的人物角色都是根据真人3D建模的，在剧情中有很大的代入感。</li>\n</ul>\n<h3 id=\"不足之处\"><a href=\"#不足之处\" class=\"headerlink\" title=\"不足之处\"></a>不足之处</h3><ul>\n<li>顽人的伏笔还没收呢，是要出续作的节奏？</li>\n<li>难度设置不均衡，前三章缺乏有效抗BT武器<del>（其实前三章都是新手教程，真实的<strong>走路模拟器</strong>）</del>，容易劝退新玩家。左下雪山区难度也十分劝退。</li>\n<li>缺乏互动性，该作只能与其他玩家建造的建筑互动，无法和其他快递员一起飙车还是蛮遗憾的。</li>\n</ul>\n<h3 id=\"小彩蛋\"><a href=\"#小彩蛋\" class=\"headerlink\" title=\"小彩蛋\"></a>小彩蛋</h3><ul>\n<li>在点赞数比较多的小石堆休息会加快体力恢复速度。</li>\n<li>在点赞数比较多的蘑菇堆旁能捉到隐生虫，<del>捉完记得浇花</del>。</li>\n<li>在点赞数比较多的小石堆和蘑菇堆旁呼喊能够得到<del>不明人员</del>的回应和祝福！</li>\n<li>运送<code>mama</code>和<code>开罗尔艺术家</code>的时候可以绕道和妹子一起去泡温泉！！</li>\n<li>如果在生日那天送快递，对周围呼喊时会有<del>不明人员</del>祝你生日快乐！！！</li>\n</ul>\n<p><img src=\"http://a1.qpic.cn/psc?/2f78ab1d-9f0c-40a8-b8ed-fc20fe8c44e3/xBo1HguJwfqPLd*kRKpWsEcMYmv9E9Xd4f9mt2mu7KM*p481WV2wbbRi8Pi2Qf0KNPq5q9t9TbFkqWnbRd9nwQ!!/b&ek=1&kp=1&pt=0&bo=gAc4BIAHOAQRECc!&tl=3&vuin=736233029&tm=1589817600&sce=60-2-2&rf=viewer_311\" alt=\"生日小彩蛋\"></p>\n<h3 id=\"白金感言\"><a href=\"#白金感言\" class=\"headerlink\" title=\"白金感言\"></a>白金感言</h3><p>整个作品给人最大的印象就是<code>干净</code>。剧情中有一个相当重要的意象：<code>绳子</code>。绳子象征着<code>连接</code>，将各地孤立无援的人们连在一起、互相帮助，共同对抗末日。而整部游戏更是宣扬的<code>人性至善</code>,不管走到哪里，都会得到其他玩家的帮助，只要帮助过别人，便能收获他人的赞赏与激励。这种受到他人赞美与感谢的感觉真是令人沉迷其中。</p>\n<blockquote>\n<p>这款游戏的神奇之处就在于：<strong>并非玩家挑选游戏，而是让游戏来挑选玩家</strong>！</p>\n</blockquote>\n<p>对于习惯于快节奏对抗的玩家来说，这款游戏极有可能与他们无缘——被劝退于前两章的新手教程，而留存下来的玩家则是适合慢节奏大片时间游玩的玩家，只有被筛选出来的玩家才有机会尽情享受这款游戏带来的震撼与感动。</p>\n<img src=\"/2020/03/12/Death_Standing/IMG_20200319_004053.jpg\" class=\"\" title=\"[白金截图]\">\n\n<h3 id=\"一句话总结\"><a href=\"#一句话总结\" class=\"headerlink\" title=\"一句话总结\"></a>一句话总结</h3><p>这个作品前无古人，不知道后是否有来者。</p>"}],"PostAsset":[{"_id":"source/_posts/好用常用人人都要会的最基本的Maven插件收集/title.jpg","slug":"title.jpg","post":"ckacfrpcx0008s04tfl7x85hv","modified":0,"renderable":0},{"_id":"source/_posts/计划任务的Spring实现与手动实现/title.jpg","slug":"title.jpg","post":"ckacfrpd0000cs04t7wup2o94","modified":0,"renderable":0},{"_id":"source/_posts/java8函数设计[1]-在filter中根据Key去重的函数/title.jpg","slug":"title.jpg","post":"ckacfrpd3000fs04t6q5w9qor","modified":0,"renderable":0},{"_id":"source/_posts/[MXCHIP-1]开发板到手/1.jpg","slug":"1.jpg","post":"ckacfrpco0002s04t166326j0","modified":0,"renderable":0},{"_id":"source/_posts/[MXCHIP-1]开发板到手/3.jpg","slug":"3.jpg","post":"ckacfrpco0002s04t166326j0","modified":0,"renderable":0},{"_id":"source/_posts/[MXCHIP-1]开发板到手/4.jpg","slug":"4.jpg","post":"ckacfrpco0002s04t166326j0","modified":0,"renderable":0},{"_id":"source/_posts/[MXCHIP-1]开发板到手/5.jpg","slug":"5.jpg","post":"ckacfrpco0002s04t166326j0","modified":0,"renderable":0},{"_id":"source/_posts/[MXCHIP-1]开发板到手/6.jpg","slug":"6.jpg","post":"ckacfrpco0002s04t166326j0","modified":0,"renderable":0},{"_id":"source/_posts/[MXCHIP-1]开发板到手/title.jpg","slug":"title.jpg","post":"ckacfrpco0002s04t166326j0","modified":0,"renderable":0},{"_id":"source/_posts/[MXCHIP-2]真机调试/DS0021CN_EMW3031_V1.4.pdf","slug":"DS0021CN_EMW3031_V1.4.pdf","post":"ckacjl4hl0003vo4t3qlm6e2y","modified":0,"renderable":0},{"_id":"source/_posts/[MXCHIP-2]真机调试/SWD接口定义.png","slug":"SWD接口定义.png","post":"ckacjl4hl0003vo4t3qlm6e2y","modified":0,"renderable":0},{"_id":"source/_posts/[MXCHIP-2]真机调试/UART接口定义.jpg","slug":"UART接口定义.jpg","post":"ckacjl4hl0003vo4t3qlm6e2y","modified":0,"renderable":0},{"_id":"source/_posts/[MXCHIP-2]真机调试/SWD接口定义.jpg","slug":"SWD接口定义.jpg","post":"ckacjl4hl0003vo4t3qlm6e2y","modified":0,"renderable":0},{"_id":"source/_posts/[MXCHIP-2]真机调试/title.jpg","slug":"title.jpg","post":"ckacjl4hl0003vo4t3qlm6e2y","modified":0,"renderable":0},{"_id":"source/_posts/Death_Standing/v2-e0a965a2365bdadda41dedcb9fe5ec58_r.jpg","slug":"v2-e0a965a2365bdadda41dedcb9fe5ec58_r.jpg","post":"ckacptyq60000u44tfjc0g4fo","modified":0,"renderable":0},{"_id":"source/_posts/Death_Standing/IMG_20200319_004053.jpg","slug":"IMG_20200319_004053.jpg","post":"ckacptyq60000u44tfjc0g4fo","modified":0,"renderable":0},{"_id":"source/_posts/Death_Standing/psc.jpg","slug":"psc.jpg","post":"ckacptyq60000u44tfjc0g4fo","modified":0,"renderable":0},{"_id":"source/_posts/[MXCHIP-1]开发板到手/title_s.jpg","slug":"title_s.jpg","post":"ckacfrpco0002s04t166326j0","modified":0,"renderable":0},{"_id":"source/_posts/[MXCHIP-1]开发板到手/5_s.jpg","slug":"5_s.jpg","post":"ckacfrpco0002s04t166326j0","modified":0,"renderable":0},{"_id":"source/_posts/[MXCHIP-1]开发板到手/1_s.jpg","slug":"1_s.jpg","post":"ckacfrpco0002s04t166326j0","modified":0,"renderable":0},{"_id":"source/_posts/[MXCHIP-1]开发板到手/4_s.jpg","slug":"4_s.jpg","post":"ckacfrpco0002s04t166326j0","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckacfrpcx0008s04tfl7x85hv","category_id":"ckacnprnv0004vo4t5347aw83","_id":"ckacnprnz0005vo4tcbub3kay"},{"post_id":"ckacfrpdt001ps04t92e5hhkm","category_id":"ckacnprp20006vo4t9dwm303f","_id":"ckacnprp20007vo4td00g13ef"},{"post_id":"ckacnprqb0008vo4t5rta00ps","category_id":"ckacnprnv0004vo4t5347aw83","_id":"ckacnprqf000bvo4tczskdewk"},{"post_id":"ckacfrpdp001js04tbdd82e62","category_id":"ckacnprnv0004vo4t5347aw83","_id":"ckacnprri000cvo4te4k8c73e"},{"post_id":"ckacfrpd3000fs04t6q5w9qor","category_id":"ckacnprnv0004vo4t5347aw83","_id":"ckacnprss000dvo4t7wjtf57q"},{"post_id":"ckacfrpdg001fs04t6cfo5bk6","category_id":"ckacnprp20006vo4t9dwm303f","_id":"ckacnprux000evo4td4trbydt"},{"post_id":"ckacfrpco0002s04t166326j0","category_id":"ckacnprnv0004vo4t5347aw83","_id":"ckacnprw9000fvo4tfwc84tru"},{"post_id":"ckacnps68000gvo4t1k5vg5gv","category_id":"ckacnprnv0004vo4t5347aw83","_id":"ckacnps6a000jvo4tay236h74"},{"post_id":"ckacfrpd0000cs04t7wup2o94","category_id":"ckacnprnv0004vo4t5347aw83","_id":"ckacnps78000kvo4td4ki32iw"},{"post_id":"ckacjl4hl0003vo4t3qlm6e2y","category_id":"ckacnprnv0004vo4t5347aw83","_id":"ckacnps89000ovo4t0w734t91"},{"post_id":"ckacfrpcz000bs04tebkk4tkp","category_id":"ckacnprnv0004vo4t5347aw83","_id":"ckacnps9e000pvo4t4hxtft87"},{"post_id":"ckacog5d100009w4tcf3ughmf","category_id":"ckacnprp20006vo4t9dwm303f","_id":"ckacog5d900029w4t2hsk15b8"},{"post_id":"ckacptyq60000u44tfjc0g4fo","category_id":"ckacptyqa0002u44tahdd5ct3","_id":"ckacptyqc0004u44t8opkapvf"}],"PostTag":[{"post_id":"ckacfrpco0002s04t166326j0","tag_id":"ckacfrpct0004s04t84grh6w5","_id":"ckacfrpd5000ks04t7suvfiyj"},{"post_id":"ckacfrpco0002s04t166326j0","tag_id":"ckacfrpcy0009s04t2qc444cu","_id":"ckacfrpd5000ms04t2xho7cml"},{"post_id":"ckacfrpco0002s04t166326j0","tag_id":"ckacfrpd0000ds04t6p6rge32","_id":"ckacfrpd6000ps04t1dnwc23p"},{"post_id":"ckacfrpcx0008s04tfl7x85hv","tag_id":"ckacfrpd6000ns04t67wt9wcl","_id":"ckacfrpdb0014s04thpoub1fi"},{"post_id":"ckacfrpcx0008s04tfl7x85hv","tag_id":"ckacfrpda0012s04t9yxvfdkf","_id":"ckacfrpdb0015s04t890x2w09"},{"post_id":"ckacfrpcz000bs04tebkk4tkp","tag_id":"ckacfrpd6000ns04t67wt9wcl","_id":"ckacfrpdc0017s04tabnr9rem"},{"post_id":"ckacfrpd0000cs04t7wup2o94","tag_id":"ckacfrpd6000ns04t67wt9wcl","_id":"ckacfrpdd001as04t9qoy8zn8"},{"post_id":"ckacfrpd0000cs04t7wup2o94","tag_id":"ckacfrpdc0018s04t3ofxah85","_id":"ckacfrpdd001bs04t93ve1q2n"},{"post_id":"ckacfrpd3000fs04t6q5w9qor","tag_id":"ckacfrpdc0019s04t9n8ddauj","_id":"ckacfrpdd001ds04t1jwx98iu"},{"post_id":"ckacfrpd3000fs04t6q5w9qor","tag_id":"ckacfrpd6000ns04t67wt9wcl","_id":"ckacfrpdd001es04t8ics1gry"},{"post_id":"ckacfrpdg001fs04t6cfo5bk6","tag_id":"ckacfrpdh001gs04tg95bfnxe","_id":"ckacfrpdi001is04t5z0m1c1v"},{"post_id":"ckacfrpdp001js04tbdd82e62","tag_id":"ckacfrpdc0018s04t3ofxah85","_id":"ckacfrpdr001ms04t58fx7m75"},{"post_id":"ckacfrpdp001js04tbdd82e62","tag_id":"ckacfrpd6000ns04t67wt9wcl","_id":"ckacfrpds001ns04t1yfw2vuu"},{"post_id":"ckacfrpdp001js04tbdd82e62","tag_id":"ckacfrpdq001ks04t6we80qns","_id":"ckacfrpds001os04t3ujqhutx"},{"post_id":"ckacfrpdt001ps04t92e5hhkm","tag_id":"ckacfrpdh001gs04tg95bfnxe","_id":"ckacfrpdx001qs04t4b84d8da"},{"post_id":"ckacnprqb0008vo4t5rta00ps","tag_id":"ckacfrpd6000ns04t67wt9wcl","_id":"ckacnprqe0009vo4t62z6a0l5"},{"post_id":"ckacnprqb0008vo4t5rta00ps","tag_id":"ckacfrpd7000ts04t6rj144mv","_id":"ckacnprqf000avo4tbrjp0af3"},{"post_id":"ckacnps68000gvo4t1k5vg5gv","tag_id":"ckacfrpd6000ns04t67wt9wcl","_id":"ckacnps69000hvo4teptzf7sn"},{"post_id":"ckacnps68000gvo4t1k5vg5gv","tag_id":"ckacfrpd7000ts04t6rj144mv","_id":"ckacnps69000ivo4t2msi2uer"},{"post_id":"ckacjl4hl0003vo4t3qlm6e2y","tag_id":"ckacfrpct0004s04t84grh6w5","_id":"ckacnps88000lvo4t8e7lhjiz"},{"post_id":"ckacjl4hl0003vo4t3qlm6e2y","tag_id":"ckacfrpcy0009s04t2qc444cu","_id":"ckacnps89000mvo4t7uifcy9l"},{"post_id":"ckacjl4hl0003vo4t3qlm6e2y","tag_id":"ckacfrpd0000ds04t6p6rge32","_id":"ckacnps89000nvo4tfy4e73wz"},{"post_id":"ckacog5d100009w4tcf3ughmf","tag_id":"ckacfrpd4000is04t4ut19k61","_id":"ckacog5d400019w4t5lah0q6w"},{"post_id":"ckacptyq60000u44tfjc0g4fo","tag_id":"ckacptyq90001u44t4thrdrfv","_id":"ckacptyqc0003u44tg0kubiaf"}],"Tag":[{"name":"单片机","_id":"ckacfrpct0004s04t84grh6w5"},{"name":"IOT","_id":"ckacfrpcy0009s04t2qc444cu"},{"name":"C","_id":"ckacfrpd0000ds04t6p6rge32"},{"name":"blog","_id":"ckacfrpd4000is04t4ut19k61"},{"name":"java","_id":"ckacfrpd6000ns04t67wt9wcl"},{"name":"zookeeper","_id":"ckacfrpd7000ts04t6rj144mv"},{"name":"maven","_id":"ckacfrpda0012s04t9yxvfdkf"},{"name":"spring","_id":"ckacfrpdc0018s04t3ofxah85"},{"name":"lambda","_id":"ckacfrpdc0019s04t9n8ddauj"},{"name":"linux","_id":"ckacfrpdh001gs04tg95bfnxe"},{"name":"dubug","_id":"ckacfrpdq001ks04t6we80qns"},{"name":"Games","_id":"ckacptyq90001u44t4thrdrfv"}]}}